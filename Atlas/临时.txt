https://www.youtube.com/watch?v=phYuQWRaazw

Learn how to build a bank app with Java Swing in this step-by-step ASMR programming tutorial for beginners. We will be creating a graphical user interface (GUI) using the Swing framework and will be using MySQL database to perform user authentication and storing user data. Follow along to learn how to utilize MySQL connector JAR to communicate our Java application to a MySQL database. Gain practical experience with Java projects like this bankinga pp - perfect for polishing your skills. Take your Java skills to the next level by building real projects with this ASMR coding tutorial.

URLs used in the video
1. MySQL Connector JAR: https://dev.mysql.com/downloads/conne...
2. How to install and connect MySQL for IntelliJ:    ‚Ä¢ Connect MySQL to Java in IntelliJ 202...  

üï£ Timestamp:
00:00 - 00:30: Intro
00:31 - 00:37: Table of Contents
00:38 - 06:55: Prerequisites 
06:56 - 09:21: Building BaseFrame
09:22 - 18:05: Building LoginGui
18:06 - 21:58: Building RegisterGui
21:59 - 34:02: Building BankingAppGui
34:03 - 45:29: Adding LoginGui Functionality
45:30 - 55:31: Adding RegisterGui Functionality
55:32 - 01:49:10: Adding BankingAppGui Functionality
01:49:11 - 01:51:03: Outro + Full Demo

------------------------------SOCIAL------------------------------
üìπ Checkout my ASMR studying channel:    / @taptapstudyi.  .
üê±‚ÄçüöÄ Github: https://github.com/curadProgrammer



===================================================================

Build a Full-Stack Online Chat App in Java (Swing, Springboot Websocket)

https://www.youtube.com/watch?v=aNbNa26RlE8

Learn how to build an Online Chat Application all in Java! 

In this tutorial, we dive into Spring Boot's WebSocket library to handle real-time messaging on the backend, and then use Swing to create the GUI for the app. Towards the end, I‚Äôll walk you through hosting your WebSocket server online using Render, so you can test and interact with it from anywhere.

üîó Links:
1. Maven Download: https://maven.apache.org/download.cgi
2. Spring Initializr: https://start.spring.io/
3. Render: https://render.com/
4. Github: https://github.com/
5. Docker Explanation:    ‚Ä¢ Hosting Springboot App on render.com  

------------------------------SOCIAL------------------------------
üìπ Checkout my Game Development Channel:    / @taptapstudyi.  .
üê±‚ÄçüöÄ Github: https://github.com/curadProgrammer
üÖø Patreon:   / taptap196  

See more of my content below: 
ü©≥ Shorts Playlist:    ‚Ä¢ Shorts  
‚òï Java Playlist:    ‚Ä¢ Java Swing Series  
üçµ JavaFX Playlist:    ‚Ä¢ JavaFX Series  

‚è± Timestamp:
00:00 - 00:45 : Intro
00:46 - 03:28: Maven Installation
03:29 - 06:47: Springboot Project Setup
06:48 - 08:33: Springboot Overview
08:34 - 11:58: Websocket Config
11:59 - 16:48: Websocket Controller (Send Message)
16:49 - 27:39: Websocket Client (Send Message)
27:40 -  32:22: Websocket Controller (Send Active Users List)
32:23 - 36:28: Websocket Client (Connect User)
36:29 - 39:57: ClientGUI Window
39:58 - 44:39: ClientGUI Exit Popup
44:40 - 53:24: ClientGUI Connected Users Components
53:25 -  1:10:16: ClientGUI Chat Display
1:10:17 - 1:18:45: ClientGUI Websocket Connection
1:18:46 - 1:40:42: ClientGUI Message listener
1:40:43 - 1:45:50: ClientGUI Username Input
1:45:51 - 2:03:15: ClientGUI Bettering UX/UI Experience
2:03:16 - 2:14:28: Hosting Websocket on Render using Docker
2:14:29 - 2:15:02: Outro + Patreon Announcement
 
‚úÖ Answers to the Video Quiz Questions:
1. The default port is 8080
2. STOMP stands for Simple (or Streaming) Text Oriented Message Protocol
3. POJO stands for Plain Old Java Object
4. The URL of our websocket it http://localhost:8080/ws
5. /app/connect
6. HIDE_ON_CLOSE
7. BorderLayout
8. EmptyBorder
9. revalidate() and repaint()
10. JScrollPane












===============================================








=======================================



