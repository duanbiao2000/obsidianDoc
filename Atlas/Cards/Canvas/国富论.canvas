{
	"nodes":[
		{"id":"5ae03f8948b5057a","type":"group","x":-115,"y":400,"width":1654,"height":840,"color":"1","label":"敏捷宣言"},
		{"id":"ef79ad268e7f5547","x":660,"y":420,"width":640,"height":800,"type":"file","file":"2.Sphere/Coding/瀑布模型 Scrum与DevOps对比.md"},
		{"id":"4515a83a2f30ffdc","type":"text","text":"wealth of nations","x":-320,"y":-540,"width":205,"height":50},
		{"id":"cf549642fcb7067e","x":-775,"y":-640,"width":660,"height":878,"type":"text","text":"# ✨ 高效学习卡片：国富论 - 分工受市场范围的限制\n\n> [!tip] 🌱 核心原则\n> 理解分工的深化不是凭空产生的，而是市场交换能力（即市场范围）扩展的直接结果。\n>\n> *   市场扩张促进精细分工 > 市场狭小限制专业化\n> *   专业化生产提升效率 > “多面手”模式效率低下\n\n## 关键论证点\n*   📈 **起因与限制:** 分工源于人类交换的倾向，但其程度受限于交换能力，也就是市场范围的大小。这是本章的中心论点。\n*   📉 **小市场阻碍原理:** 市场狭小时，个人无法仅靠单一产品的交换来满足所有需求，因为需求有限导致产品剩余无法售出，从而抑制了专业化分工，迫使人们身兼数职。\n*   🏘️ **城乡对比例证:**\n    *   **大都市:** 广阔的市场能支撑高度专业化的职业（如搬运工）。\n    *   **小乡村/偏远地区:** 市场狭小无法支撑专业分工，导致个体（如农民）必须承担多种生产角色（屠夫、面包师等）。\n*   🛠️ **“多面手”现象:** 农村地区的工匠（如木匠、铁匠）因市场小，往往需要掌握多种相关技能，成为“多面手”，这是市场限制分工的直接体现。\n*   🌍 **核心结论:** 市场范围是制约分工深度和广度的根本因素。市场越大，分工越细，效率越高，财富增长越快；反之，市场越小，分工越粗糙，经济发展受限。\n"},
		{"id":"5d76068dd9580f8a","x":-60,"y":-640,"width":660,"height":878,"type":"text","text":"# ✨ 高效学习卡片：国富论 - 商品的真实价格与名义价格\n\n> [!tip] 🌱 核心原则\n> 理解商品价值的关键在于区分其能支配的劳动量（真实价格）和其货币标价（名义价格），劳动是衡量价值的最终、真实尺度。\n>\n> *   劳动量衡量真实价值 > 货币衡量名义价值\n> *   真实价格相对稳定 > 名义价格易受货币价值波动影响\n\n## 关键论证点\n*   ⚖️ **价值的真实尺度:** 劳动是衡量一切商品交换价值的终极、真实标准，因为它反映了获取该商品所需付出的（或可支配的）努力/代价。\n*   💪 **支配劳动量即财富:** 在分工社会，个人财富的真正衡量标准是他能够购买或支配多少他人的劳动量，这直接决定了他能享受的生活必需品、便利品和娱乐品的多少。\n*   💰 **真实价格 vs. 名义价格:**\n    *   **真实价格 (劳动价格):** 商品能够购买或支配的劳动量。它代表了获取商品的真实“辛苦”，相对稳定。\n    *   **名义价格 (货币价格):** 商品用货币（如金银）表示的价格。会随着货币本身价值的变动而变动，并非价值的稳定尺度。\n*   🧐 **为何劳动是“真实”尺度:** 斯密认为，相比于易变的货币或其他商品，同等劳动量对于劳动者通常意味着同等的辛苦和牺牲，其自身价值相对更稳定，更能反映生产的本质，并有助于区分价格波动是源于商品本身还是货币。\n"},
		{"id":"8d794811c8ee07c2","x":660,"y":-640,"width":640,"height":878,"type":"text","text":"\n# ✨ 高效学习卡片：国富论 - 商品价值构成与财富分配\n\n> [!tip] 🌱 核心原则\n> 理解经济增长的关键在于认识到国民财富的分配：将更多年产物用于雇佣生产性劳动（勤劳阶级）而非被非生产性阶级（游情阶级）消费，是推动经济持续增长的核心动力。\n>\n> *   资本积累（再投资于劳动） > 非生产性消费（游情阶级消费）\n> *   商品价值 = 劳动 + 利润 + 地租 > 商品价值 = 仅劳动 （适用于“文明”社会）\n\n## 关键论证点\n*   💰 **价值构成:** 在发达经济体中，大部分商品的交换价值（价格）不仅包含生产所耗费的劳动成本（工资），还必然包含资本的利润和土地的地租。\n*   📈 **价值盈余:** 因此，社会全部年产物所能购买或支配的总劳动量，远大于实际生产这些产物所投入的劳动量。这个“盈余”主要由利润和地租构成。\n*   ⚙️ **增长引擎:** 理论上，若将年产物换取的全部价值（可支配的劳动）都重新雇佣劳动投入再生产，经济将实现加速增长。\n*   🚶‍♂️ **现实分配:** 实际上，没有国家会将全部年产物用于维持“勤劳阶级”（劳动者）。相当一部分会被“游情阶级”（依靠利润、地租生活的人）消费掉，而非用于扩大再生产。\n*   ⚖️ **分配决定走向:** 一个国家年产物价值的增减趋势（经济增长、停滞或衰退），根本上取决于其年产物在“勤劳阶级”（再投资）和“游情阶级”（消费）之间的分配比例。\n"},
		{"id":"df86ed67ee259d5d","x":-60,"y":420,"width":660,"height":800,"type":"text","text":"\n# ✨ 高效学习卡片：敏捷开发方法论概览\n\n> [!tip] 🌱 核心原则\n> 敏捷开发强调快速响应变化、持续交付价值，通过高效的团队协作和灵活的流程管理，实现高质量软件的快速交付。\n>\n> *   **响应变化** > **计划变更**\n> *   **快速交付** > **频繁迭代**\n> *   **团队协作** > **自组织**\n\n## 敏捷部落与关键概念\n\n### 1. 极限编程 (Extreme Programming - XP)\n- **结对编程 (Pair Programming):**  提高代码质量，知识共享。\n- **单元测试 (Unit Tests):**  测试驱动开发，确保代码质量。\n- **重构 (Refactoring):**  优化代码结构，提高可维护性。\n- **简单设计 (Simple Design):**  选择最简单的设计方案。\n- **测试驱动开发 (TDD):**  先写测试，再编写代码。\n- **频繁发布 (Frequent Releases):**  快速获得用户反馈。\n- **持续集成 (Continuous Integration):**  自动化构建和测试，尽早发现问题。\n- **集体代码所有权 (Collective Ownership):**  团队共同负责代码质量。\n- **编码标准 (Coding Standards):**  提高代码可读性和可维护性。\n- **隐喻 (Metaphor):**  使用共同的隐喻理解系统架构。\n- **可持续的节奏 (Sustainable Pace):**  避免过度加班，保持团队健康和效率。\n\n### 2. Scrum\n- **Scrum of Scrums:**  协调多个 Scrum 团队工作。\n- **迭代 (Iterations) / 冲刺 (Sprint):**  短周期的迭代，交付可工作产品增量。\n- **速度 (Velocity):**  衡量团队完成工作的能力。\n- **每日站会 (Daily Meeting / Daily Scrum):**  同步进展，计划工作，识别障碍。\n- **时间盒 (Timebox):**  时间限制，提高效率。\n- **燃尽图 (Burndown Chart):**  跟踪剩余工作量，监控进度。\n- **产品待办列表 (Product Backlog):**  包含所有产品功能、需求等的列表。\n- **迭代待办列表 (Sprint Backlog):**  每个迭代需要完成的任务列表。\n- **待办列表梳理 (Backlog Grooming):**  维护和梳理 Product Backlog。\n- **计划扑克 (Planning Poker):**  估算用户故事工作量。\n- **完成的定义 (Definition of Done - DoD):**  判断用户故事或任务是否完成的标准清单。\n- **就绪的定义 (Definition of Ready - DoR):**  用户故事进入迭代前需要满足的标准清单。\n\n### 3. 团队 (Teams)\n- **团队 (Team):**  自组织、跨职能的团队。\n- **团队室 (Team Room):**  促进沟通和信息共享的空间。\n- **尼科尼科日历 (Niko-niko Calendar):**  团队情绪可视化工具。\n- **引导 (Facilitation):**  帮助团队有效讨论和决策。\n- **三个问题 (Three Questions):**  每日站会中团队成员回答的问题。\n- **集体所有权 (Collective Ownership):**  团队共同承担责任。\n- **可持续的节奏 (Sustainable Pace):**  健康的工作节奏。\n\n### 4. 产品管理 (Product Management)\n- **产品负责人 (Product Owner):**  定义产品愿景，管理 Backlog，确定产品优先级。\n- **用户故事 (User Stories):**  描述用户需求的简洁方式。\n- **角色-功能-收益 (Role-Feature-Benefit):**  用户故事编写模板。\n- **故事拆分 (Story Splitting):**  将大故事拆分成小故事。\n- **故事地图 (Story Mapping):**  组织和分解用户故事，规划产品发布。\n- **用户画像 (Personas):**  代表目标用户群体的虚构人物。\n- **验收 (Acceptance):**  用户或 Product Owner 对完成的用户故事或功能的确认。\n- **可用性测试 (Usability Test):**  评估产品易用性。\n- **项目章程 (Project charters):**  明确项目目标、范围、干系人等信息。\n\n### 5. 精益 (Lean)\n- **前置时间 (Lead Time):**  从需求提出到最终交付的时间。\n- **价值流图析 (Value Stream Mapping):**  分析和优化价值流。\n- **消除浪费 (Eliminate Waste):**  识别和消除价值流中的浪费。\n- **持续改进 (Continuous Improvement):**  不断改进流程、产品和团队能力。\n\n### 6. DevOps\n- **持续部署 (Continuous Deployment):**  自动化软件发布流程。\n- **持续集成 (Continuous Integration):**  自动化构建和测试。\n- **自动化构建 (Automated Build):**  使用工具完成代码编译、打包、测试等。\n- **自动化测试 (Automated Testing):**  使用工具执行测试用例。\n- **监控 (Monitoring):**  持续监控生产环境。\n- **基础设施即代码 (Infrastructure as Code - IaC):**  将基础设施配置以代码的形式进行管理和自动化部署。\n\n### 7. 设计 (Design)\n- **快速设计会 (Quick design session):**  迭代初期的快速设计讨论。\n- **CRC 卡片 (CRC cards):**  类-职责-协作卡片。\n- **Mock 对象 (Mock objects):**  模拟外部依赖的单元测试工具。\n- **简单设计 (Simple Design):**  选择最简单的设计方案。\n- **简洁规则 (Rules of Simplicity):**  简洁设计原则。\n- **通用语言 (Ubiquitous language):**  团队使用共同的、一致的语言。\n- **探索性测试 (Exploratory testing):**  基于经验和测试章程的即兴测试。\n\n### 8. 测试 (Testing)\n- **单元测试 (Unit tests):**  测试软件中最小可测试单元。\n- **验收 (Acceptance):**  用户或 Product Owner 对完成的用户故事的确认。\n- **可用性测试 (Usability Test):**  评估产品易用性。\n- **探索性测试 (Exploratory testing):**  基于经验和测试章程的即兴测试。\n- **验收测试驱动开发 (ATDD):**  先编写验收测试用例，再进行开发。\n- **行为驱动开发 (BDD):**  使用自然语言描述用户行为和期望。\n- **Given-When-Then 结构:**  BDD 中常用的测试用例编写结构。\n\n### 9. 基础 (Fundamentals)\n- **迭代式增量开发 (Iterative and Incremental Development):**  分解成小的、可管理、可迭代的增量版本进行开发。\n- **引导 (Facilitation):**  帮助团队有效讨论和决策。\n- **3C's (Card, Conversation, Confirmation):**  用户故事编写原则。\n- **INVEST 原则:**  评估用户故事质量的标准。\n- **快速设计会 (Quick design session):**  迭代初期的快速设计讨论。"}
	],
	"edges":[]
}