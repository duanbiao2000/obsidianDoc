{
	"nodes":[
		{"id":"80048a76d87a33f7","x":782,"y":1457,"width":598,"height":340,"type":"file","file":"Atlas/Cards/Canvas/原子笔记-清晰内聚可独立理解.md"},
		{"id":"fcb429143362fb22","type":"link","url":"https://zh.wikipedia.org/wiki/%E5%8D%A1%E7%89%87%E7%9B%92%E7%AD%86%E8%A8%98%E6%B3%95","x":-360,"y":-400,"width":400,"height":400},
		{"id":"88ad6f13aed7b485","type":"text","text":"思维模型和 Obsidian 之间的关系。\n\n简单来说，**Obsidian 是一个非常适合用来管理、连接和应用你的思维模型的强大工具。**\n\n思维模型（Mental Models）是你用来理解世界、思考问题、做出决策的各种框架、概念、理论或类比。它们是你认知世界的“工具箱”。例如：“复利效应”、“边际效益递减”、“机会成本”、“帕累托法则（80/20原则）”、“贝叶斯定理”、“安全边际”、“[[映射不是疆域]]（The Map is not the Territory）”、“奥卡姆剃刀”等等。拥有并熟练运用多种思维模型，可以帮助你更清晰地看清事物的本质，做出更明智的选择。\n\nObsidian 是一款基于 Markdown 的个人知识管理软件，它将你的所有笔记存储在本地文件夹中，最核心的特点是**基于链接（Link）构建笔记之间的联系**，形成一个相互关联的知识网络（通常可视化为图谱视图）。\n\n那么，这两者是如何结合的呢？\n\n1.  **捕获和记录思维模型：** 当你学习到一个新的思维模型时（无论是在书中、播客中还是生活中），你可以立即在 Obsidian 中创建一个专属笔记来记录它。这个笔记可以包含模型的**名称、定义、核心思想、适用的场景、反例以及你是如何理解它的**。\n2.  **建立思维模型之间的联系：** 很少有思维模型是孤立存在的。它们往往相互关联、相互补充。Obsidian 的核心功能就是建立这种联系。你可以使用**双向链接**，将一个思维模型笔记连接到另一个相关的模型笔记。例如，将“复利效应”连接到“指数增长”，将“帕累托法则”连接到“二八定律”、“高效工作”等。\n3.  **联系到具体的例子和应用：** 理解一个思维模型的最好方式是将其应用于实践并观察结果。你可以在 Obsidian 中将思维模型笔记链接到你实际遇到的问题、项目、决策过程或现实世界的例子。例如，将“机会成本”链接到你正在做的某个投资决策笔记，或者将“奥卡姆剃刀”链接到你分析某个复杂问题时的笔记。\n4.  **构建你的“思维格栅”（Latticework）：** 投资家查理·芒格（Charlie Munger）强调构建一个跨学科的思维模型“格栅”，用多个模型从不同角度审视问题。**Obsidian 的链接和图谱视图天然地支持你构建这种非线性的、相互连接的知识结构。** 你的笔记网络就像一个可视化、可互动的“思维格栅”，你可以清晰地看到各种概念和模型是如何相互连接和支持的。\n5.  **迭代、深化理解和应用：** 随着你对某个模型的理解加深，或者发现新的应用场景，你可以随时修改和完善对应的笔记。Obsian 的灵活性让这个过程非常便捷。通过不断地链接和回顾，你能更好地记住模型，并在需要时快速调用和应用。\n6.  **方便检索和回顾：** 当你需要回顾某个模型或寻找解决特定问题的模型时，可以通过搜索或沿着链接快速找到相关的笔记，或者通过图谱视图浏览相关的概念集群。\n\n**总结来说：**\n\n思维模型是你的“知识工具箱”，而 Obsidian 提供了一个理想的“工具箱架子”和“连接线缆”。\n\n**建立**不同模型、模型与现实世界应用之间的**联系**。\n\n**方便地**回顾、迭代和**应用**这些模型。\n\n","x":-880,"y":-440,"width":426,"height":520},
		{"id":"74e520444194276b","type":"text","text":"“映射不是疆域”（The Map is not the Territory）这个思维模型，我可以为你解释一下。\n\n**核心思想：**\n\n这个思维模型强调的是，“我们对现实世界的理解、模型、描述或信念（即“映射”）”与“现实世界本身（即“疆域”）”是不同的，而且通常是简化、抽象或不完整的。\n\n**来源：**\n\n这个概念最早由波兰裔美国哲学家和科学家阿尔弗雷德·科日布斯基（Alfred Korzybski）在其创立的“普通语义学”（General Semantics）理论中提出。他用这个比喻来说明语言、思维和符号系统是如何与它们所代表的现实世界产生区别的。\n\n**含义解释：**\n\n1.  **地图（The Map）：** 代表我们用来理解、描述或表示现实世界的任何形式的抽象、模型、理论、语言、想法、信念、观点、感觉等。它是一种符号表示，是对现实的简化和概括。\n2.  **疆域（The Territory）：** 代表客观存在的现实世界本身，是复杂的、多维的、不断变化的，通常无法被任何单一的“地图”完全捕获。\n\n**重要性与应用：**\n\n理解“映射不是疆域”这个思维模型非常重要，因为它提醒我们：\n\n*   **认识到我们理解的局限性：** 我们永远无法完全理解现实本身，我们所有的知识和概念都是对现实的简化模型。\n*   **避免将模型误认为现实：** 不要把我们对世界的看法、理论或模型当作世界本身来对待。这有助于避免教条主义和僵化思维。\n*   **鼓励批判性思维：** 质疑“地图”是否准确地反映了“疆域”，或者它是否只是对“疆域”的一种特定、有限的解读。\n*   **促进沟通与理解：** 认识到每个人都有自己的“地图”，这些地图可能因为个人经验、文化背景、感知方式不同而差异巨大。理解这一点有助于更好的沟通和接受不同观点。\n*   **应对复杂性：** 现实世界是复杂的，我们的模型必须简化才能被理解和使用。但同时也要记住这些简化带来的信息损失。\n*   **持续学习和修正：** 随着我们获得新的信息或经验，我们的“地图”需要不断地被修正和更新，以更好地反映“疆域”。\n\n**例子：**\n\n*   一张地理地图是对真实地貌的简化，它无法显示地形的每一个细节、每一棵树或每一栋房屋。\n*   科学理论是对自然规律的“地图”，它是一个模型来解释现象，但可能不是自然的最终、完整的真相。\n*   你对一个人的描述（你的“地图”）并不是那个人本身（“疆域”），你的描述遗漏了他的许多方面，而且可能带有你的主观看法。\n*   经济模型是对复杂经济系统的简化，它们无法预测所有意外情况，也不能完全捕捉人类行为的非理性。\n\n总之，“映射不是疆域”是一个强大的提醒，让我们保持谦逊，认识到我们对世界的理解总是有限的、有偏见的，并鼓励我们不断审视和调整自己的“地图”，以更好地与“疆域”互动。","x":-880,"y":220,"width":426,"height":300},
		{"id":"a5b5b157b94aa3d3","type":"text","text":"好的，我們來把這個抽象的「地圖」概念具體化。根據定義，「地圖」是任何用來理解、描述或表示現實世界的抽象形式、模型、理論、語言、想法、信念、觀點、感覺等，是一種符號表示、簡化和概括。\n\n具體來說，以下一些我們可以視為「地圖」的例子：\n\n1.  **一份真正的地理地圖：** 這是最直觀的例子。它用線條（道路、河流）、顏色（地形、水域）、符號（城市、山峰）來**表示**真實的地理空間。它**簡化**了真實世界的複雜性（例如，一條彎彎曲曲的小路可能被畫成一條直線），並**概括**了重要的信息。這是一張用來導航物理現實的「地圖」。\n\n2.  **科學理論（例如：牛頓的萬有引力定律）：** 這是一個**模型或理論**，用數學公式 $\\small F = G \\frac{m_1 m_2}{r^2}$ 和概念來**描述**物體在引力作用下的行為。它**抽象**並**簡化**了現實世界中複雜的引力現象，用符號和數學語言來**表示**這種關係。這是我們理解宇宙物理規律的一張「地圖」。\n\n3.  **語言本身：** 無論是中文、英文還是任何語言，都是一套巨大的**符號系統**，用來**表示**現實世界的概念、事物、行為、情感等。我們用「樹」這個詞來**代表**真實世界中的那種植物；用「愛」來**表示**一種複雜的情感狀態。語言是對現實世界的**抽象**和**簡化**，是我們溝通和理解彼此及世界的基礎「地圖」。\n\n4.  **個人的信仰或世界觀：** 例如，「勤勞就能致富」或者「人性本善」。這些是個人的**信念或觀點**，是基於個人經驗、文化背景等形成的，用來**解釋**和**預測**現實世界的運作方式。它們是對複雜社會現實的**概括**和**簡化**，並影響著個人如何感知和應對現實。這是你腦中用來導航社會和人際關係的「地圖」。\n\n5.  **一個財務報表或模型：** 它用數字、表格和會計原則這些**符號和模型**，來**表示**一家公司在特定時間點的財務狀況和經營成果。它**簡化**了公司日常運營的無數複雜交易，並**概括**出關鍵的財務指標。這是理解公司經濟現實的一張「地圖」。\n\n6.  **一張圖表（例如：氣溫變化趨勢圖）：** 它用座標軸和線條等**符號**，來**表示**特定地區在一段時間內氣溫變化的**趨勢**。它**簡化**了每個時刻的具體氣溫數值，而是**概括**出整體變動的模式。這是理解數據趨勢的一張「地圖」。\n\n7.  **你對某個朋友的印象或感覺：** 這是一種**感覺或觀點**，基於你與朋友互動的經驗，形成了對他/她的性格、行為模式的**抽象**和**概括**。你可能會認為「他是一個可靠的人」，這是你對這個朋友這個「現實」的「地圖」，並指導你如何與他互動。\n\n這些例子都體現了「地圖」作為一種抽象的、符號化的、簡化和概括現實的方式。我們無時無刻不在使用各種各樣的「地圖」來認識、理解和應對周圍的世界。關鍵在於認識到「地圖」終究不是「疆域」（現實本身），它只是現實的一種表示。","x":-924,"y":660,"width":515,"height":387},
		{"id":"ed26aa48b8fef2dd","type":"file","file":"Atlas/Cards/Canvas/从第一个错误看起.md","x":2695,"y":-705,"width":430,"height":505},
		{"id":"e2e79cdfa19b8870","type":"text","text":"**總結：**\n\n*   **贝叶斯定理** 是一種關於如何**更新信念**以應對不確定性的方法。\n*   **安全边际** 是一種關於如何構建**緩衝區**以抵禦不確定性和風險的策略。","x":1440,"y":-520,"width":591,"height":180},
		{"id":"dbf0db54b1726dbc","type":"text","text":"在程式設計學習過程中，「更新信念」是進步非常關鍵的體現。這就像贝叶斯定理一樣，你基於現有的知識有一個初步的「先驗信念」，然後通過各種「反饋」（新的證據），來修正和更新你的「後驗信念」，使其更接近真實的理解和能力。\n\n以下是一些在程式設計學習中，通過反饋來更新信念，並預示著進步的典型情況：\n\n1.  **從「錯誤訊息很可怕/沒用」更新為「錯誤訊息是我的嚮導」：**\n    *   **初始信念：** 看到編譯錯誤或運行時錯誤就感到沮喪、不知所措，覺得是程式壞了或者自己不適合寫程式。\n    *   **反饋：** 開始嘗試閱讀錯誤訊息，查找其中的關鍵詞（如 `SyntaxError`, `TypeError`, `NameError`, `IndexError`, `NullPointerException` 等），並理解它們指向的具體問題（是語法寫錯了？是類型不匹配？是變量名不存在？是列表索引越界？是空對象引用？）。\n    *   **更新後的信念：** 錯誤訊息不再是學習的阻礙，而是指引我定位問題的精確工具。我知道根據不同的錯誤類型，應該去檢查程式碼的哪些部分。\n    *   **進步體現：** 調試效率大大提高，解決問題的能力顯著增強。\n\n2.  **從「我的程式碼寫完了就行」更新為「我的程式碼還需要測試」：**\n    *   **初始信念：** 只要程式碼能跑出一個結果，就認為任務完成了。\n    *   **反饋：** 發現自己的程式碼在某些特定輸入下會崩潰、產生錯誤的結果，或者沒有考慮到所有的邊界情況。\n    *   **更新後的信念：** 寫出能運行的程式碼只是第一步，必須通過設計不同的測試用例（包括正常情況、邊界情況、異常情況）來驗證程式碼的健壯性和正確性。\n    *   **進步體現：** 養成了寫測試、驗證程式碼習慣，開發出的程式碼質量更高、更穩定。\n\n3.  **從「我只能用一種方法解決問題」更新為「解決問題有多種方法，且有些方法更好」：**\n    *   **初始信念：** 只會用最直接、最暴力的方式解決問題（例如：用大量 `if/else` 或嵌套迴圈）。\n    *   **反饋：** 學習到新的數據結構（如哈希表、集合）、算法（如遞歸、動態規劃）或程式設計範式（如面向對象、函數式），看到別人（在教程中、代碼審查中）使用了更簡潔、更高效、更易讀的解決方案。\n    *   **更新後的信念：** 解決方案存在「優劣」之分（效率、可讀性、可維護性等），我應該主動去尋找和學習更好的實現方式，擴展我的「工具箱」。\n    *   **進步體現：** 編寫的程式碼變得更優雅、更高效、更符合行業最佳實踐。\n\n4.  **從「程式設計就是敲鍵盤寫語法」更新為「程式設計是理解和解決問題」：**\n    *   **初始信念：** 學習程式設計就是記憶語法規則和 API。\n    *   **反饋：** 嘗試解決一個需要綜合運用多個概念、或需要先進行邏輯分析和拆解（如 [[../../../0.DailyNotes/问题解决-复杂问题-分解之道]] 中提到的）才能解決的複雜問題，發現僅僅知道語法是遠遠不夠的。成功將一個複雜問題分解並逐步解決後獲得成就感。\n    *   **更新後的信念：** 程式設計的本質是理解需求、分析問題、設計解決方案，然後才用程式碼這種「語言」去實現它。結構化思維和問題解決能力比單純的語法記憶更重要。\n    *   **進步體現：** 能夠獨立思考和解決更複雜、更抽象的問題，從「程式碼碼農」向「解決方案設計者」轉變。\n\n5.  **從「我必須自己搞懂一切」更新為「尋求幫助和協作是有效學習的一部分」：**\n    *   **初始信念：** 遇到難題時，認為必須一個人鑽研到底，請教別人顯得自己無能。\n    *   **反饋：** 在一個問題上卡了很久，嘗試向他人（老師、同學、線上社區）請教後，得到了點撥，迅速解決了問題，或者從別人的解釋中獲得了新的視角。參與代碼審查，發現別人對我的程式碼提出了有價值的改進意見。\n    *   **更新後的信念：** 學習是社群性的，與他人交流、提問、討論可以高效地解決問題，開闊思路，並從別人的經驗中學習。接受批評（如代碼審查）是提升自己代碼質量的寶貴機會。\n    *   **進步體現：** 學習效率提高，解決問題的途徑增加，融入開發社群。\n\n這些「信念更新」的過程，正是學習者不斷根據反饋調整自己的認知「地圖」，使其更準確地反映「程式設計」這個「疆域」的過程。每一次成功的更新，都代表著對程式設計理解的深化和解決問題能力的提升。","x":2220,"y":-682,"width":681,"height":505},
		{"id":"5c1f79ba7cc2d6d9","type":"text","text":"好的，將「地圖」概念（用抽象、符號表示、簡化和概括現實）應用到計算機數據結構中，我們可以這樣理解：\n\n計算機數據結構就是用特定的組織方式（數據結構這種「地圖」）來**符號化地表示**現實世界中的事物、它們之間的關係或某種邏輯結構（「疆域」）。每種數據結構都有其擅長表示的現實世界模式。\n\n以下是一些常見的數據結構及其在現實世界中的符號化應用：\n\n1.  **數組 (Array) / 列表 (List)**\n    *   **符號化表示：** 有序的集合、序列。\n    *   **現實運用：**\n        *   **購物車清單：** 將你加入購物車的商品按順序或添加時間排列。數組或列表的每個元素代表一個商品，它們在列表中的位置符號化了它們的順序。\n        *   **學生花名冊：** 按學號或姓氏字母順序排列的學生列表。列表中的每個位置符號化了學生在特定順序中的位置。\n        *   **一篇文章的段落或句子：** 文本內容本身就是一個有序的字符序列，可以被視為字符數組或字符串。段落和句子也是有序的集合。\n\n2.  **結構體 (Struct) / 對象 (Object)**\n    *   **符號化表示：** 一個具有多個屬性（特徵）的現實世界實體。\n    *   **現實運用：**\n        *   **一個「用戶」記錄：** 用一個結構體或對象來表示一個現實中的用戶，其中包含姓名（字符串）、年齡（整數）、地址（字符串）、用戶ID（唯一標識符）等屬性。這些屬性符號化了這個用戶的各種信息。\n        *   **一件「商品」信息：** 用一個對象來表示電商網站上的商品，包含名稱、價格、描述、庫存量、圖片URL等屬性。\n\n3.  **樹 (Tree)**\n    *   **符號化表示：** 層級結構、父子關係。\n    *   **現實運用：**\n        *   **文件系統：** 電腦硬碟上的文件夾（目錄）和文件組織結構。根目錄是樹根，子目錄是子節點，文件是葉子節點。這種樹形結構符號化了文件之間的包含關係。\n        *   **組織架構圖：** 公司或組織的上下級關係。總裁是根，各部門經理是子節點，員工是更下層的節點。\n        *   **網站導航菜單：** 主分類包含子分類，形成一個層級結構。\n\n4.  **圖 (Graph)**\n    *   **符號化表示：** 任意多個實體之間存在複雜的、非層級的「連接」或「關係」。\n    *   **現實運用：**\n        *   **社交網絡：** 每個人是一個節點（頂點），兩個人之間的「朋友」關係是一條邊。圖結構符號化了人與人之間的社交連接網絡。\n        *   **地圖和導航系統：** 城市或交叉路口是節點，道路是邊。邊可能帶有權重（距離、通行時間）。圖結構符號化了地理空間中的連通性和路徑。\n        *   **網頁之間的連結：** 每個網頁是一個節點，頁面之間的超連結是一條有向邊。圖結構符號化了萬維網的結構。\n        *   **任務依賴關係：** 項目中的每個任務是一個節點，如果任務 B 必須在任務 A 完成後才能開始，則從 A 到 B 有一條有向邊。圖結構符號化了任務之間的先後順序或依賴關係。\n\n5.  **哈希表 (Hash Table) / 字典 (Dictionary) / 映射 (Map)**\n    *   **符號化表示：** 鍵（Key）與值（Value）之間的直接對應關係或查找。\n    *   **現實運用：**\n        *   **英漢字典：** 英文單詞（Key）直接對應其中文解釋（Value）。\n        *   **電話簿：** 姓名（Key）直接對應電話號碼（Value）。\n        *   **通過用戶名查找用戶信息：** 在後端系統中，用唯一的用戶名（Key）快速找到該用戶的所有信息（Value）。\n        *   **配置設置：** 配置項的名稱（Key）對應其設置的值（Value）。\n\n6.  **隊列 (Queue)**\n    *   **符號化表示：** 先進先出 (FIFO, First-In, First-Out) 的順序處理序列，類似於排隊。\n    *   **現實運用：**\n        *   **印表機任務隊列：** 多個文件被發送到印表機，它們會按順序排隊等待列印。\n        *   **客戶服務呼叫隊列：** 客戶打進客服電話，會按順序進入等待隊列。\n        *   **任務調度：** 作業系統中等待處理的任務，通常按照進入隊列的順序被執行。\n\n7.  **棧 (Stack)**\n    *   **符號化表示：** 後進先出 (LIFO, Last-In, First-Out) 的處理序列，類似於堆疊物品。\n    *   **現實運用：**\n        *   **瀏覽器的「後退」功能：** 你訪問的頁面會被依次壓入棧中，點擊後退時，最後訪問的頁面（棧頂）會被弹出。\n        *   **程式中的函數調用棧：** 當一個函數調用另一個函數時，當前函數的狀態會被「壓入」棧中，等待被調用的函數執行完畢後再「彈出」恢復。\n        *   **撤銷/重做 (Undo/Redo) 功能：** 你的操作被依次壓入「操作棧」，撤銷時彈出最近的操作。\n\n總之，數據結構是計算機科學中 fundamental 的「符號化工具」。我們選擇適合的數據結構，就是選擇了最能有效和準確地「映射」或「符號化」我們想要處理的現實世界信息及其關係的方式。這體現了「地圖」（數據結構）如何用來表示和操作「疆域」（現實世界的數據）。","x":-160,"y":1047,"width":677,"height":623},
		{"id":"7ce2c21a2bf4ab80","type":"text","text":"好的，根據您提供的 `@vault` 搜尋結果，這些筆記為您的 [[卢曼卡片笔记.canvas]] 看板提供了關於盧曼卡片筆記法（Zettelkasten）的**核心基礎和背景知識**，這就是所謂的「grounding」。\n\n這些筆記詳細闡述了這種方法的：\n\n1.  **核心理念與目標 (Purpose & Goal):**\n    *   [[Atlas(Entries)/Cards/卢曼卡片笔记法简介]] 提到其目標是建立一個「**第二大腦**」或「**外部思考系統**」，幫助處理和連接大量資訊。\n    *   [[Atlas(Entries)/Knowledge Management/Zettelkasten-Principles]] 也強調其是為了建立一個**知識網絡**。\n    *   [[Atlas(Entries)/Knowledge Management/Zettelkasten-How to start]] 強調其目的是建立一個「**知識的網絡**」，並通過連結產生意外的發現（serendipity）。\n    *   這提供了「為什麼」要使用這種方法的基礎。\n\n2.  **關鍵原則 (Key Principles):**\n    *   多個筆記都提到了核心原則，如 [[Atlas(Entries)/Cards/卢曼卡片笔记法简介]] 中的**原子性**（一個筆記一個想法）、**關聯性**（通過連結連接筆記）、**永久性**和**獨立性**。\n    *   [[Atlas(Entries)/Knowledge Management/Zettelkasten-Principles]] 更清晰地列出了：**原子筆記 (Atomic notes)**、**連接筆記 (Connecting notes)**、**解釋連結 (Explanation of links)**、**使用自己的話 (Using your own words)**、**添加參考文獻 (Adding references)**、**使用筆記盒 (Using a \"Slipbox\")**、**常青筆記 (Evergreen notes)**。\n    *   這些原則定義了卡片筆記法的「規則」和「結構」，是理解其運作方式的根本。\n\n3.  **實踐方法與操作 (Practical Approach & Operations):**\n    *   [[Atlas(Entries)/Cards/卢曼卡片笔记法简介]] 概括了典型操作路徑：**寫筆記、連結筆記、使用索引、寫總結筆記**。\n    *   [[Atlas(Entries)/Knowledge Management/Zettelkasten-How to start]] 提供了更具體的入門建議：**不要過度思考工具和結構，直接開始為那些「觸動」你的想法寫筆記**。它也強調了寫作風格（用自己的話、完整句子）和連結的重要性（雙向連結）。\n    *   這些內容提供了「如何做」的指南，是將理論轉化為實際行動的基礎。\n\n**總而言之，這些搜尋結果為您的 [[卢曼卡片笔记.canvas]] 看板提供了堅實的「grounding」：**\n\n*   看板上的不同概念或區域（如果您在 Canvas 上組織了不同的 Zettelkasten 相關元素）的意義來源於這些筆記中闡述的原則。\n*   這些筆記解釋了為什麼要把筆記做得「原子化」，為什麼「連結」如此重要，以及這樣做的最終目標是什麼。\n*   它們提供了操作上的指導，幫助您理解如何在實踐中應用這些原則。\n\n它們就像是這張 Canvas「地圖」背後的「地理學」和「導航手冊」，解釋了地圖上的符號代表什麼，為什麼地圖是這樣繪製的，以及如何使用這張地圖來達到您的目標（構建第二大腦/知識網絡）。","x":169,"y":370,"width":831,"height":440},
		{"id":"2cbe088477122b7f","type":"text","text":"**1. 贝叶斯定理 (Bayes' Theorem)**\n\n*   **核心思想：** 贝叶斯定理是概率論中的一個重要定理，它描述了在已知一些條件下，某事件的概率。更重要的是，它提供了一種方法來根據新的證據或信息，**更新**我們對某個假設或事件概率的**信念**。\n*   **簡單來說：**\n    *   你有一個對某件事發生的「事先」或「初始」概率（先驗概率）。\n    *   你獲得了一些新的數據或證據。\n    *   贝叶斯定理告訴你如何利用這些新證據，來計算出更新後的、更精確的「事後」或「修訂後」的概率（後驗概率）。\n*   **在思考中的應用：** 它代表了一種**基於證據不斷學習和修正判斷**的思維方式。你先有一個初步的判斷或估計，當有新的信息進來時，你不是完全推翻原來的判斷，而是根據新信息調整原來的判斷，使其更接近真實情況。這對於在不確定環境下做決策或理解複雜現象非常有價值。\n\n","x":1000,"y":-123,"width":521,"height":406},
		{"id":"a7e5d436d0fd5473","type":"text","text":"\n**2. 安全边际 (Margin of Safety)**\n\n*   **核心思想：** 安全边际是一個源自工程學和投資領域的概念，指的是在設計或評估某物時，留出一個額外的「緩衝區」或「餘裕」，以抵禦潛在的錯誤、不利因素、不可預見的風險或不確定性。\n*   **簡單來說：**\n    *   如果一個橋樑理論上能承受 100 噸的重量，出於安全考慮，實際設計時會讓它能承受 150 噸或更多。這個多出的 50 噸或更多就是安全边际。\n    *   在投資中，如果你認為一家公司價值 100 元/股，但你在市場價只有 60 元/股時買入，那麼 40 元（或 40%）就是你的安全边际，用來保護你免受估值錯誤或市場波動的影響。\n*   **在思考或行動中的應用：** 它代表了一種**保守、謹慎、為不確定性做準備**的態度。在計劃任何事情（無論是學習、項目管理、做決策）時，不把所有資源、時間、精力都規劃得剛剛好，而是預留一部分額外空間，以應對可能出現的問題、延誤或意外。這有助於提高系統的穩健性、韌性，並減少因小失誤導致的災難性後果。\n\n\n","x":1720,"y":-123,"width":500,"height":406},
		{"id":"c472f6808db35b57","type":"text","text":"1.  **永久性 (Permanence):**\n    *   **含義：** 指的是你寫下的卡片筆記應該是**長期有效且具有持久價值**的。這意味著筆記的內容不應該是臨時的、只與某個特定時間或任務緊密綁定的。它們應該是用**自己的語言**寫成的、經過消化和思考的概念或論點，能夠獨立存在於你的知識庫中，並在未來很長一段時間內都能為你提供價值，無論是你自己回顧還是與其他新筆記連接。\n    *   **重要性：** Zettelkasten 的目標是建立一個能持續增長的「第二大腦」。如果筆記是臨時性的，這個系統就會變得雜亂無章，充滿過時或無用的資訊，無法累積真正的知識財富。永久性原則鼓勵你對寫下的內容負責，確保它們值得被長期保存和連結。","x":1140,"y":680,"width":536,"height":325},
		{"id":"d0d7349bc9c86063","type":"text","text":"2.  **獨立性 (Independence):**\n    *   **含義：** 指的是每張卡片筆記（尤其是原子筆記）應該**能夠獨立地被理解**。\n    * 這通常要求筆記內容是完整的句子，表達一個清晰的、內聚的想法。\n    *   **重要性：** 獨立性是實現卡片筆記法靈活連結和意外發現的關鍵。\n    * 獨立性使得筆記可以脫離其原始上下文，在新的組合中產生新的洞見。它也加強了「原子性」，確保每個原子筆記本身就是一個可理解的知識單元。","x":1136,"y":1040,"width":540,"height":380},
		{"id":"da44af55ed82e9b5","type":"text","text":"**反例 (不符合原則)：**\n\n1. **關於「贝叶斯定理」的筆記：**\n    - **內容：** \"贝叶斯。先驗概率。後驗。新證據。更新信念。\"\n    - **不符合原因：**\n        - **非完整句子：** 全部是詞語或短語的列表，沒有構成完整的句子。\n        - **想法不夠內聚/需外部解釋：** 雖然都是相關概念，但它們之間的邏輯關係（如何從先驗到後驗，新證據扮演什麼角色）沒有在這張筆記中清晰地表達出來，需要讀者自己在大腦中或通過查找其他資料來「連接」這些詞語。\n        - **無法獨立理解：** 如果你對贝叶斯定理不熟悉，單看這些詞完全不知道它在說什麼。\n2. **關於「安全边际」的筆記：**\n    \n    - **內容：** \"重要的。抵禦風險。參見工程學筆記 [工程學中的安全係數](app://obsidian.md/%E5%B7%A5%E7%A8%8B%E5%AD%B8%E4%B8%AD%E7%9A%84%E5%AE%89%E5%85%A8%E4%BF%82%E6%95%B8)。投資也用。\"\n    - **不符合原因：**\n        - **非完整句子：** 包含短語和非結構化的引用。\n        - **想法不夠內聚/需外部解釋：** 提到了重要性、風險、工程學、投資，但沒有清晰地解釋「安全边际」是**什麼**以及**為什麼**重要，或者它在工程學和投資中的具體體現。\n        - **無法獨立理解：** 內容非常依賴於讀者已經知道「安全边际」是什麼，以及需要去查看 [工程學中的安全係數](app://obsidian.md/%E5%B7%A5%E7%A8%8B%E5%AD%B8%E4%B8%AD%E7%9A%84%E5%AE%89%E5%85%A8%E4%BF%82%E6%95%B8) 這張筆記才能獲得更完整的資訊。\n3. **關於「問題分解」的筆記：**\n    \n    - **內容：** \"分解複雜問題的步驟。首先，確定範圍。然後，分層。接著，接口。最後，動態調整。就像微服務。[複雜性-系統整合風險](app://obsidian.md/%E8%A4%87%E9%9B%9C%E6%80%A7-%E7%B3%BB%E7%B5%B1%E6%95%B4%E5%90%88%E9%A2%A8%E9%9A%AA)\"\n    - **不符合原因：**\n        - **非完整句子：** 主要是一系列步驟的短語列表。\n        - **想法不夠內聚/需外部解釋：** 雖然列出了步驟，但沒有解釋**為什麼**要這樣分，每個步驟的意義是什麼，以及它們之間的關係。提到微服務和另一張筆記作為類比或相關點，但筆記本身並沒有包含足夠的資訊來獨立解釋核心過程。\n        - **無法獨立理解：** 除非你已經非常熟悉問題分解的方法或閱讀了其他相關筆記，否則這些步驟本身並不能讓你完全理解分解的過程或精髓。\n\n遵循「完整句子，清晰內聚，獨立理解」的原則，是確保你的卡片筆記系統能夠真正發揮其累積和連接知識效用的重要基石。","x":1500,"y":1457,"width":528,"height":340,"color":"1"}
	],
	"edges":[
		{"id":"85358ad95c53acf1","fromNode":"88ad6f13aed7b485","fromSide":"bottom","toNode":"74e520444194276b","toSide":"top"},
		{"id":"313cdc2c97bef0dd","fromNode":"2cbe088477122b7f","fromSide":"top","toNode":"e2e79cdfa19b8870","toSide":"bottom"},
		{"id":"74d98edb3a114251","fromNode":"a7e5d436d0fd5473","fromSide":"top","toNode":"e2e79cdfa19b8870","toSide":"bottom"},
		{"id":"c08c5e1d6f692182","fromNode":"74e520444194276b","fromSide":"bottom","toNode":"a5b5b157b94aa3d3","toSide":"top"},
		{"id":"a44101ddd1a60b55","fromNode":"a5b5b157b94aa3d3","fromSide":"right","toNode":"5c1f79ba7cc2d6d9","toSide":"left"},
		{"id":"c5890154d0bd8c59","fromNode":"e2e79cdfa19b8870","fromSide":"right","toNode":"dbf0db54b1726dbc","toSide":"left"},
		{"id":"355d008af3888a84","fromNode":"dbf0db54b1726dbc","fromSide":"right","toNode":"ed26aa48b8fef2dd","toSide":"left"},
		{"id":"8ef8f0f8cf47f513","fromNode":"7ce2c21a2bf4ab80","fromSide":"top","toNode":"e2e79cdfa19b8870","toSide":"left"},
		{"id":"4f983c59cd99962f","fromNode":"7ce2c21a2bf4ab80","fromSide":"top","toNode":"fcb429143362fb22","toSide":"right"},
		{"id":"7ac983100abd07a9","fromNode":"7ce2c21a2bf4ab80","fromSide":"left","toNode":"88ad6f13aed7b485","toSide":"right"},
		{"id":"2bd9b7ffcf063123","fromNode":"5c1f79ba7cc2d6d9","fromSide":"top","toNode":"7ce2c21a2bf4ab80","toSide":"bottom"},
		{"id":"dd006eb1be60050d","fromNode":"7ce2c21a2bf4ab80","fromSide":"right","toNode":"c472f6808db35b57","toSide":"left"},
		{"id":"793613b00b3015f9","fromNode":"7ce2c21a2bf4ab80","fromSide":"right","toNode":"d0d7349bc9c86063","toSide":"left"},
		{"id":"23b47d83bf4a3e2f","fromNode":"7ce2c21a2bf4ab80","fromSide":"bottom","toNode":"80048a76d87a33f7","toSide":"top","label":"正例"},
		{"id":"47aa317f859cc91f","fromNode":"80048a76d87a33f7","fromSide":"right","toNode":"da44af55ed82e9b5","toSide":"left","label":"反例"}
	]
}