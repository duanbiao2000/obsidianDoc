{
	"nodes":[
		{"id":"5ee475178d08d708","type":"text","text":"什么是重构？为什么要进行重构？\n重构是指在不改变软件可观测行为的前提下，对软件代码进行修改，以改进其内部结构。进行重构的主要目的是改进软件设计，使其更易于理解和修改；帮助发现潜在的 bug；提高编程速度，因为良好的内部设计能更容易地添加新功能和修复 bug。重构就像是给代码做定期的“保洁”和“整理”，保持代码库的健康。\n\n何时应该进行重构？有哪些时机？\n重构应该融入到日常的编程工作中，而不是作为一项独立的任务。常见的重构时机包括：\n\n三次法则：第一次做某事只管去做，第二次类似时可以做，第三次再做类似的事就应该重构。\n预备性重构：在添加新功能之前，先对现有代码进行重构，使其更容易接纳新功能。\n帮助理解的重构：为了更好地理解代码，对代码进行小的调整，例如改名、拆分函数等。\n捡垃圾式重构：在理解代码的过程中，发现可以改进的地方，顺手进行重构。\n代码复审时重构：在代码复审过程中发现的可以改进的地方。\n长期重构：对于大型的、需要数周才能完成的重构，可以采取逐步推进的策略，每次只做一小部分，并确保每次修改后系统仍然可以正常工作。\n代码中出现哪些“坏味道”时，可能需要进行重构？\n代码中的“坏味道”是一些迹象，表明代码的结构可能存在问题，需要进行重构。常见的坏味道包括：\n\n神秘命名（Mysterious Name）：函数、变量、类等的命名不清晰，难以理解其功能和用途。\n重复代码（Duplicated Code）：在不同的地方看到相同的代码结构。\n过长函数（Long Function）：函数代码行数过多，难以理解和维护。\n过长参数列表（Long Parameter List）：函数需要的参数过多。\n全局数据（Global Data）：代码库的任何地方都可以修改的全局变量。\n可变数据（Mutable Data）：数据在程序的不同地方被修改，导致意想不到的结果和难以发现的 bug。\n发散式变化（Divergent Change）：一个模块因为不同的原因在不同的方向上发生变化。\n霰弹式修改（Shotgun Surgery）：每次修改都需要在许多不同的类中进行少量修改。\n依恋情结（Feature Envy）：一个函数与另一个模块中的函数或数据交流过于频繁。\n数据泥团（Data Clumps）：总是成组出现的数据项，应该考虑将它们封装成一个对象。\n基本类型偏执（Primitive Obsession）：过度使用基本类型，而不创建对问题域有意义的小对象。\n重复的 switch （Repeated Switches）：在不同的地方看到基于相同条件进行选择的 switch 语句。\n循环语句（Loops）：复杂的循环逻辑可能隐藏了可以被提取出来的行为。\n冗赘的元素（Lazy Element）：一个类的功能过于简单，不值得存在。\n夸夸其谈通用性（Speculative Generality）：为了应对未来的需求而添加了目前并不需要的代码。\n临时字段（Temporary Field）：一个对象的某些字段只在特定的情况下使用。\n过长的消息链（Message Chains）：为了获取一个对象，需要经过一连串的取值函数调用。\n中间人（Middle Man）：一个类的大部分功能都委托给其他的类。\n内幕交易（Insider Trading）：模块之间过度共享内部数据和实现细节。\n过大的类（Large Class）：一个类承担了太多的责任。\n异曲同工的类（Alternative Classes with Different Interfaces）：功能相似但接口不同的类。\n纯数据类（Data Class）：只包含字段和简单访问函数的类，没有重要的行为。\n被拒绝的遗赠（Refused Bequest）：子类只需要超类的一部分特性。\n注释（Comments）：过多的注释可能意味着代码不够清晰，需要通过重构来使其更易懂。\n如何安全地进行重构？自测试代码的重要性是什么？\n安全地进行重构的关键在于小步修改，并且在每次修改之后都进行测试，确保软件的可观测行为没有发生改变。自测试代码是指拥有一套全面的自动化测试套件的代码。这套测试应该能够快速运行，并且能够检测出重构过程中引入的任何错误。自测试代码的重要性体现在：\n\n降低重构风险：通过频繁运行测试，可以及时发现和修复重构引入的 bug，避免将有问题的代码发布到生产环境。\n增强信心：有了可靠的测试，开发者可以更放心地对代码进行修改，而不必担心会破坏现有功能。\n提高效率：自动化测试可以节省手动测试的时间，并且能够更全面地覆盖各种场景。\n文档作用：测试用例本身也可以作为代码行为的一种文档，帮助理解代码的功能。\n重构与性能优化有什么区别？应该如何看待重构对性能的影响？\n重构和性能优化都是修改代码的行为，但它们有着不同的目的。重构的目的是改进代码的内部结构，使其更易于理解和修改，可能会导致性能上的微小变化（可能变快也可能变慢）。性能优化的目的是提高程序的运行速度和资源利用率，优化后的代码可能会牺牲一些可读性和可维护性。\n\n对于重构过程中的性能问题，一般的建议是：大多数情况下可以忽略它，先完成重构，再进行性能优化。因为结构良好的代码通常更容易进行性能调优。如果在重构过程中引入了明显的性能损耗，可以在重构完成后再进行性能分析和优化。有时，重构甚至可以为更高效的性能优化方案铺平道路。\n\n敏捷开发、持续集成与重构之间有什么关系？\n重构最初是作为极限编程（XP）的一部分被采用的，而极限编程是早期的敏捷软件开发方法之一。敏捷开发强调迭代、协作和对变化的快速响应，而重构正是实现这一目标的重要技术手段。\n\n持续集成（Continuous Integration, CI） 是一种开发实践，要求团队成员频繁地将代码变更合并到共享仓库中，并进行自动化的构建和测试。持续集成与重构紧密相关：\n\n促进频繁重构：CI 使得小步重构能够快速地被集成和验证，降低了重构的风险。\n尽早发现冲突：如果一次重构影响了其他人的工作，CI 能够尽早地发现这些冲突。\n依赖自测试代码：CI 的有效性很大程度上依赖于自测试代码，因为每次集成都需要运行自动化测试来确保代码的正确性。\n总而言之，重构是敏捷开发和持续集成的重要组成部分，它们相互依赖，共同促进高质量、可维护软件的快速交付。\n\n大型遗留系统缺乏测试时，应该如何进行重构？\n对于庞大且缺乏测试的遗留系统进行重构是一项挑战。一个显而易见的步骤是先为遗留代码添加测试，但这通常很困难，因为缺乏测试的代码往往设计上也难以测试。针对这种情况，一些策略包括：\n\n寻找程序的接缝：在系统的关键交互点（例如 API 调用、模块边界）插入测试，逐步扩大测试覆盖范围。\n使用安全重构手法：只使用那些经过验证是安全的、不太可能引入 bug 的自动化重构手法。\n《修改代码的艺术》：参考相关书籍，学习针对遗留代码的测试和重构技巧。\n“先修改，再测试”的风险：在没有足够测试的情况下进行重构是存在风险的，但为了改善代码质量和可维护性，有时需要承担这种风险。\n总的来说，针对缺乏测试的遗留系统进行重构需要耐心和谨慎，逐步建立测试基础是关键。\n\n书中介绍的重构手法是如何组织的？如何有效地使用这份重构名录？\n书中介绍的每个重构手法都遵循一种标准的格式，包括以下五个部分：\n\n名称（Name）：重构手法的清晰名称，也是在书中其他地方使用的名称。\n速写（Sketch）：一个简短的代码示例，展示重构前后的变化，帮助快速回忆。\n动机（Motivation）：解释为什么需要进行这个重构，以及什么情况下不应该使用它。\n做法（Mechanics）：简明扼要地介绍进行重构的步骤。强调小步前进和每次修改后进行测试。\n范例（Examples）：通过一个简单的例子说明重构手法如何运作。\n为了有效地使用这份重构名录：\n\n理解动机：在应用任何重构手法之前，先理解其背后的动机，判断是否适用于当前的情况。\n遵循做法：按照“做法”中的步骤进行操作，特别是要记住小步前进和频繁测试。\n参考范例：如果对某个重构手法不熟悉，仔细阅读“范例”部分，理解其具体应用。\n将其作为参考：这份名录主要是一个参考工具，不需要一次性全部读完。当遇到代码中的“坏味道”或者需要改进代码结构时，再查阅相关的重构手法。\n结合实际经验：随着实践经验的积累，可以根据自己的情况调整重构的做法。","x":-380,"y":-420,"width":580,"height":740},
		{"id":"2d8c8a99974cd11e","type":"text","text":"好的，根据您提供的仓库列表和之前的分析，筛选出 10 个具有较高学习价值且难度递增的项目，整理如下：\n\n**10 个最有学习价值的项目 (由易到难)**\n\n| 项目名称 (Project Name)                    | 链接 (Link)                                                       | 简介 (Description)                                                                                                  |\n| :----------------------------------------- | :---------------------------------------------------------------- | :------------------------------------------------------------------------------------------------------------------ |\n| 1. javascript-sandbox                      | https://github.com/duanbiao2000/javascript-sandbox                | Fork: \"Modern JS From The Beginning 2.0\" 课程的沙盒项目，适合学习现代 JavaScript 基础。                                |\n| 2. react-projects                          | https://github.com/duanbiao2000/react-projects                    | Fork: 一系列 React 练习项目，适合巩固 React 基础知识。                                                               |\n| 3. hacker-stories                          | https://github.com/duanbiao2000/hacker-stories                    | Fork: 《The Road to React》书的源代码，一个经典的 React 应用实例，适合学习 React 应用结构和 API 交互。                |\n| 4. NodeJS-Course-2024-For-Beginners          | https://github.com/duanbiao2000/NodeJS-Course-2024-For-Beginners  | Fork: 2024 年 NodeJS 初学者教程代码，适合学习 Node.js 基础和后端概念。                                               |\n| 5. express-locallibrary-tutorial           | https://github.com/duanbiao2000/express-locallibrary-tutorial     | Fork: MDN NodeJS/Express 教程的本地图书馆网站示例，适合学习经典的 Node.js Web 后端开发。                            |\n| 6. mern-chat-app                           | https://github.com/duanbiao2000/mern-chat-app                     | Fork: 使用 MERN (MongoDB, Express, React, Node) + Socket.io 实现的实时聊天应用，适合学习全栈开发和 WebSocket。       |\n| 7. threads                                 | https://github.com/duanbiao2000/threads                           | Fork: 使用 Next.js 构建的 Threads 克隆项目教程代码，适合学习现代全栈框架 Next.js。                                 |\n| 8. spotify01                               | https://github.com/duanbiao2000/spotify01                         | Fork: 使用 Next.js, Supabase, Stripe 构建的全栈 Spotify 克隆，整合了数据库、认证和支付，项目较完整。                |\n| 9. React-Native-With-Projects              | https://github.com/duanbiao2000/React-Native-With-Projects       | Fork: 包含多个项目的 React Native 学习资源，适合跨平台移动应用开发学习。                                             |\n| 10. lobe-chat                              | https://github.com/duanbiao2000/lobe-chat                         | Fork: 开源的 LLM/AI 聊天框架，支持多种 AI Provider 和多模态，代表了现代 AI 应用开发方向，复杂度较高。               |\n\n---\n\n**被排除项目的主要原因:**\n\n*   **元数据/个人配置类:** 如 `duanbiao2000` (Profile README), `BlogGallery` (个人图床), `obsidianDoc` (个人笔记), `dotfiles` 相关的 Forks (个人配置)。这些主要服务于个人，通用学习价值相对较低。\n*   **资源列表/Awesome Lists:** 如 `awesome-*` 系列, `free-programming-books*`, `GitHub-*-Top-Charts`, `skill-map`, `coding-interview-university`, `cs-self-learning`, `design-resources-for-developers`, `the-craft-of-selfteaching`, `prompt-patterns`, `git-flight-rules`, `How-To-Ask-Questions-The-Smart-Way`。这些是优秀的参考资料，但并非可直接学习代码结构和逻辑的项目。\n*   **过于基础或简单的示例:** 如 `HTML`, `cool-land`, `ReactLandingPage`, `react-memory-game`, `dictionary`。对于有一定基础的学习者来说价值有限。\n*   **重复或相似度高的项目:** 如多个博客模板 (`hexo-theme-*`, `nextjs-tailwind-blog`), 多个爬虫示例 (`DouBanSpider`, `PythonSpider`, `pachong`), 多个电商/商店示例 (`-JavaWeb-----MyShop-`, `bookstore`, `Xiaomi`, `xiaomi-vue-store`), 多个 3D 示例 (`lightg3D`, `three.js`, `threejsDemo3d`)。在有限名额下，选择代表性的即可。\n*   **特定领域/技术栈 (若已有更好替代):** 如 C++ (`CPlusPlus20ForProgrammers`), Java (`OnJava8-Examples`, `JavaDesignPatten-Notes`, `vprofile-project`), Python/Flask/Django (`Flask-Web-App-Tutorial`, `django-example`), 数据科学/NLP (`data-wrangling`, `ThinkStats2`, `nltk3-cookbook`, `jieba`), Kotlin (`kotlinmicroservice`), MAUI (`SwashbucklerDiary`), Go (`wukong`)。虽然这些技术有价值，但相比于列表中 React/Next.js/Node.js/AI 的项目数量，为了保持多样性和主流性，部分被排除。\n*   **工具/库/框架本身的 Fork:** 如 `TypeScript`, `create-t3-app`, `jieba`, `react-motion`, `wiki` (Wiki.js)。学习其用法通常看文档或示例项目更好，直接学习库源码难度较大或必要性不高。\n*   **用途不明或较旧的项目:** 如 `iKtalk`, `reddit` (历史代码), `youtube-clone` (旧)。\n*   **实用工具类 Forks:** 如 `AlfredWorkflow.com`, `anki-templates`, `baicizhan-helper`, `clean-start`, `GetSubtitles`, `github-readme-stats`, `TopFreeProxies`, `van-nav-extension`, `Windrecorder`。虽然实用，但作为系统性学习的项目价值可能不如全栈应用或框架教程。\n*   **AI/ML 领域的细分项目:** 保留了几个有代表性的 AI 项目，排除了部分特定应用或研究性较强的项目（如 `CodeFormer`）。","x":220,"y":-420,"width":640,"height":1200},
		{"id":"3600ce551c06c7b1","type":"file","file":"5.Misc/Attachments/Pasted image 20250406012906.png","x":180,"y":763,"width":700,"height":719},
		{"id":"89bc3c339d477521","type":"text","text":"","x":-1000,"y":391,"width":1095,"height":1049}
	],
	"edges":[]
}