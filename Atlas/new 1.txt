(39) Build and Deploy an AI Art Generator App with Next.js, Node.js, Express, MongoDB, and OpenAI - YouTube
https://www.youtube.com/watch?v=JAdBKMMcsNA

Transcript:
(00:00) everyone welcome back to yet another project video in this project you're going to build your own AI generator from scratch including the business logic so this is how our finished project would look like all the images which you can see we have generated with the help of AI so that's all we're going to explore one by one that how we can design such an amazing interface including the business logic how we can write the prompt that's all I'm going to show you in this particular video so the
(00:26) very first section we have in our application When anybody comes to the homepage this is what exactly they will see in the homepage we have the navigation bar we have the logo and we have different menu so user can go to different pages like generate page history like and account then we have this profile section I'm already logged into the application so you can see my email ID you can see how many credits I have because if anybody wants to create images they have to buy credit because initially we are providing three free
(00:54) credits so this much credit I have they can buy it or they can simply log out from the application which will do that so this is how our hero section would look like you can see the logo you can display the model which you are using and here we have the search bar where user can simply type and search all the images generated by different user so all the images which you can see that's all generated by different user you can simply click here and you can able to have the details you can simply copy the prompt you can copy the URL of the image
(01:21) you can open ENT and you can able to see the details that who exactly created this what model we have used because in this project we are using two different model V3 and V2 to so user can switch between the models you can see the ratio you can see the quality you can see the style type and you can see the Creator if you want to download you can simply click on this and you can download that if you want to delete you can simply click on this and you can delete if you want to unlike you can simply unlike and
(01:45) it will be unlike but I want to like it so here we have like this so that's how we can find the details about the image so if I want to open this one I can able to see all the details I can see this looks good I can click here I can see the huge prompt and I can explore and I can do that this is how we can explore about the images now let's come back to the search bar if I want to filter any particular image I can do that very easily for example I want to find about the flying so I'll type flying and it's
(02:14) going to Simply fil so it's going to filter it out and it's going to give me all the images which has this flying keyword in it so that's how we can use this filter now comes the interesting part you can see we have different tabs here because we have different ratio image we are allowing user to generate so we can generate in the form of real YouTube or Instagram so if you click on this YouTube you will see that these many images we have generated for YouTube because it has a different ratio if you go to the Instagram you will find
(02:41) that this is the image we have generated with the Instagram so we have different ratio and different sizes we are providing looks good and now comes to the model so if you click here you will find that currently we are activated V3 model but you can switch the model so if I come back here we have different model V2 so if you click on this it's going to reload the page and it's going to give you all the images which is created by V2 model So currently our V2 model is active and you can see this is the image
(03:07) we have created with the help of V2 model so if I click on this it's going to give you the detail so it's the old version that's why you can see the image is little distorted and you can see that because in V2 model we can generate up to five images so you can see all the images we have generated with the help of this V2 model you can see that and you can simply click to download whichever you want to download or you can simply like it and we have liked it so this is the image we have generated if you go to the
(03:34) YouTube and if you come back to the Instagram this is what we have generated here you can able to see and explore all the images we have generated with the help of V2 because in the V3 we can only generate one but in V2 we can generate up to five so that's how V2 model looks like so let's come back in and let's switch back to V3 because that's the advanced one we have and that's all the images we have generated with the help of V3 so that's how things will look like in the homepage now come back to
(04:00) the generator if I click here I can see this is where you will land and you can able to give your prompt you can give the tag you can select the model which you want to use for generating the art if you select V2 model it's going to give you couple of options so you can select number of images which you want to generate so you can select by this you can pick the ratio so we have three different ratio which we are allowing so you can go with any ratio and allow the user to generate the image which we'll
(04:27) use so let's come back to the V3 and in V3 we have little more option so it's give you the style tab that which type of styles you want to generate like Vivid or natural so you can pick that you can go with a different sizes like real Instagram post or YouTube so these three option you will have so let's generate with this help so I'll select this one click here select this viid or you can simply go here there's no problem in that but I will go with this one because this one is more futurist
(04:52) futuristic type of look you will have then I will go with this one once I have done the selection now I have to give my prompt and tag so this is the prompt which I have generated with the help of chat GTP and it's about uh future space and I have to give the tag so I'll say man space you can give as many tag as you want there is no problem in that and now you have to click on this generate and it's going to activate our AI model you can see we have a beautiful loader which generating the image at the
(05:22) background and once of the generation will complete you're going to have your image so just give some time and finally we have generated our image this is the pra which I have typed and this is what we have got as an output it looks beautiful I talked about the space man and some kind of futuristic look and that's what exactly I have got if I want to download it I can simply download it and if I want to like this image I can simply like it I can click on this like and I have likeed this one you can close
(05:51) this one so reload the page now you can come back here and here you will find all the images which you have generated so this is the YouTube images that's all you will find if you click on the real there you will find all the images which you have generated for real so if you go all the way down this is the one which I have generated if you can click here and going to have the details about the images so that's beautiful tab system we have built here if you come back here on the top we have the Instagram you can
(06:16) click here and you can see the image we have generated with the help of for Instagram so that's also you can explore so this is how anybody can come and generate the images looks good so we have seen the V3 model now let's look at the V2 model so we can click click here and from here we have to select the number of images we want to generate so the maximum limit is five because if you go beyond that it's going to create a problem and it will take too many request in the backend in the API so we'll select number four and I want to
(06:45) go with the ratio is this one and here I have to give the prompt so this time I give the same prompt which I have to copy and I have going to save the same tag so I'll say black man space you can type as many prompt as you can give the tag now you can simply click on this generate and this time we are using V2 model for generating our image so this process will take a little bit time just wait because it's going to generate four images for us and here you can see we got our images it's generated this beautiful
(07:18) images it's give you four Images so you can click and you can go to different images which generated by our a model and you can simply select and download it you can copy The Prompt and you can able to have more details about this or you can can simply like this particular model the image we have generated so we got it simply reload the page and you will see the image will reflect here so this is the one we have generated earlier you can simply go to the tabs this is the one we have generated just now and you can see Instagram so I'll
(07:46) come back here select here and you can able to see the images generated beautifully this looks absolutely incredible so that's how we can generate the image with the help of our AI model I hope you guys have understood the V3 model is quite futurist SS and it's absolutely amazing now what I will do is you have seen that how you can generate it now let's come back to the history and here you will find all the images which you going to generate So currently V3 model is active that's why you can
(08:12) able to see all the images we have generated with the help of V3 model so you can see this is the dog fish so all the art which you will generate that's all is going to reflect here not anybody else like in the homepage you will find all the user will generate but in the history page you will find your you can go to different tab different model and you can check or you can do the filteration as well so you can type fly and you can able to do the filteration so that's what we have here so that's how our history page
(08:42) would look like now if you come back to the like here you will find all the images which you have liked so that's all going to be reflect here so if I come back to the homepage and if I want to like any particular image so I'll go with this one so I'll simply click here like it if I click on this like it's going to like it and now if I come back back here in the like page you will see that image is will reflect here so this is the image we got it we just liked it if you want to unlike any image you can
(09:07) do that I all the images are beautiful so let's do with this one you can simply click unlike and you have unlike the image now if you relo the page you will see this data is gone so every single thing is dynamic and it's real time so that's how our like page would look like so that's what we have in the like page now if you come back to the account page here you will find all the different plant which we are selling so you can see we are selling three different plan Max Pro and starter in the max plan they
(09:34) can have up to 500 images they can generate in the Pro Plan they can generate up to 300 and the startup plan they can generate up to 50 so if anybody wants to buy credit you can see that currently I have this much credit in my account so if I want to buy like more credit I can simply click on this Buy credit it will take me to the stripe payment Gateway so here we are in our payment provider stripe and this is the image and the description I have given I hope this is the logo you guys are familiar with then I have to Simply give
(10:05) the email so I'll call it the chain coders that's the one I will select I will select the name so I'll say do hen I have to pick the credit card so we are using the test one so this is the card number which you have to type 42 42 42 and for the CBC you can give any number like make sure to be into the futures and for the CVC you have to say 1 2 3 and you have to give the card holder name so I'll say doll and from here you have to select the billing address so currently I have set this pricing for dollar you can set it for
(10:41) any currency as per your current or you can set in multiple currency as well there's no problem so I'll come back here I have to select United State because that's the currency I have selected and for the address I'll go with the dummy one select this dummy one now I can click on this pay and it's going to make the payment and once the payment will complete we're going to have more credit in our account so just wait once the payment Bill complete the credit will reflect in our account so
(11:09) the payment is processing and here the payment is completed we redirect here and we finally got our so make sure to reload and you can come back here you can see we got 500 credit earlier it was 17 now we have 2,294 credit so if you want to buy more you can come here and you can able to buy more credit so that's how our application would look like it's absolutely powerful this looks absolutely stunning so that's how we can buy credit and we can generate more image now what I will do I'll simply
(11:41) click here and I'm going to log out from the application so once I will click on the sign out it's going to log out from the application and you can see I'm redirect to the logging page but if you go to the homepage you will see the images back in the background but you can't able to have the access of any more of the service first you have to create an account if you already have your account you can simply log in so if I want to log in with the same account which I was so I have to give the email
(12:03) ID and the password so I'll say the chain D RS coders at gmail.com and and what I will do I'll simply type the wrong password and the moment I will click on this login we'll have a real time authentication wrong credential so if I want to have the access I have to give the right password so it's my test account that's why I'm showing you my credential so this is the very password which I have said now if I click on this login I will be log to the application now I have the access if I
(12:37) click on here I can see the credit I have so that's how anybody can log in if I want to log out I can simply click on log out and I'm log out with application you can go to any Pages this is the only component you will see first you have to login then you can able to have the access of any one of the feature we are providing so let's get and create an account this time so I'll click here and here you have to provide these four details name email address password and password confirm so first I have to
(13:00) provide the name I'll say doot then I have to give the email ID so doot atate gmail.com I have to give the password I'm going to set the same password and I can set the same password or what if I'm G the wrong password there's no confirmation so we are doing this realtime validation so if I click on this sign up it's going to give me this warning that the password is not matching so I have to Simply provide the exact password now if I click on the sign up we're going to have this so it
(13:28) say that username or email already exist okay so I have to change my email ID so I'll say 9292 9292 or I can click on the sign up this time I have to change this Hussein and click on the sign up and it's going to make a call and finally we have created our account so we are doing three-step validation you can see the email and the number of free credit you will get so when you will create your first account you will have this free credit so once you use your free credit after that you have to Buy credit so
(14:00) let's come back here and use this particular credit so if I come back to the history you will see that I have not generated any image for this account so that's why it's empty if you go to the like section we haven't like any picture with this account so if I come back here and if I try to like any particular one so I'll click here I like this image and this image will be reflected here in the like page so here we got it you can click and you can able to have the details or even can download the image
(14:25) so that looks fine now let's come back to the generate so if you click here you will have the the same option so I'll say boy boy playing in the fil I'll say game Game Boy and you can select the model so this time I'm going to use Daily 3 and this time I use this nature and I will use a different size so in this time I will go with this one and I can click on this generate and it's going to make the call to our Ai and it's going going to generate the image once the image will be generated you
(15:02) will see it will reflect in our application and we can able to see and download it and finally we have generated this image looks absolutely incredible you can simply download it and we can simply close that one and reload the page and you will see every single data is got updated so this is the one we have generated it looks absolutely stunning futuristic you can simply like it and it looks incredible click on it like it and we have liked it now if you come back here in the instru we haven't generated any one but if you
(15:31) want to see in your credit list you will have two left so let's close this one now let's write the prompts we'll say boys working out in the filed and we'll say the like tag is going to be boy because that's the focus keyword we have and we can come back here this time I'll go with this one and this time I'll select this the Instagram one and click on this generate and it's going to generate this beautiful image which we can utilize in our social media platform so just wait so we have generated that one you can
(16:08) see it looks absolutely beautiful you can come back here reload the page and here we got it so if you come back here in the Instagram there is no one but if you come back to the real this is the one we have generated you can simply click and you can able to like and copy if you copy this URL and you can share with your friend on Instagram or anywhere so that's what you can share how so looks good now let's see how many credits we have this time one credit is left now let's create the last one after
(16:37) that we're going to see something else so we'll say mouse flying and we'll say animal and I'll select the same one di model and this time I'll select this actually I can go with this one and click on generate and it's going to make a call to our APA and it's going to generate so just wait so here we have got our image it looks beautiful big eye you will have a wings and you can see it's flying in the air now you can simply come back here reload the page and you will see we got all that so this is the
(17:15) mouse this is the YouTube and this is the real looks good now if you come back here you will say zero credit and now you will have this particular option called Buy credit now you cannot able to generate you can give all the instruction but you cannot able to generate so you can click here it will take you to the account page you have to buy the credit so I'll buy 10 credit like 50 so I have to make the payment $10 I'll say go with this one I'll say sh and I can simply make the payment say no and the payment is processing once
(17:49) the payment will complete you will have the credit so last time we have bought 500 credit but this time you're are buying 50 credit for $10 so just wait let the transaction get complete and we will be redirect here and you can see we have successfully bought the credit reload the page now you can come back here and you can see we got FIB credit now you can simply close this one come back to the generate you will have a option to generate so every single thing is working fine you can see how we are built this entire
(18:19) powerful project and that's what exactly you're going to build in this particular project you can select and you can pick different model so we have this two model and it will automatically refresh and change the data in every single place in our application so you can pick the model but I will go with the V3 it looks incredible and this looks powerful now let me show you the responsiveness because this application is ready for everything so I can simply do the inspect element and you can see that's
(18:48) how our application is going to look on this screen size but the moment I will narrow down you will see this is how it's going to look on a mobile device so we have nice footer navigation you can simply click and you can go to the different section of our application so you can come back here and here we are in the generate section you can go to the History Section here we are in the History Section that's how it's going to look if you come back to the like section this is how our like section would look like you have a futur
(19:13) futuristic look you can click on this account and you will be in the account section from there you can pick all the details you can simply click here and you can able to see all the details looks absolutely great so close it up now we can come back here and you will see that we are in the history and we have created this particular image you can go to the different tab this is the one we have generated you can go to the different tab if I simply log out with the application you can see and try to log in so I can see this is how it's
(19:41) going to look it's 100% responsive now let me give the email ID so I'll say coders Doc and I can simply click on login and it's going to log to the application and you will see that's looks good we have this two column if you go to the third column that's how it's going to look we going to have three column so we have used the grd system in our project you can go to the different section and it's going to automatically fit based on the screen sizes got it you can simply click here and it's going to have the details about
(20:18) the images if you click here and you can simply click on the image you're going to have the details so the card section is 100% responsive based on the screen so every single thing is looks absolutely incredible I hope you guys will enjoy and you can see that what exactly we have built and what exactly you're going to build in this complete project so it's looks absolutely incredible it's 100% responsive you can simply click here and you can change the model and here the model is changed real
(20:45) time you can go to the different section and that's what you can see here so I hope you guys have understood that what exactly coming up in the project and what exactly you going to build this is one of the project which you have to include at the time of AI because because we have this AI model and we have to utilize it in our day-to-day project so that's what you're going to learn in this project that how you can build so if you want to delete I don't want to delete this one so I can do that
(21:09) very easily so I can come back to my history and I'm going to delete the other which I have generated with the V2 model so let's come back to the homepage because these are the good images I want to delete the bad ones so I'll change the model and here you can see this is the image we have generated if I come back to the YouTube this is the cad we have but this not looks that grade so I want to delete this so I can simply click on this delete and it's going to simply delete that so just click delete
(21:36) and here we have deleted the image successfully now if you come back to the YouTube you will see it's gone we have only one it's gone if you come back to the homepage you can able to see there is no image but if you come back to the history you will see it will not reflect here either it's gone so we have successfully deleted so every single thing is working absolutely fine I hope you guys have understood that what exactly we going to build I hope you guys have enjoyed the entire demo now we're going to start working on our
(22:04) project so first we have to create a folder you can create whatever you want I'll call it AI art and that's the folder we have to open in our vs code so simply click on vs code and here we have it click on this open and the folder we have created on the desktop so that's what I'm going to Simply select here so once you have the folder you will see we don't have anything in here and now we have to get the startup file and that I have provided all the assets all the files which is required to build this
(22:28) particular project so we can simply come back here to the blockchain coder and there you will find all the assets about all the project we have built on the channel so I would suggest you to build at least five projects so come back to the source code section there you will find all the project along with the startup file so simply try to build five project all of this project which you can see it's industry ready so try to build nft Marketplace Supply change Cloud funding chat application that's all the project we have here so to get
(22:53) the startup file we can simply click here go to the recent one and there you will find that this is the project which we have to get it the startup file so click on this get now here you will find the startup file so simply click here and it will take you to get up and from here you can able to clone the entire startup file repository so in that you will find that I have given all the instruction all the setup videos what are the node version you need to have in your project that's all is given here so you can simply have a look but we going
(23:16) to do that all together so make sure to clone the repository so simply click here copy that now open your vs code and let me expand this one and let me clone the repository so I'm going to simply Zoom a bit open my terminal so I'll press controll and back tick and it's going to open my terminal you can open it from here as well and you can click on node terminal and it will open a new terminal for you as well so I'm going to delete the new one now I have to Simply clone the repository so what I will do
(23:43) I'll simply say get clone and I'll paste the entire URL so this is the entire URL of our guub repository and you have to give this dot this mean that you want to clone the repository in the same folder you don't want to create a new folder inside the folder and hit enter and it's going to clone the deposited in few seconds so here it's cloning once it will get done you will have the entire folder file structure we have designed in the particular project so it's taking a little bit time because the files and
(24:09) folders are quite huge so just wait few more seconds to go and once it will be Clon successfully we'll have the entire project fold and file structure and finally the entire cloning process is completed and we have clone the entire repository now let me simply close this one and let me give you a quick work through of the entire code structure we have designed so first I'm going to delete this one I want you to delete that as well you will find we have a couple of folder and the read me file here you will find all the
(24:36) instruction which I have already given which we're going to explore together so that's all you will find here now we can so the very first folder we have is the API in that you will find the entire folder and file structure we have built for our backend system so the very first folder we have inside the API is the control where we're going to manage all the functionalities so we have the Au where we're going to do the deal with the authentication then we have the post and user control in that we going to
(24:59) write all the different functionality after that we have this middleware we have the first one is the error in which we're going to handle all the error is happening in our backend API then we have this verify token which allow us to verify the token through the token authentication so that's what we're going to Simply do it this is the middleware then we have the models so we have this two model one for the post and the other one is for the user then we have the router in that we have the auth router post router and user router after
(25:26) that we have this upload so all the file we go to to upload which I have generated in the testing process which you guys have seen you can see all of these files we have generated through our AA model so that's all you will find here so that's all we going to test it then we have this get simply ignore this one now we have to come back to the config file and here we have to get all of this important credential so you have to get your app name username password name and mongodb URL so that's all we
(25:50) have to get it from mongod I will show you that how you can create your account how you can get all of this data so just follow along with the project and here we have this index file where we going to run our server and do all the setups now we can simply come back to the package Jon file there you will find all the packages we are utilizing in our project so we have given the name here we have the script and here we have all the packages as long as you you are using the exact package no matter after how many years you are building the
(26:16) project so if you building this project after 5 million 5 years of it's published it will work absolutely fine as long as you use the exact version so make sure to use the exact version and this packages are very powerful Sharp node modon molter like jwp token when you're going to deal with authentication in the real world project we use this one we have the cookie parts all of these packages are up to date and it's industry required we use heavily in the industry when we work in any kind of project so that's what we have here so
(26:47) first we're going to work on the API and we have the next one is the app UI in that you will have the app structure so this is the pages these are the pages we going to build it this is the details one this is the generate one this is the history this is the home this is the Homeland Like Home Mobile we have the other Pages that's all you can able to find that's all we're going to build it together so this is the UI component images we have close this one now we have the connecting in that you will
(27:15) find that we have imported the API so this is the API we going to build that's what we going to import it here we have the component we have the global component we have the page component and we have the SBG icon which I have already provided to all of you guys this is already given in the start file and here we are importing all the files all the components which we are utilizing in our application close this one and close this one now we have the data in which I have given you couple of dummy data so you can simply play around
(27:42) with this that's all we have here then we have the pages so these are the pages we going to deal with here we going to do the setup of our application the context management then we have the account aperture history index like login that's all we have here then we have the public in which we have the assets this is the logo you can simply replace the image and give the exact name which I have given and here we have the blockchain Cod logo I hope you guys are already familiar because you guys got the St
(28:10) file from the same place then we have the CSS file and we have written all the CSS for this particular project so we have imported the CSS file and then we have wrden the custom CSS looks good now we can simply come back here to the upload in which we going to do the upload of our project so that's all we have here this is all the images we have generated you can see this looks absolutely fine that's all you will find here so I'll show you how you can generate the dynamic name so you can see this name
(28:36) you can generate as per your requirement we have the date you can give the time stamp you can give a custom name that's all you can Define that's also you will learn we have the upload then we have the utils in which we going to write our utility function for interacting with the backend here we have this environment variable this is the entire environment variable we are using in our front Ed part so you have to get your own AP key and that's what you have to provide here this is the folder location
(28:59) so when the image will be generated from the AI we have to store that in this particular folder so if you come back here you will find this this is the upload folder in which we are uploading that's what we have here then we have our domain name means The Branding you can call whatever you want and here you have to provide your stripe payment link which I will show you here we have the pro maximum link which we'll going to utilize it for provide the access based on the Pro Plan and start a file so don't make need to make any changes this
(29:27) is the credit we are providing in each one of these plans so in the stup file we are providing 50 Credit in the Pro Plan we are providing 300 credit and the max plan we are providing 500 credit so you can simply print around with this data so all you have to do is to get your open a key and stri payment URLs which I will show you that's what we have here so simply close this one now we can come back to the get ignore simply ignore this one now we can come back to the config EnV and here we have to provide all of these details related
(29:54) to our backend server so you don't need to make any changes here this is this should be be fine you can call whatever you want to this particular text but make sure to call in the exact fashion and it should be greater than 30 two characters because the more so the more length you will have it would be good to encrypt the data so you can call whatever you want you don't need to call exactly this you can call whatever you want it's totally up to you and here you have to provide your mongod url which we
(30:20) going to generate together so I'll show you everything so close this one now we can come back to the index file and here we going to Simply import the index means our backend server from the from this file and we're going to also do the changes as per our next J application to run the front end as well so it's going to be a combination of back end and the front end then we can come back to the packages and file this is where I have imported all the files along with the front end and the back end that's all
(30:44) you will find here so you don't need to make any changes in the packages just keep it as it is got it and here we have this front end then we have this front end so we're going to Simply build the front end and then you will find that we have the exact folder structure exact components we're going to build it so first we'll start with the API after that we're going to Simply connect and start building the front end right up here so what I will do I'll simply delete this one delete this
(31:11) one and we already have this entire front end component structure like here that's we're going to start building right up here but we have to build our API separately because I want to teach you everything that how you can build a backend API so this is the entire folder and file structure of our project I hope you guys have understood the entire folder file structure that how we have designed the architecture and what are things we're going to include in our project so before we move ahead and start providing all those environment
(31:35) variables we have to check couple of requirements so I'm using this particular node version simply Type n no de node DV and this is the one I have if I check my npm DV this is the npm version we have but we not going to use this one because it's not stable at the moment which I'm recording it's then tting phas so we're going to use a more stable version of our project so if I come back to the read me file there you will find that I have given all the details about the node version so it will work fine with the latest one and
(32:03) the old version as well but we're going to go with more stable mod we're going to go with the exact version if we find that we are facing any issue we're going to definitely change with that because I want to show you every single thing that how you can play around with the node version if you want to downgrade or upgrade your node version you can do that very easily you can simply use this NVM and type LS R O T remote and it going to give you all the list of node version I have I hope you guys know what
(32:29) is NVM NVM start for node version manager it's going to give you a list of all the node version which you can simply pick like this two is the most stable version we have at the moment and this is the new one which is in the testing phase and this is the stable one we have got it so we're going to Simply play around with this node version along with the tutorial so looks good now we can simply come back here and we can start working on the API section where we're going to take all of this environment variable perfect so let me
(32:58) quick quickly get this environment variable and show you how you can get that okay so to get the environment variable for mongod devv we have to come back to so let's open a new type and type  DB and you will come back here click on the very first link and it will take you here mongod is a really powerful platform and it's free to use to build application like this where you can simply utilize it to build a scalable application so if you haven't watched my complete course which I have on the mongod DV so you can simply come
(33:26) back here and there you will have the complete API course which I have built so this is the complete API course is we have called it nft Marketplace but it's a global API in that I have covered every single thing that how you can build a scalable application so make sure to follow this this will teach you every single thing about the API development so make sure to follow the complete API once you so once you complete this project after that I would suggest you that if you really want to take your skill to the next level in API
(33:50) development then follow this you will Master complete backend development in this using mongod DB expr and nodejs so first build the project and take the understanding after that you can switch back to this specific API course for Global approach like you can build e-commerce chat application everything you can apply this back end structure we have built now simply close this one come back to the mongod DV and this looks pretty fine make sure to create your account I already have my account so I will simply log in I'm finally
(34:15) logged into my mongodb dashboard and you will see this is how the interface is looking and if I click on this I already have a bunch of project which I have created and this is the one which I have used to show you the demo you can see this is the the all the files which I have uploaded and created that's all you will find here if I come back to the database there you will find all the files which I have created during the development that's all you will find so if you go back to the browse collection
(34:41) there you will find the files we have so just wait it's loading that and there you will find all the data about the post about the user that's all is reflecting so to create a new database all you have to do is to Simply come back here and we have to Simply come here and click on on this new or you can simply click on this view all project and it will show you all the project which you have already created to create a new project you can simply click on this new project and it will take you here you can simply give the name so
(35:09) I'll say and here you have to give the project name I'll say AI art the BL CCH chain coder got it you can call whatever you want now you have to keep the name copy that one and first thing you have to come back here and here you have to call the app name so I'll paste here let's give this this is the name I have called I'll click on the next with this now I click on this create project it's creating the project and now here we got it so it's will take a little bit time and now you have to
(35:45) click on this create a cluster and it will take you to the create page and here it's give you three options so you can go with this one this one or this one but I will go with the free one and it will give you this much storage which is enough for this application so I'll select this and you can keep it as it is you can change your location as per your but it's automatically going to detach waste on your country so you can find list of all I'll go with this Mumbai and once you're done with that you can give a specific
(36:14) tag but I will keep it as it is so click on this create deployment and it's going to create this process might takes a little bit time and here it will give you a bunch of options so you have to give a user ID which you want to use it so let me call this I'll say the chain c o d RS coders that's the user ID and password is going to be let's say the blockchain code I will use the exact one password got it you have to Simply copy that one and that's what you have to provide as a username and
(36:49) that's what you have to provide as a password got it once you're done with that now you have to click on this create database user and it's going to create it and here you will find that your API is connected with this one here you have to click on this choose connection method and here it will give you a bunch of option and here you have to select this driver click on this and here you will have the entire string of your project so simply copy this URL and that's what you have to paste here paste here got it now let me remove
(37:25) this one because this is going to be the name of our project and now you have got the entire environment variables of your database now once you're done with that now simply click on this done here we have created the database you can simply close all of this and now we have to Simply set the network configuration so we can come back here click on this network access and you have to change your IP address because currently the this particular application is only click on this now you can able to access this
(37:54) particular back end from any IP address so make sure to change that it will take a little bit time just wait and here we have activated now we can able to access the backend API from any network any internet connection so once you're done with that now you can simply close this one close this one and come back to the code so we got all the environment variable for our backhand API now we are ready to start building our API so simply close this one and now come back to the controller and first we'll start
(38:21) with not controller we'll start with the models so we have two model post and user so we're going to start with post user after that we're going to start working on the controller after that we going to start working on the middleware then we're going to start working on the router after that we're going to start building our API connection and we going to test all of that absolutely looks perfect got it so that's the only thing I want to cover in this video because this video is already getting very long and in the
(38:46) next video we'll start completing our entire backend API after that we're going to connect and we're going to Simply test so it's going to have close to three to four videos and that we going to Simply complete the entire project so let's move to the next video everyone welcome back to the second part of our AI art generator in the first part we have done all the setups and understand the architecture of the project that how we going to design and work on our project in this video we going to start working on our backhand
(39:11) API so I'm going to do a little bit changes in the architecture which I have already discussed in the last video so instead of working separately in the API we're going to start working in the complete project so this is what we have simply copy this entire this is what we have generated in the last video from mongodb so make sure to watch the first video copy that one and that's what I'm going to Simply import here because in this connecting file we are including the API the backend part the front end
(39:36) part and that's all is coming together so that's what we're going to start working straight away in the connecting file so first thing we're going to Simply paste our environment variable so let's paste the environment variable here we got it make sure to do that exactly and that should be fine now I'm going to Simply open this folder in vs code once again so let's do one thing let's close the now come back here vs code and now go to open go desktop and this is the folder we have created in the first video so
(40:06) let's open that one and here we have the three folder so I'm going to Simply open this one make sure to do that open it so we're going to write the complete code in this one from start to end so let's close this one let's make on the big screen and you can see this is what we have discussed extensively in the last video so this is all the environment varibles for our back end looks good let's format this one close this one and open up your terminal and we have to install the packages so we can come back
(40:33) here and if you come back to the packages and file here I have imported all the front end and the back end all the important Library which we need to build this application so simply type npmi or install both will work fine but before we install the package we have to check the node version so I'm using this particular node version like 22.
(40:53) 30 it's the lest one so make sure to use the exact one or if you have the previous version of node it will work fine but if it create any problem make should to upgrade that which I have already explained in this particular video so let's clear the terminal this is I have to install all the packages and here you can see all the packages got installed and here it's displaying full vulnerability simply ignore this you don't need to change the package version and run any one of these command simply clear your terminal because we want to use the exact version
(41:18) if you run any one of these command it's going to change the version and it's going to create a problem so we're going to go with the exact version simply clear the terminal and that's done you can see this is the node modules in that we have all the packages of our project so that looks good now we can come back to the API and we're going to start working on API first after that we're going to start working on the front end the context management and we're going to bring everything together so this is
(41:41) what we have inside that we have this modules so we have two modules post and user so let's start with the module first so first we'll start with post close this one and in that we going to import couple of things so first is going to be mongus and that's coming from our mongus package now we have to build the schema so we'll say post schema it's coming from new mongu schema and we'll take the object of the data inside that we can display the field which we want to take as a data so first is going to be the user and here
(42:17) we have to create the reference between the images which user will generate so in that way we can able to identify that which user created which image so that's the reference we have to build so we'll say type is going to be schema type types and object ID so in that way we can able to have the reference of the ID we got it we'll say ref is going to be user because we want to make the reference with the user then we'll take this required field it's going to be true so this is for user now we got it
(42:49) now we can simply come back here we can take the prompt which user will provide so it's going to be a string type is going to be string and we have to trim we don't want to have any space at all so let's trim that it's going to be true now we can come back here we can take the negative prompt and it's going to have the same thing type is going to be a string and trim is going to be true then we have to take for the size that what is the size of the image we want to generate so it's going to be a type is
(43:21) going to be a string and it will have a trim it will be true let's format this one now we can come back here then we have to take the quality so in V3 model we have multiple quality but in V2 model we don't have the quality so that's the data we going to keep track here so let's provide the quality type is going to be string and trim is going to be true then we have to take the let's say Quantity so in V2 model we can create up to 10 images but in V3 we can create only one so that's the thing we going to
(43:53) keep track here so it's going to be a number and we'll say trim is going two now we can come back here we can take a style so we have a different style so type is going to be a string and we'll have a trim is going to be true now we can come back here and we can take this am model that which model we are using simply copy this one whether it's a V3 or V2 then we have to take the a Meg and in that we're going to have the same thing so let's take this array of object because we can have up to five
(44:27) mhes this data will be available in the array so let's take that we'll take this let's say object and in that we can simply create the reference so it's going to be a type string and it will be called required is going to be false we got it now we can come back here let's change this to AI images and this will be fine because it's going to be have uh array now we can simply come back here and we can replicate this and change this to likes that how many likes a particular post is getting and here we have to build the
(45:02) relations we'll say mongodb schema do types and in that we can have the object ID and this will be called reference is going to be the user Make sure to give a capital u once we have this and here we have to get the time when this particular post was created so we can get it very easily we can say timestamp it will be true that's our entire schema for creating a single post you can see looks good prompt negative prompt size quality we had quantity style AI model AI Mega we have the images and likes and time stamp now we
(45:43) have to Simply export our models so we'll come here here we'll take a variable called post and we're going to use this model and in that we have to pass the post and we can pass our schema post schema you got it now we have to Simply export the post tool so we'll say model. export and we'll say post so that's the entire schema for our post model I hope you guys have understood it's very basic this is the UT we are doing then we are creating the packages and then we are simply providing all the field which we
(46:15) want to take it looks good copy this one entire now we can come back here and now we can simply start working on the user so click here and paste that one because it's going to have the similar structure we have to Simply change the the field name so we're going to have the mongus okay now change this ones to user schema and here we have to do the change so this will be usern name and here we have to Simply remove this one and add the field so it's going to be a type is going to be a string then we'll have this required is
(46:48) going to be a true then we'll have a unique is going to be a true we'll have a trim is going to be a true and the last one is going to be to lowercase is going to be true so these are the fields we are taking under our username so simply copy that one and now we have to Simply work on the email simply copy and change this to email and this will be this so it's going to have the exact required field because email is important they have to provide the email this is good we got the email now we have to change this to let's say
(47:21) password and we can simply come back here and paste here remove this we got this is string and required fill now we have to Simply change this credit so when the user will create an account we are providing three credit so they have to buy the credit if they want to create more images so this is going to be a number and by default I will give them three credit you can increase that it's to up to you then we can simply remove this one and we going to have this like because we have to change this field to post that's how we can create a relation
(47:56) and this is going to be a user reference and it will be a post and this is fine here we have to change this to user user and user and here we have to say user schema and our entire user schema is ready we are importing the we have this five Fields got it now we can come back here and we got this close this one close this one and now we can start working on our middleware because we have to tackle the token error we have to tackle the global error so we can come back to the middleware and we're going to start
(48:28) working on our error components so let's come here we'll take a variable called error Handler and it's going to be a function in that we going to take error and we're going to take the request and response and next that's generally what happened in the backend API we have these three Fields available request response exact next and error component now we have to Simply call the function and in that we have to build the logic so first let's console log out the entire error track so we'll say error
(48:58) dot stack so this will give you the entire stack of the error which is happening in our application so you can able to pick that where it's causing the issue got it now we have to build the if statement so we'll say if error and we have to build the instant with our class Constructor so we'll say instead of going to be a custom error so this is the component we're going to assign in our control and pass the message and it's going to generate a error object for us we can simply say return response
(49:29) dot status is going to be a error status then we'll paste this J in and in that we can simply pass the message of the error so we'll take this error error. message that's the simple approach we have so what we are doing we are getting the dynamic status of the error because when there is a error will occur we're going to Simply pass the status code and the message and that's what we going to pass in our custom error else we can come back here we'll return this response do status is going to be a 500
(49:59) because if the error is not created by user means that error is happening in our server so we have to display the server error so we'll say Json error we'll say internal server error simple which will keep the track of the error caused by user and by the backend now we can simply build our class this class so we can say class error custom error we have to Simply extend error and in that we have to Simply build so we'll take the Constructor and that we can simply pass the message and we'll pass the status
(50:38) course by default is going to be 500 good inside that we can take our super because we want to inert so we'll take this message then we can take this this name and this is available in our Constructor do name that's how we can access then we have to access the status which is also available in the status and we have to Simply pass our error and that we can say capture stack trace and then we can simply pass this and this Constructor so that's the only thing we have to do we are inheriting the super class and then we
(51:21) are simply deconstructing the error and the stats from the capture Stacks array pretty good I have covered this tons of time in my previous project and in my API course as well so we can simply export this module it's going to be export we'll say error Handler and custom error perfect and that's the only thing we have to do here so this is our custom error and that's what we are importing here so come back here now we have to Simply work on a verifi token because we have to check the authentication if the token is available
(51:57) we have to Simply match with our database and that's what we're going to work on it so come back here first we have to import our JWR and that's coming from our let's say jwp web token Json web token once I we have this we can simply come back here and we have to Simply import the error component we have bu so that's coming from the same folder same directory error and in that we going to Simply take this custom error simply copy this one and that's what we have to Imports so these are the two Imports we
(52:28) are doing now we can simply come back here we can build a function call verify token and this is going to be call when the user will try to fetch the information from our database so we can take this request response and it's going to be a next let's call this inside that we can take a variable so first we have to get the token which is available in the request so we'll say request.
(52:51) cookie token and this particular keyword is very important that's what we going to assign when we going to send the re send the cookie or when you going to receive the cookie in the token field once we have the token we have to check the token whether it's exist or not so if it's not exist then we have to Simply throw the error message so we are using our error component we have built and that we have to Simply pass the two thing the message and the status code so we'll say you are not authorized because
(53:18) you are not providing the cookie and we'll say 401 which is stand for unauthorized but if everything is good we have to Simply match with our database so we'll take this jwp verify inside that we have to Simply pass the payload which is the token we are getting from the cookies and we have this environment variable which help us to generate that cookie which we have here is the JWT and that's what we have store here so we are using this JWT secret and this is what we are utilizing for generating the
(53:49) cookie so that's what we're going to use it simply copy and paste here and we're going to Simply verify it so once we have that now we have to Simply run Asing function function because it's going to verify the both the data synchronously so we'll have couple of we'll get couple of response so it's going to be an error or it's going to be your data so these are the two things we'll get and now we have to Simply build that so we'll say if there is an error then we have to Simply throw the
(54:14) error so we'll say Throw new custom error and we can simply pass that token is not valid and we'll pass the error is going to be 403 Forbidden error but if it's valid then we have to Simply set the data then we have to send the data in the request so we'll take this user ID and we'll have the information called data- do so in that way we can able to have the data in the request body about the user who's trying to interact with our application looks good I hope you guys have understood the logic we have
(54:43) implemented here and that's the only thing we have to do now we can simply come back here we can call this next so it will go to the next middleware function because this particular function is a middleware it will run every time whenever we going to make a request on any one of the end points perfect now we can simply come back here and I'm going to get this one and paste here and from here I can simply remove this and simply take this verify token because that's what we going to Simply export here perfect so
(55:10) we are importing this we are building this function we are getting the cookie from the request then we are checking there is a cookie available or not if it's not available we are throwing the error message but if it's available we are simply matching with the cookie we are getting and we have in the secret field and and validating that if it's the cookie is valid then we are setting the user the user information in the request object so we can utilize it in our other function that's what we are
(55:35) doing and calling the next middleware simple now we can come back here and now we can simply start working on our controller so close all of this now we can come back here close this one we are done with this model we are done with this middleware and now we going start working on controller so click here so first we'll start with the Au controller then we're going to work on the post and then the user so click on this Au controller and we're going to import a lot of things so first thing is going to be our
(56:01) user model which we have designed so it's coming from the model folder model Dash user that's what we got it now we have to Simply import the bcrypt because we have to encrypt the data so that's also coming from our package bcrypt then we have to import the jwbt because that's coming from our Json web token then we have to Simply import our custom error and that's are coming from the middleware middleware dash error we'll say Custom Custom error these are the UTS we are doing it's very simple now we can
(56:38) simply come back here we can simply build a function so let's do and build the skeleton first so let's build this export module so and in that we going to export all the function we going to build it so let's build the skeleton of the function which we're going to build it after that we're going to build each function so first let's design the function so we'll say const this will be register controller it going to be aning it going to take request response and next let's call this and it will take
(57:15) the try and catch and that's the first function we going to build for register controller so somebody copy this one close this one paste here and this is going to be our login copy paste here and this will be our call log out and copy and paste and this one is going to be for re Fetch and this particular function will call every time whenever the user is going to make a request because we need the data of the user so it's going to return me the data of the user and we'll say user so these are the four function we going to design
(57:51) here in the Au controller and that's what we have to export so let's do that simply post here comp paste here log out and we have this fetch so these are the four function we have exported now we're going to start working on the register controller so open this one and that we going to take couple of things so come back here first thing we have to get the get the password and this all data is available in the request because when the user will provide the name email password confirm password so those data
(58:22) will be available in the request and from there we can access it so we'll take this password we'll take the username we'll take the email and this data is coming from request. body we got it now we have to Simply take this exit existing user because we have to check whether the user is already exist or not so we can simply call this await user.
(58:45) find one and we can do that very easily all we have to do is to Simply pass the field name so we're going to take this operator which allow us to filter it we'll say or and in that we can simply pass take this array and object and we'll say username that's the first thing and the second one is going to be the email so if any one of these two things exist and match without database existing user we have to Simply throw an error that this user is exist you have to use a different credential got it now we can simply come back here and we can
(59:14) build if statement and throw error so we'll say ex exting user if it's true then we have to Simply throw the error we'll say custom error we'll say user user all name or email already regist exist and we can throw an error message is going to be 400 got it now we can simply come back here if it's good then we can simply continue ahead and register the user so we can come back here we can take this salt we'll say await bcrypt and in that we going to Simply call this gen salt and we have to Simply
(59:50) pass the number so this number represent that how strongly you want to encrypt the data the higher the number the more time it will take and it's going to be a CPU intensive but in Industry we follow between 10 to 14 so I will go with the 10 I don't want to make it more CPU intensive so we got this Sol and now we can simply hash the password because we cannot save the password as it is if someone's trying to hack our database they will know the username and the email ID but they will also have the
(1:00:21) password and they can EAS able to log in and that's not what we want we always hash the data of the user and then we can store them in the database so that's what I'm going to do it let's hash that let's say hash password and here we can say await bcrypt hash and we have to pass the the data we want to Hash so it's going to be a password you can hash literally anything but we are hashing the password only because that's what we do so we have given the password and we're going
(1:00:48) to provide the salt so it's going to encrypt our password now we can simply come back here and we going to Simply build the object and provide all the data the way we have designed in our model so we can come back here we'll take this new user we'll say new user and we can simply pass all the data we have built so first we're going to Simply deconstruct it because all the data is available in the request party so let's spread that out and here we have to Simply pass the password we have generated the hash PW not the normal
(1:01:21) password so that's what we going to Simply provide it so in that way it will automatically take all the fields which we have designed in the user model got it now we can simply come back here and we can save this user so we'll say await user new user do save and we can simply send the response back to the user that your account is created so we display the status code is going to be 2011 which stand for create and we can say Json and that we can simply send the entire user data and that's the only thing we have
(1:01:53) to do so first we are getting this data then we are checking the user existence then we are hashing the password and then creating the user and here we can simply pass to the next medal where if anything goes wrong it will take us to the the error Middle where we have buil so in that we can say next and we'll pass the error so if anything goes wrong it will automatically take us to the error handle Middle where we have taken perfect so that's our register controller now we have to build a login controller it's going to be a quite
(1:02:22) simple one so we can come back here first thing we have to get this user and here we have to build a condition so we'll check this if request. body. email means user will make the request in that he will provide the password and the email so we can say if it's there then we have to Simply use this await user.
(1:02:46) findind by one and in that we can simply try to find the user in our database based on the email so we'll say request. body. email that's the one condition else Al we can simply check with the username so we'll take this await user find one username we'll say request. body do username because you can allow the user to have the loging based on email or usern name that's why we are checking with this condition we can come back here and here we can simply build that so we'll say if user not exist then we have to Simply
(1:03:21) throw the error message customer will say user not found and it will be 404 which stand for not found then we can simply come come back here if it's there then we have to Simply check for match and we will say await big CP and we have to Simply match the password we have hash and the password we are getting from the user so that's what we going to Simply compare it so we have the function in B package called compare in that we have to Simply pass the request.
(1:03:55) body the password which user is providing and you have to pass the password which is hash in the database user password and this password will come from database in hash form so we got it and here we have to check if it's match or not so we'll say if it's not match then we have to throw the error message custom error will say wrong credential credential and it will have a error 401 got it now we can simply come back here if everything is good then we have to send the cookie back to the user browser so we can come back here we can
(1:04:27) take this const and that we can have the password then we going to Simply deconstruct the entire data which is available right up here and then we can take this user and we can simply have the doc so this will give us the entire data about the user password and the data once we have that now we can simply build this token and this is what we have to send so we'll say jwp JWT in that we can say sign and we can simply create the token so in that we have to simp pass the ID is going to be the user. ID and we have
(1:05:01) to Simply pass our secret which we have so we'll take this env. JWT secret then we have to tly provide the expiry that how long I want to make this cookie valid so I already have that so if I come back to my environment variable you will see that I'm going with 90 days this one 90 days copy and that's what I have to Pro right so after 90 days this cookie will be expired and user cannot use this cookie they have to relog in now we can simply come back here and send the response so we're going to send
(1:05:38) the cookie back to the user browser so we'll take this token and this particular token variable is very important you have to keep this exact key because this is what we going to Target for authentication and data generation so we have the token and here we have to Simply send the token status is going to be 200 and we can send this Json we'll have the data and we going to go with next middle where if anything goes wrong and that's our logging function so we are getting this user checking for the condition user exist or
(1:06:07) not then we are matching the password then we are generating the cookie and that's what we are sending here perfect so this is our loging controller now we're going to start working on a logout so it's going to be a very simple one I just want you to give a try that how you can allow user to log out the log out can only happen when you remove the copy from the user browser so let's do that I hope you guys have tried now we can simply come back here and call this next if anything goes wrong now we can simply
(1:06:33) come here we can take a response and that's the response straight away I have to send I have to clear the cookie from the user browser so I'll say clear cookie in that I can pass this token so this is the key I have to Target which I want to clear and set a new variable in that I can say same side it will be none and this will be all secure is going to be true once you're done with that you can simply come here we can take the status code is going to be 200 okay and we can simply send our Json message it's going
(1:07:09) to be user logged out successfully and that's the only thing you have to do all you have to do is to Simply remove the cookie and the user will be logged out from the application perfect got it close this one and now we have to work on this fetch user controller so it's going to give us the information about the user so so it's going to be a next then we can come back here and we're going to take this token because this token is available in the request body and this particular function will get called
(1:07:36) every time there is a page reload so we'll take this request cookie token then we can simply check we'll say verify we'll pass this token we'll take this process do EnV JWT secret and we have to Simply take this asyn because that's what a synchronous Behavior will have so we'll say error and we'll have the data this is the two data we available and that's what we have to check so if there is an error we have to Simply throw the error message with the new custom error and we'll say error and
(1:08:12) the 404 so whatever the error this error can generate two thing whether the cookie is not available or the cookie is invalid so in that scenario this particular error will trigger now we can come back here we got it and actually we don't need this try and catch block out of this we need in the AF block so what I will do I'll simply remove this one and remove this one and come back here and here we can simply take it right here we'll take a try and catch and then we can call it next we can come back
(1:08:44) here and we can take this const ID and this ID is available in the data then we have to Simply get the user so it's very easy we'll use this find by one and in that we can simply pass the ID of the user in that way I can have the user once I have the user I have to Simply send the entire user object means entire user details in the response so we'll say 200 and that's the entire user data we are sending perfect and that's the only thing we have to do very simple function we have built first we have got
(1:09:13) the cookie then we have done the validation of the cookie if it's there or if it's stowing any error we are throwing the error at the end we are simply sending the response the entire user information and that's what we are exporting here so perfect so we done with this Au controller this is the register this is the loging this is the log out and this is the fetch refresh sorry so looks good close all of this so now we can start working on the next file so come back here and this time we going to start working on our post
(1:09:41) controller so click here and we're going to start importing so first thing is going to be our XCS package because we have to make an internal call and we have to store the data in our database in the database we're going to store the name but the file the image which will be generated by open a we have to store in our local file system so we're going to use exis library because it has a method which allow us to Simply clone a file and store in your own system because when you will create the image the open a will generate the
(1:10:13) image and it will give you a URL and that URL will be valid for 60 Minute after that the URL will be no longer available so we have to use that a to create a clone of it and store in our file system so that's what we're going to do it so let's import Port this XS then we can come back here we can take this FS model then we can come back here we can take this Shar because this is the package will help us then we going to take this another one called path because we have to define the destination where we want to store it
(1:10:43) and we're going to take this call Post module it's coming from modu SL poost then we have to take this user model because we have to create the user reference then we going to S our error component and that's coming from our error and it will be custom error so these are the UTS we are doing looks fine now we can start building the skeleton of the function we go to design so it's going to have a lot of functions so let's take this const it will be generate file name and this function will generate the name of the images
(1:11:20) which we going to store in our internal file system so it's going to take couple of argument so let's build the scaling first this is the first function now the second function is going to be for create post with images controller via V3 model so we have multiple model in open a DI V2 and Val D V3 so we're going to use a separate function for v2 separate function for V3 so it's going to take the lot of data request response and next another function for generating the name for v2 model so we'll say generate
(1:11:59) file name multiple and it's going to take argument then we can build our V2 models we'll say create post with images controller Das V2 and it's going to take this request response and we have next then we can simply come back here we can take another function called get post controller so this post will give this particular function will give all the post created in our database so it's going to be ining request response and next then we can come back here let's build a next function called const get
(1:12:44) single post controller and it will say async request response and next copy and that's what we can simply copy this one and paste here this will be get user post controller we got our user post controller simply paste and change this to called delete post controller come here paste and this will be like post controller come back here this will be our dislike post controller so that's the entire function we go to code it so one by one there is going to be a lot of function and all of this function we have to export from here so we'll say
(1:13:34) module exports and we have to Simply pass the function so first one is going to be the create V3 this will be V2 and we'll have this get post controller then we'll have this get let's say single post controller this will be get user post controller controllers controller then simply come back here we'll take this delete post controller like post controller and this will be dislike post controller so these are the function we are exporting now let's start working on the very first function which going to
(1:14:14) generate the name dynamically for each one of the file so it's going to receive couple of things so it will take the user ID and it will take the all post length and this length is going to be a unique number which we going to assign to every single post so that's what we have now we can simply come back here take a variable this will be date so that's how I'm going to construct the name of the image so we'll have the date as well so we'll take this date we'll call this two data string and
(1:14:45) we can call this replace and we're going to go use this Global one SL G flag and we're going to give this Dash so that's the notation we'll have between the cap we got it now we can simply come back here and we have to return the name so we'll take this template tutorial so first is going to be the user ID then we're going to take the second one is going to be the length of the post so it will start from one two and it will go all the way like as many post the user will create so post length and
(1:15:19) then we going to Simply attach the date date and P NG so that's going to be the name of our file perfect now we're going to start working on the next one so we are done with this it will take this user ID all post we're constructing the date and then we are simply returning the name of the file so let's come back to the create V3 we can simply come back here it will take the variable so we need couple of data so it's coming from user ID and this is coming from our prams so when the user will try to create the image
(1:15:53) using the V3 model they have to provide their ID of the user so that's going to be a unique identification and that's how we can make the reference so we have this user ID available in the request pram we can come back here now we have to Simply get the prompt then we have to get this negative prompt then we have to take the size style image URL and we'll have the call Reserve prompt and all of the this is coming from the body there's say request.
(1:16:30) body because when there is a image will be created successfully so these are the data we going to pass it we have this perfect all of this PR is getting from the body if you come back here in the model you can see we have called the exact name so make sure to keep the spelling as it is exact name perfect now you can come back to the post controller now we can simply come back here we'll take this call all post length and we going to Simply call the function we have built so all post length we have to Simply find the post
(1:17:04) this will return all the post then we have to calculate the length post length and it's available in all post. length so we'll get the total length of the post we have in our database once we have that we have to generate the file name with capital n and we already build the function called generate file name and in that we have to pass the user ID and and the length so it will return the U file name once we have that now we can simply build the path and we have to construct so we'll use this path package we'll
(1:17:35) call this join we have to pick the directory so D Dash Dash directory name and here we have to call the name of the directory so we have to go to that particular I have to go to the D d/ DZ so I'm into the post control so I have to go into the main directory and there I have my folder so I'll give this folder and this will be file the name which we have generated perfect so that's how we can create a path for the file now we can simply come back here and here we have to take a TI catch block and we have to Simply use
(1:18:11) this user we'll say user find by ID in that we have to Simply pass the user ID so we can get the user details and we have to check whether the user is exist in our database or not so we'll say throw and we'll throw the error if the user is not exist and the ID is not correct user not found 404 if it's true then we have to Simply go ahead and we have to continue so we'll say this response and here we have to make a API request so we'll say XS we'll see in that we have to Simply pass the URL so this is the URL of the
(1:18:46) image then we have to pass this response type is going to be our array buffer because we are using using the URL to for generating a image and storing in the file so this method is important array then we have this Max redirect it's going to be five now we can simply come back here and we can build the image buffer we have this buffer and we can call this from in that we can pass this response.
(1:19:22) data once we have that we can simply say await and we can use our sharp package in that we can simply pass the image buer and we can give this PNG because we have to generate that in PNG and we'll say to file and we can pass the file path so it's going to generate the file and assign that now we can simply come back here once we have done with that now we can simply build our new post and Save in our database we'll say new post new post and we have to store the data so first is going to be the user ID we already have it then we have to
(1:19:53) provide the form AI model which we are using so we are using the V3 model so we'll call this AI image Art Del V3 then we have to give the prompt is going to be a prompt then we'll give this reserves prompt and this Reserve prompt we have then we have to give the size then we have to give this quantity and we can come back here you can see this is the quantity and quality we have so order is very important so this is going to be a quantity a one because di three can create only one image not multiple image so we can come
(1:20:33) back here come back here on top and we can say quality is going to be HD then we can come back here we'll take this style and this style data is available in the style then we have to Simply give the image file name and we can take this image and is going to be the image URL so that's what we are calling so everything is good good in that way we can able to save the data in our database looks good perfect now we can simply come back here and we have to Simply call this new post save and we have to Simply call this user post we
(1:21:09) have to create the reference that which user have created and we have to Simply push the new Post in that we can pass the ID and we can simply take this user. save to store the data in the user field as well then we can simply come back here and we can simply send the response so status code is going to be 2011 for create and we can simply send the message we'll say post created successfully and we have to send the newly post created post and we'll say new post and that's the only thing we have to do
(1:21:42) perfect and at the end we have to Simply call this next error so if anything goes wrong it will take us to the error component eror mware and that's is the entire function we have for using this V3 model for creating so we are getting the ID we getting the props then we are getting all of this Fields generating the name then we are checking for the user deconstructing the image URL and then we are simply storing in our database and sending the response perfect copy this one and that's what we're going to utilize here so before we
(1:22:11) start working on V2 model we have to work on our next multiple file name generator so this is the one which we're going to work so it going to take few things it will take the user ID and the index we can come back here we going to Simply follow the same logic so we'll take this date new date we'll call this two data string it will have a replace and we have to use the same Global flag G and we'll go with the same expression with Dash notation now we have to Simply construct the URL so we'll take the user
(1:22:43) ID this is going to be the index and this will be our date PNG got it now we can simply come back here we can simply copy this PO from our V3 model function and that's what we're going to Simply use it in V2 model so come here and paste here that's what we got it I can do I can see one thing so we get this ID we get the prompt and we get to get this and we have to do a few changes so we can come here and change this to let's say number because in V2 style is not available you have to go with normal and we don't have this Reserve
(1:23:21) prompt in the V2 model so only this five data we have to receive from the body and simply remove this one we got it now we can simply come back here and take this entire try and catch till here and that's what we can simply paste it so we have to check anyway for the user and that's what we are doing here we are making X's response and before we make that here we have to Simply come back here and we have to stick the download because in V2 the user can generate a single image or array of image a
(1:23:54) multiple image so we have to run a loop and then we have to make a call and generate the file so we can take this download and convert image so we'll say await we'll use this promise.all and then we can simply call this and we have to come back here and this particular image URLs will contain an array of image URL this is make sure to do that and we have to run this map Asing we'll say image URL with capital URL and it will take the index inside that we have to Simply construct the file name so we already
(1:24:34) have the function so we can come back here and we going to take this portion copy this one and that's what we can simply pass here so we are passing the user ID and here we have to change this to index perfect and this is fine just keep it as it is now we have to Simply get this portion and we have to call inside this we have to make the call and here we have to Simply pass the image URL that's what we are passing simply get this buffer paste here and we have to get this so it will generate our file now once we have that it's going to
(1:25:07) return the file name perfect now we have to Simply store this so we can simply come back here we have this new post and here we have to do the changes so ID is going to be there this is going to be V2 and here we have have the negative prompt so I can come back in the V3 and here I can see the problem so simply replicate this one and this will be prompt copy and paste here I hope you guys have noticed this so we got the actual data and that's the exact thing we have to do in our V3 model so this looks good we don't need to make
(1:25:41) any changes let's have a quick look perfect now close this one come back here in the V2 and here we have to do the same thing this will be the prompt copy and paste and perfect and here in the reserve prompt we don't get any reserve prom in the V2 model it's only in the V3 model so we'll say no available in AI image Art Del V2 model got it we don't have the quality in V2 model so it's going to be a normal and this will be number because you can generate number of images and here we have to change this to normal in the
(1:26:22) style because it's going to generate a normal image and the rest would be fine and here we have to pass this download and convert image name and this will the image URL which is the entire URL with generated by the AI perfect I hope you guys can understand that what exactly we have done it's pretty simple and then we are simply saving the post creating the reference with the user and sending the response back to the user so we are done with this create V2 now close this one now we have to work on the get post controller
(1:26:54) so it's very very simple function I want you to just give a try I hope you guys have triy let me quote that so simply come back here is going to take a try and catch and we have to Simply take this next and here first we have to Simply get all the post from our database so we'll take post. find and this will return all the post and I want to populate so like the post is there and different user will create the post so I want their name as well so I can display so I want to populate that so we'll say
(1:27:25) populate user and user name these are the information I want to populate in the post about the user who created the post now all we have to do is to Simply send the response we'll take the status code is going to be 200 Json and we can say post all post and that's the only thing we have to do to get all the post from our database we got it now we have to work on the next one get single post is going to be a similar one so first thing we have to get the ID so the ID would be available in the prams so we'll take this post ID and
(1:27:59) that's coming from our prams once we have the ID then we can take a try catch take this next error now we can simply get the post so we'll say post await post find by ID and we can simply pass the post ID then we have to make a check if the post exists or not so we'll say if post doesn't exist then we have to Simply throw the error message so we'll check this response status code is going to be 400 and we'll say Jason message post not found perfect now we can come back here if it's exist then we have to Simply
(1:28:34) send that post so we'll take this return post await post. find by ID in that we can pass the post ID and I want to P the information about the user as well so we'll take this user and I want to take the username as well once we have that we can simply send the response status code is going to be 200 Jason is going to take this return post and that's the complete function for getting a single post perfect close this one close this one now we can start working on the next one so we have already done with the single
(1:29:09) post now we have to work on this get user post controller all the post created by single user so we can come back here we have to get the user ID and that's what we can access from our request prams once we have the user ID we have to Simply take a trying catch and throw this error we can come back here and first thing we have to find the user so we'll say await user find by ID then we have to check if it's exist then we have to continue otherwise we have to throw the error message so we'll say Throw new error we'll say user not
(1:29:41) found it's going to be 404 but if user found then we have to Simply say user post we'll say await post find and then we can simply pass the user ID so it's going to give me the entire post created by a user and we have to populate the data about the user and username and then we have to Simply send the response so we'll say response status code is going to be 200 Jason we'll say post this will be user post perfect so that's the entire function for getting all the post created by single user so getting the ID checking
(1:30:21) for the user existent then we are getting the post and that's what we returning then we have to work on the delete post controller so come back here first we have to get the post ID which is coming from the prams request. prams then we have to Simply check the post existence so we have to Simply take this error next if anything goes wrong now we can come back here we have to check the post so first we have to Simply find that post to delete and then we can simply pass the ID and it will give us the post and here
(1:30:57) we have to check in if statement if it's exist means if the right post so I'll throw the error called new custom error in that we can say post not found 404 means you have provided the wrong ID and here I can see a warning so I have to Simply change this to new so that's what you have to do the check then I have to check for the user whether he actually creator of the post or not so we have to get the user we'll say find by ID and that I can simply pass the post detail because this post detail will contain all the
(1:31:37) information about the post including the user information so I'll get this user then we can say if user is there then continue otherwise throw the error message so I'll say user not found else we can simply take this user. poost and we'll use this user. poost I have to filter it and there have to Simply check for the Post ID and we have to Simply call post to string and I have to Simply compare it up to the ID and I have to con to a string so I can easily a to compare it properly so this will give us the post
(1:32:21) and relation with the users once I have that I can simply call this user do save then we can say post to delete I'll say delete one because I will delete that particular post then I can simply send the response so it's going to be 200 Json and I can say message is going to be the post deleted successfully very simple I hope you guys have understood so I hope you guys have understood that what exactly we have done we got the post ID then we are getting the post user and then simply deleting it perfect now we have to Simply work on
(1:33:00) the like so we going to take the post ID then you can take this user ID and this is also coming from the body then we can take the Str cled and the next got it now we can simply come back here and we have to Simply find this post and we have to also find the user so this will be the post and that's what I have to change here I can paste here and this will be user this will be user and here I have to provide the user ID paste here because I have to do the check for post and the user perfect let's align
(1:33:43) that got it so we we have done the check for post and the user now we can simply come back here we can take this if block and we'll say that post likes includes post user ID means the likes will contain the all the IDS which user have liked so we are matching with their IDs there we can simply copy and throw this message it'll say you have already liked so so if the user ID is already exist in the like array then we have to Simply through this a message that you have already like it else we can simply go
(1:34:22) ahead and we can simply like that so so we'll take this post likes push and we can simply push the user ID and we can say post. save then we can simply send the response status code is going to be 200 and message is going to be that post like successfully perfect and we'll have the post data so that's our like function very simple got it copy and that's the exactly the same thing we have to do in the dislike as well still we have to make the exact check and this is going to be fine here we have to check and here we have to
(1:35:06) Simply do the changes so take this we'll say post like filter and it will take an ID two string we have to Simply compare it so we'll say if it's not equal to the user ID then I have to Simply like it okay if it's not there then I can simply come back and save it and we'll say post dislike perfect very simple we have just done the reverse thing so this is the entire function we have written in our post controller this one is V3 this is for Generate name V3 multiple V2 we have get post single post
(1:35:53) and and we have close all of this we have the single post this is the delete post this is the like post and this is the dislike post and here we are exporting that so what we have done first first we have imported this this is the first function this is the second third and all of the function and at then we are exporting all of this function so that's what we are importing so we are done with this entire portion in the post control let's move ahead to the next file now we can simply come back user controller so we can come back
(1:36:19) here in the post controller and we have to Simply copy this portion and that's what we going to import here in the user controller we got it remove this one now we have to build couple of function here as well so let's build a skeleton this will be the get user controller it going to be ning it will take this request response and next it will take a try and clutch block and we'll kick this next copy and that's what we have to paste here this will be call update user controller and the last one is going to be call Buy credit let's
(1:36:56) call this Buy credit perfect so these are the three function we have to build and then we have to Simply export this module export and we have to export this get user controller update user controller and buy Creed perfect now we have to Simply work on our first function so open this one and come back here we have to get the user ID which is coming from our prams once we have the user ID we can simply come back here and check for the user existence so we'll take this user find by ID once we find that now we have to
(1:37:33) Simply check we'll say user if it's exist if it's not exist then we have to throw the error message we'll say no user found and it will be 404 but if it exists then we have to Simply take this password and we have to deconstruct the data and this data is coming from the user because this entire data is already available once we have that now we have to Simply send the data so we'll take this 200 Json data perfect so this will return the data of the user get user controller perfect now we have to work on this
(1:38:09) update user controller so come back here we have to take the user ID and that's coming from the prams then we have to Simply call this update data and this particular data is available in the body because user will try to update his account so all the data he will provide in the body and we can simply come back here we can simply check for the user so we'll say user to update user find by ID then we have to check for its existence so we'll say user update if it's not exit then we have to throw the
(1:38:41) error message we say user not found and it will have an error 404 otherwise we have to Simply update the user so we'll build this object assign and we have to update all the data and then we can simply pass user to update and this will be update perfect and it's going to do all the update and we have to Simply say user to update and we have to save the data and once it's get updated we have to Simply send the response back so 200 Json and will that say message is going to be user updated successfully and we can simply send the
(1:39:24) user update data perfect so that's the entire function for updating the data and account information about the user perfect close this one and the next one is going to be a buy function so user can simply call this function and increase their credit buy their credit so we can come back here and we have to get the ID so simply get this portion and that's what we can simply call it here then we can simply take this user and that's what we can call it here because we have to check for the user and now we can simply come back here and
(1:39:56) say if update data has own property and that I have to define the property which I want to update individually so I will go with the credit because that's the number I want to change it and because of that we can able to track that how many credit user have and based on that he or she will have the access of generating the images so we'll take this user token data we'll call this credit and we have to Simply update that so this update data we have in the update data.
(1:40:29) credit so if you come back to the module you will see here we have it and this is what we are updating by default we are providing three but when the user will buy the credit we going to Simply increase that perfect now we can simply come back here and we have to Simply Save the data once it gets saved we have to Simply send the response so simply copy this one and that's what we can simply send it here perfect so that's the only thing we have to do here I hope you guys have to the logic that what exactly we have done we have successfully built the function and
(1:40:58) all of that so we are getting this user custom error this get user controller update and buy and then we simply exporting it so we're done with that now we can simply come back here close this close this close this so we are done with the controller we've done with the model middleware model now we have to work on the router so let's check one more time looks fine here we have the middleware looks fine here we have the model looks fine now we have to work on the router so let's start with the auth
(1:41:23) router first so we're going to import couple of things first is going to be the express then we have to import all the function we have built so we can come back here we'll take this and we can import the function so we'll say SL controller o and we can come back here go back to the controller and there we have all the six ports simply copy this one and that's what we are importing here paste here then we have to build the router so we can come back here this is going to be a register and we have to build so you can come
(1:41:56) here we can have to build the router so we'll take this cons router we'll say express. router and call it router so we got the router now we can simply construct the URL so this is going to be the register we'll say router. poost because when the user will register they will make a post request and this is the Endo we'll build so we'll say register and we going to Simply call the register function we have built so we'll say register controller so this is the first router now we can come back here
(1:42:24) this is going to be a login simply copy and paste here and we'll say login login also going to be a post request and here we have to say loging controller copy and paste here this one is going to be called log out and this one is going to be a get request we'll say log out and we'll say log out control now the last one is going to be for our fetch current user and this will say re Fetch and call the function so we got all of this function all the rout looks fine now we have to Simply send the router so we can simply say
(1:42:59) model exports and router perfect I hope you guys have understood it's pretty easy we're done with that simply copy this one and now we have to work on the other one the post one so simply paste here in the post and we have to do the changes so we can come back to the post controller now we can simply copy all of this and come back to the post router and and paste here and we have to change the location so this will be the post controller and the to be find now we have to Simply build the URL so we can simply come back here and
(1:43:33) copy this portion and simply paste here so this will be called our create V3 and it will have the ID of the user and here we have to call create post with image controller V3 simply replicate this one and this will be V2 and this will be V2 we got it now we can simply come back here copy and paste here this will be get and let's remove this one it will be all so this particular function will return all the post created in our database we already have the function called get all post controller simply copy and paste
(1:44:11) here this will be called single and it will have the post ID so we'll say get single post controller copy and paste here and this will be let's call this user and we'll say user so this will return all the post created by user so we'll take this remove this call get user post controller copy paste here and this will be called delete because we have to delete it it will take this delete and it will have the post ID so let's change this to delete post controller now we'll simply copy and
(1:44:48) paste here this will be call post it going to be a like and this will be like post controller copy and post and this will be a dislike so we'll say dislike it will have this perfect so we got all of this URL looking good now we have to Simply export the router so we can able to access this I hope you guys have understood it's a very simple logic first we getting the express then we getting all the function building the router and then we are constructing the URL and that we are passing the parameters like ID post ID
(1:45:21) user ID that's all we are passing perfect now we can simply copy this portion come back to the last router is going to be the user paste here come back to the user controller and from there we can simply get this three and that's what we can paste it chain the path is going to be the user controller and perfect now we have to build the three end points so we can come back here we'll take this router we'll call this get because it's going to give us the data so we'll say user ID and we
(1:45:51) have to Simply call get user controller now replicate this one this will be the put for updating and this will say update it will have the user ID and we'll say update user and this is also going to be an update one this will be credit and this will say Buy credit we got all of that now we have to Simply export the router spokes router and that's the entire code we have for our backand I hope you guys have understood and follow along with me so we are done with this entire code we done with the Au we're
(1:46:25) done with the post we done with the user then we done with the middleware token then we done with the modeles post user then we done with the router perfect so we are done with this entire API folder now we're going to Simply start working on our index file and this particular file in which we have to write the code which going to start our front end and the back end on the same route in the index file so we can come back here we going to import couple of things so it's going to be take Express because we have to start our
(1:46:56) server then we have to import the  that's coming from mongos then we have to import the app which is coming from Express then we have to take the dovet this particular package because this will allow us to use our environment variable then we can take a cookie parser it's coming from our package cookie parser then we can come back here we'll take this next and we have to configure the next because we have to start the front end and the back end so we'll take this require next then we can take this EnV will provide this config
(1:47:35) and we have to provide the path from where we are getting this environment variable so we'll say path is going to be do/ config EnV so if you come back here here we have the file that's what we are targeting now we can simply come back here we'll take a Dev so we have to check whether we are in the development and and production so we'll take this product process.
(1:47:56) EnV and we already have this node andv if it's not equal to production then we are in the development then we have to take this next server we'll call this next and then we can pass the dev environment then we can simply come here we'll take this handle and here we can simply build that so we'll take this next server and in that we can simply call this function we have Handler get request Handler function now we can simply come back here we can take a variable called Au route and we have to import all the routes we have built
(1:48:33) for different controller so this is going to be Au it's coming from request / API route and Au we have to replicate it and chain this to this will be post and this will be user come here change this to user and this will be post post we got the router now we can come back here we can take our path path is going to be from path then we can come back here and here we have to build that so we're going to take this slash API middleware and we have to get the error and we have to error then we can simply come back
(1:49:17) here we can take this verify token and it's coming from the/ middleware SL verify token so all looks good so we are importing this packages next packages routers and the path and file now we can come back here and we have to build the connection with our database so come back here we'll take this port process.
(1:49:41) EnV and we have the port if which is coming from our environment variable or else we can go with the default 3,000 got it now we can simply come back here and here we have to build a connection with our database we'll say mongus do connect it will take the process. EnV and we have to pass the mongodb URL so this is the URL we have to pass simply copy and that's what we have to pass here we got it and we have to say it's going to return return a promise we have to resolve that so we'll say then and we'll say console.log
(1:50:14) that DB database connection successfully perfect now we can simply come back here we'll take this app use and we have to use this express. Json if you don't use this it will not allow the user to store the data in the database okay so this is very important then we have to Simply call this use cookie pars then we can come this app use and then we have to provide the upload file path so we'll say slash upload we can go to the express.
(1:50:47) Statics because if we want to access any file any images from our file system we have to provide this then we can able to to access by giving the name and we can say Statics is going to be a path path will have this join we'll take this d-d name and is going to be our upload perfect and that's the only thing you have to do for generating a St file so whatever data whatever file and folder you going to keep inside this upload folder you can easily able to access that once we have that now we can come back here we'll take this app use
(1:51:21) and here we have to Simply build the API end points so we'll have this/ API o and we can simply pass the Au router so when the user will hit the O URL is going to take to the O controller simply replicate it this one is going to be post route and this one is going to be user route and here we have to do the changes in the user route we have to run a verified object as well so we'll take this verify token cut it and here I have to do the chain user this will be the post so if User make any request on any
(1:51:57) one of these end point it will automatically go to that particular controller perfect now you can come back here you can see this is the route we have it will automatically take that now we can simply come back here we can say app use error handle because if anything goes wrong we have to pass that in our Global error handle object function so we can come back here we'll say next server and we have to restart the server so we'll say prepare we'll take the then and we'll take the call back function so we'll
(1:52:32) take this app get Global and here we have to Simply pass this request response and inside that we have to Simply return this handle and that we can pass this request and response so it will start that now we have to start our fronted as well so we'll take this app Listen p port in that we can simply pass the port and in that we have to say that app running on Port like the dynamic value like 3,000 and that's how our server and the backend will start together so perfect this is the packages this is the
(1:53:10) internal import router modules we have the port mongodb connections cookies routers and this is the server are starting perfect now if you come back to the packages and file here you can see that here we have multiple script I want to do the changes so instead of running node because node will run in the development when you will deploy that but in the in the development I want that that whenever I will save the file I want to restart my server so for that I have to do the changes instead of using node I can use node modon which I
(1:53:42) have already installed so I can simply paste here and I can simply paste here in the start script so whenever I will save the file it will automatically restart my server so that looks good now we can start testing our application all the back end code is absolutely working fine so let's run the particular command so this is the one we have to run like start so we'll take npm Run start and there you can see our application got started but here I got Supple of error so okay I hope you guys can notice the
(1:54:13) error in the V2 model controller function it's response response it's stes so I have to fix that it's a request response so that's the fix I have to do so so that the is should be fine now we can simply close this one come back to our controller and there you can see this is the problem we have so simply change this to request and this will fix the issue if you open this one this time we are getting a different error it's coming from the router it's coming from the exports model from o so it's a kind of a typo we are
(1:54:48) getting in the router files this looks good now close this one and close this one come back here go back to the there's no problem in this go back to the Au router because there we have the issue and I can see the problem it's module. exports not only export so just provide this s and this will fix the issue if you open that if you save it you can see our database connection is looking fine and Port running is 3,000 so there is no problem everything is working fine I hope you guys can see that how things are coming
(1:55:21) together our back end is absolutely complete needed now we can simply start working on the functionality and sending data to our back end so looks good now you can come here and I just want to tell you to install this particular extension it's a post man type post man and this is a very powerful extension so instead of going to the postman interface and just switching between different screen you can write install it in your vs code and you can use Postman right in your vs code so I've already installed it you can see
(1:55:52) it's already enable in my system so once you it will enable and install make sure to restart your vs code and and connect your account with Postman so here you can see I'll click on this Postman and here I will find all the project I have created in my Postman so let's click on this I can go to different Tab and you can see all the post project which I have created so make sure to create and login with your Postman account and all the file things you will find here so here you will find an option to make
(1:56:24) API request so if you see all of this API end points which I have built and make the request that's always is there I can simply come back here and this one is the additional wall it's not compulsory that you have to use the postman I'm just telling you that you can here you will find multiple option web socket like G grpc and you can use HTTP and that's what we're going to use it HTTP all you have to do is to Simply paste the endpoint and you can able to make the request so come back here and you can
(1:56:53) see our application is running on local 3,000 so first we have to get the local 3,000 so I can come back to the browser and come here click on this and this is the one you can see our front end is working absolutely fine there is no issue our index is reflecting I can get this one come back here paste here and I have to get a make a get request so we got this domain once I have the domain now I have to get all the post from my database so this is the method we have built you can see this this is the post route we have simply copy this one this
(1:57:26) portion and that's what we have to Simply paste here we got that and here we have to provide the specific rout of which we want to call it all so if I come back here in the post you will see this is the all we have so simply all that's what we have to take and paste here and the moment I will make a request it will give me all the post which is there in our database So currently you can see I have no post that's why it's empty array so our database is working fine you can see the status code request time everything is
(1:57:55) looking good and this Postman is additional one you can use it or you can avoid it if you want to master Postman I already have a complete API backend development course which is this one you can simply follow that but for the time being just complete this project so everything is looking good our front end is ready our back end is ready now we can start working on our actual functions and connect the back end with our front end and that's the only thing I want to cover in the next video we're going to start working on
(1:58:22) our YouTu utility files and make all the connection all the backend API calls right in our front end and connect with our application right in the next video so let's move to that he everyone welcome back to the third part of our AI image generator app in the last part we have completed the entire backend part and in this video we're going to the back end with the front end and we going to build couple of components so this is where we left in the last video now we're going to start working on the utils but before
(1:58:47) we start doing work on that let me give you what exactly we have coded in the last video so if you come back to the API this is the controller and this is all the controller we have with au controller post controller and user controller then we have the middleware in that we have coded this two middleware error and verify token then we have this model and that we have this two model post and user that's what we have coded then we have the router in that we have this three router post Au and user and that's all we have coded
(1:59:14) and if you come back here in the utils we're going to start working on the utils and we're going to connect the back end part but if you come back here in the index so let me come back here in the index and this is where we have coded and started our backend application as well as in the front end part so this is the entire code we have written so if you haven't watched the last video make sure to watch it and you can see our back end is also running and our front end is also running if I reload the page and everything is
(1:59:38) running fine so now we're going to start working on our utils file and where we're going to make all the API calls so that's what we're going to start working now so first we have to import couple of things so first we going to import react and then we going to take use State and that's coming from react once we have that then we have to import let's say open AI because we have to add that generator and that's coming for open AI open AI then we have to import exis library because we have to make API call
(2:00:03) once we have all this library now we have to import the API of our open Ai and that's the configuration which I'm going to do so I will take a variable called open Ai and we already have this particular method in the library in the package so we'll call it new open Ai and in that I have to pass the object so we have to pass two things open a key and we have to also tell open a that we going to use this open a key in the front end side not in the backend Sid and this key is coming from our environment variable and we haven't
(2:00:32) generated our key yet we're going to generate together so you can see this is what we are importing but I haven't generated the key yet let's build a skeleton so simply copy that one and that's what we have to import so we got our key now we have to Simply tell open air that we are going to use this key in the front end side so we'll say danger dangerously allow browser it's going to be a true so they have given this name in the documentation and that's what I'm utilizing so it's true so we got our
(2:00:58) open a object now we can simply go ahead and start working on the functionality so first we have to build a function let's call this one extract image URL and the reason why we are building this particular function because when we going to use the open V2 model it's going to generate up to 10 images so we have to format that image URL in proper way so we can pass down into our backend and that's why we are building this external function so in that is going to take the image array and all it's going
(2:01:28) to do is to return this so we'll take this image array we're going to run a loop we'll say image and we have to say image. URL so it's going to give me a proper formatted URL so that's the utility function we have now we can simply come back here and let's build the function so this particular function is going to register the user it's going to take the data so we'll call it sign up and this sign up will have an object of data so first we have to deconstruct the data so let's
(2:01:57) deconstruct it so we'll say sign up in that we'll have the name we'll have the email we'll have the password and we'll have the confirm password so all of this data is coming from our signup confirm password once we have all of this data now we have to Simply validate this data so for that we're going to build a if statement we'll say if name is not there or if email is not there or if password is missing or confirm password is missing if any one of these data is missing then we have to
(2:02:24) Simply throw the error message we'll say return is going to be data missing perfect now we have to Simply match the password so we'll say if password is not equal to confirm password then we have to Simply return this error message that password is not matching we got this two check so we are done with this two check now we have to Simply make a request to our backend so we'll take a variable called response and we going to make our API call so we're going to to use our excess library and in that we have to Simply
(2:02:55) provide all the parameters so first is going to be the method so we going to make a post request because we going to pass the data to our back end and then we have to Simply provide the URL so this is the URL for our o controller so I hope you guys have watched the API part in that we have built and talked about that o controller post controller and user controller so let's build the URL so we'll take this we'll call it API sl/ register so this particular end point is for registration if you come back here
(2:03:24) in the API section like this is the index there you will find that this is the end point we have built for Au control so we are getting this one domain then we can simply go to the route folder that's what we have then you can go to the route folder there you will find inside the API inside the route folder inside the O we'll have this end point so that's what we are targeting got it pretty simple so we got this URL now we can simply come back here and here we have to say with credential is going to be true and now
(2:03:57) we have to Simply send the data so we already have the data so first is going to be the usern name because that is the field name we have given in our backand so make sure to give it exactly that so we have the username is going to be a name then we have to give email then we have to give password and then we have to give confirm password let's say confirm simply copy and paste here so we got all of this data in our data fi now we can simply wait for the response so when we'll make the API request is going to
(2:04:26) return a response with a status C so that's what I have designed in the back end so let's check for this response so we'll say if response status code is equal to 200 then we have to Simply redirect the user to the homepage because they have created their account successfully so I'll simply redirect them to the homepage perfect and that's the only function we have to build here so what we are doing first we are getting the data from our signup object then we are checking for the data then
(2:04:54) we are confirming the password then we are making the call to our API and providing all of this data and after that we are checking the status whether the registration got completed if it's completed then it's going to return 200 status code means it's successful registration so we have done with this particular function register user now we have to Simply build the login user so what we can do we can simply come back here we'll say export const login User it's going to be an asnc and it's going
(2:05:19) to take couple of data so we'll say login and again this will going to contain an object of data so we have to deconstruct that so we can simply come back here and we're going to take this portion like this two portion and that's what we can paste here and here we have to do the changes so simply remove the name and we have to remove the confirm password and change this to login we got it now here we have to do the changes remove this portion and remove the email and password and confirm password looks
(2:05:48) good now we can simply come back here and we have to get this portion because we have to make an API call so we can simply copy and that's what we can simply paste here so we got all of that now what we can do is we can simply come back to the URL and here we have to do the changes in the URL so in the last we call registration and here we have to call login login we got it and here we have to provide all of this detail like email and the password so let's remove this one and remove this one we got it
(2:06:13) now we can simply come back here and it's going to return the status score 200 if the user will log in successfully and that's the only thing we have to do so we got our login function close the one now copy and that's what we have to paste here and this and now we have to build our logout function so simply change this to log out and it's going to be a very simple one simply remove this one remove this portion and all we have to do is to change the method to get and here we have to call log out and we
(2:06:40) don't need to pass any data so we can simply remove this portion and it's going to return status score 200 after successful log out and that's the only thing we have to do here so we got our log out function pretty good after the log out we want to redact the user to the homepage so simply close this one so we're done with this registration user login and log out now we can simply come back here and we're going to start working on the next function so simply copy and paste here and change this to
(2:07:04) check o this particular function will give us the datails about the user whether he's logged in or not and hits profiles details so for that we have to do the changes in the endpoint so like first we have to Simply call this re fetch this will give the endpoint point and we don't need to pass any credential any data into this and it's going to return the data that's the only thing we have to do so we can simply come back here we'll say let user because we have to return the user information and this
(2:07:33) particular information we going to utilize in other function so it's better to return it so we'll say let user we'll say if remove this one we'll say if response status is 200 then we have to Simply call this response do data because in that we have the data of the user and we can simply return that got it this is fine this is fine and at the end we have to Simply return it so let's return the user perfect so that's our entire check off function first we are getting the data making API
(2:08:06) call to our back end then we are getting checking the status and at the end we are returning the entire user object simply close this one now we have to Simply copy this and that's what we can simply past here and we have to do the changes in the name so it will be like post and that we have to pull up pass the post ID so it going to be a post method and we have to change the endpoint so it will be post instead of au and here we have to Simply call like and it's going to be a dynamic post Dynamic URL so let's convert into a
(2:08:37) template L room and here I have to provide the post ID so this post ID will receive from the function input so let's call this post ID and that's what I can simply call it and I want the user information as well so we already build this function check all so let's utilize that so we'll take a variable const we'll say current user and we're going to Simply call the function check out perfect and that we'll have the entire information about the user once we have that we can access the user ID because
(2:09:06) that's what we have to pass so first we have to pass the post ID there we got it now in the body we have to pass the user ID who's going to like the post let's format that now we can come back here we'll take this data and we'll say user ID and the data is available in the current user.
(2:09:27) ID perfect now we can simply remove this portion and it's going to return a status code of 200 and we'll have this response so remove this one and remove this one and I want to return the entire response so let's call this response perfect and that's the entire function we have for liking a post perfect now I'm going to Simply copy and it's going to be a dislike one so it's going to be quite simp similar one I want you to give a try so let's convert the name to dislike post it's going to take the user
(2:09:58) information and the post ID and we have to change the Endo so this will be called dislike we're going to provide the post ID and that's the only thing we have to do you can see how easy it becomes when you design a perfect end points for your application so we got that perfect now we can simply close this one now we can simply save it and and we can start working on the next function simply copy that one and we can come back here and this will be so this time we have to call this image generator V3 so this particular function
(2:10:34) will allow us to generate the images so we have to do a lot of work into this so first we have to generate the image and send the data to the back end then we have to Simply check the credit of the user so we have to do a multiple call of the API and the AI model so first thing we're going to Simply remove and take the prompt because this prompt will contain a lot of data so we'll say prompt V3 then we can simply come back here and here we can simply come we can take this object prompt V3 and from there we can simply
(2:11:07) get the data so let's get the prompt negative prompt we can take the size we can take the style so these are the data we are getting now we have to check for the data prompt then we have negative then we have size and then we have style if any one of these data is missing then we have to Simply throw the error message we'll say data is missing that's the first check if everything is good then we can simply pass the data to our AI model so let's construct that so we'll take this lower case and the reason why I'm taking this
(2:11:45) lower case because we have to convert the style which we're going to provide to our AI model it should be not not in upper case but when we'll get the data from the front end it will be in the upper case so we have to convert it into a lower case so let's take that style to lower case and that's what we have to pass into our AI model so let's come back here we'll take a we'll take a const we'll say AI image a wait and we have to use the open AI we'll say open a and that we have to call the method imagees
(2:12:19) and we'll call it generate and we have to pass all all the data so first is going to be the model that what model we want to use it so we have multiple model actually we have two model V3 and V2 but we're going to use V3 in this so let's call this di- E3 make sure you have to give the exact name if you give any other name it's not going to work then we have to give the prompt then we have to give the size then we have to give the quality is going to be NHD then you have to give number of images you want to generate
(2:12:54) because in V3 you can generate only one and then you have to provide the style the converted style these are the prompts we have to pass and our model is ready to generate the image once you have that now check all the data that you are providing correctly now what we can do we can simply come back here and we have to check whether we have the URL or not for the images which our AI model will generate so we'll big a build a if statement so we'll say image.
(2:13:25) data because in that we'll have the data we want to access the first index in that we'll have the URL so this is the response you will get and here we have to Simply check and pass to our back end so if it's the URL is there then we can simply copy entire cut and paste here and here we have to Simply make a post request so I'm going to Simply change the endpoint is going to be a create SL V3 and here we're going to Simply provide the data so just provide the user ID as an endpoint so we can our backhand can know that this particular
(2:13:59) user is creating the post we got it this is our URL now we can simply come back to the data and here we have to send all of the data so first is going to be the prompt second is going to be the negative prompt then we have to provide the revised prompt and in V3 model this is the data you will get so let's access that and stored in our database as well so it's available in the first index revised prompt prompt we got it then we have to provide size style and this will be the image URL make sure to use it URL in
(2:14:39) capital and we have to Simply provide the URL of the image so we can go take this AI image data first index and URL and that's the entire data we are passing to our back end perfect once we're done with that looks good let's check one more time with all the spellings perfect now here we have to do another check so we can come back here and what I will do I'm going to get this entire portion and that's what I can simply paste here because once the user will make a post required and create the post
(2:15:13) then I have to decrease the credit because it's all the our business model is based on credit so let's make a post reord and decrease the credit so we can change the end point so instead of post we have to change this to one because it's going to be create and I have to change this to put because it's going to be a updated and here I have to do the changes so this will be user this will be credit remove this one and we going to have the user ID as well and we can simply remove this one and all we have
(2:15:45) to do is to Simply pass decrease the credit so first we have to get the actual credit that how much credit is there for the user which we can access very easily we'll say current user and in that we have the details about the credit and from there I can minus one so we can decrease one from the actual credit perfect I hope you guys understand the logic which I have implemented here so what I'm doing that when the user will create one image we have to decrease one credit so we got it now we can simply
(2:16:18) come back here and we can simply return the response perfect and that's the only thing we have to do in this particular function everything is looking good so you can come back here first we are checking for the authentication whether the user is logged in or not or whether he has or she has created their account or not then we are checking for the prompt if all the prompts are provided properly or not then we are converting our style to a lowercase because that's our AI model will take and here we are
(2:16:43) passing all the details like model prompt size quality H1 and style then once we'll get the URL then we have to make make a request to our backend and provide all of these detail after that we have to Simply decrease the credit of the user so that's the entire function we have now simply close this one and copy and paste it for v2 model so we can simply do the exactly the same thing we can change this to V2 and we'll still have the prompt but in the prompt we have to do a little bit changes because
(2:17:10) in V2 model we don't have this style prompt style variable so for that I'm going to Simply come back here we'll change this to negative prom would be there size would be there and this will be the number n got it now we can simply change this to n and this this should be not here so we can simply come back here and change this to two because we are using two model like V2 model then prompt would be there remove the quality because in V2 model we don't have the quality parameter and remove the style and save
(2:17:46) it and this will be the number so whatever number we user going to provide that how many image user wants to create because that's the option we have in the V2 model that you can create up to 10 image so we can simply pass the number of the image user wants to create got it once we have that now we can simply come here and we have to convert the image in a proper URL because if user wants to create 10 image so it will have 10 URL so we cannot able to have the access just like this the way we done it so we
(2:18:15) have to make a proper format URL so we can come back here we'll take a variable call image URL let's call this image URL and we already buil this particular function extract image URL and that we have to Simply pass the entire array which we have in the data and that's the entire array it's going to give a proper array of URL and that's what we can simply pass in our backhand got it simply check here for length if there is a length then only we want to make the backend request so here we have to do the
(2:18:48) changes in the V2 and the rest should be fine all I have to do is to Simply come back here and I don't have this so simply remove this one I have the style I have number and I have this one simply copy and that's what I can simply paste here so that's the data we have to pass in our backend looks good and this is fine we don't need to make any changes let's keep it as it is because we have to still decrease the credit in V2 model as well so we done with this entire fun function now we can
(2:19:21) go ahead I hope you guys have follow it so we have imported the packages this is the open a object we have we have the utility function this is the registration this is the login this is the log out this is the check out we have the like post we have the dislike we have generate image V3 and generate image V2 now we can simply come back here and we can start working on the next one so simply copy this one dislike post and that's what we can paste it and we can change this to get AI images got it now in this we don't need
(2:19:56) any parameters simply remove this one remove this one and all we have to do is to get the get method and we have to Simply change this to all and remove this one because this particular Endo will give all the images created in our backand and we can simply remove this portion and it's going to give a status of 200 and we'll have the response and from there we can have the access of the data and we can go to the Post so that's our simple function which give us all the data about the images now perfect
(2:20:30) simply close this one copy this paste here and here we're going to make another change called user AI images all we have to do is to pass the user ID which we'll receive in the function we'll say user ID and that's what we have to pass in the endpoint so let's change this to perfect we got that we can simply remove this one from the AI images and we can also remove from here as well so now it's look good you got it perfect now we can simply copy and paste here and here we have to do the changes
(2:21:10) for single post it will be the post ID and here we have to say let's say single and I have to say post ID and the the only thing we have to do let's call this return post perfect so this will give us the single post close this one copy and paste here and here we have to do the changes so it will be delete post and then we have to pass the post ID and here we have to call delete and here we have to call delete and it will delete the post and at the end it's going to return the response which contain the message that
(2:21:50) the post is deleted successfully so perfect we got it the delete post simply copy and that's what we can paste here and this will be called Buy credit so in this particular function we'll allow user to buy credit and update the credit in the back end so we'll take the number of credit the user wants to buy it what's what we have here we can come back here and we can simply come back here in the in the let's say in the image and get this one copy because we need the user information and paste here once we have
(2:22:22) that here we have to do the changes to user this will be credit and here we have to Simply pass the user ID got it and in the body tag we have to Simply send the details so we can simply come back here and we can copy this entire request and that's what we can simply paste here and we have to remove this all and it will be have only credit so let's say credit and we can simply first get the credit that how many credit is already there in the user account so first I have to get that and in that I have to
(2:22:55) Simply add the credit which user wants to buy it so let's add that perfect so this is our dynamic credit so first we are getting the credit which is left and then we are adding the credit which user is buying perfect and this is fine we don't need to do anything so that's the entire function we have so like we get the response and that's what we are is rning remove this one so that looks perfect so everything is looking fine at the moment but definitely we going to do the testing and if we find that we have
(2:23:28) made any mistake we going to Simply Rectify that so simply come back here looks good let's have a one more quick overview because we are done with this entire functionality in the context so this is the import of the packages this is the open AI this is the first utility function this one is for registration user logging log out check off like post we have like dislike post post image V3 V2 AI user single delete and buy looks good so we done with this entire utility function now we can simply come back here close this one close this one and
(2:24:04) we can come back to the pages we can go back to the homage first and now we're going to start working on the homepage so let's build all the functionality because most of the feature we going to build right here in the homepage is going to have the similar feature in other pages so we have to spend a lot of time here but once you complete this portion it's going to be easy in the letter and different pages so let's start working on it so first we have to import couple of things so if I come back in the in the browser if I reload
(2:24:32) the page everything is working fine we don't have any issue our back end is running our front end is also running so we can simply come back and we can start importing couple of things so first we have to import let's say use State and we have to import use effect so these are the two things we are getting now we can simply come back here and import the exis library we have have that now we have to import the cookie because we have to check the cookie existed in the browser and based on that we have to
(2:24:57) perform the authentication so first we're going to Simply import this cookie package we have and it's coming from JS cookie once we have that then we have to Simply import the router because we have to redirect the user and we have to get the query from the URL so that's why we are using this user router which is coming from next route this is the four Imports we are doing looks good now we have to do a couple of internal Imports then we can simply come back here call and all of these Imports are coming from
(2:25:26) our context csb index so we have to import a lot of Icon here so we can come back here first is going to be the home logo second one is going to be the search third one is going to be the image filter and we'll have the fa heart and we'll have fa Instagram we'll have ai outline YouTube and we will have BS camera reel fill and the last one is going to be the fa rug heart and magic all of these icons we are getting from our index file pretty good I hope you guys can understand and watch the first part in
(2:26:08) that I have explained the entire architecture about the project so we got all the icons now we can simply import so if I Rel the page everything is working fine we don't have any issue so we have done the success import now we can simply come back here we have to Simply import couple of components so it's coming from component SL index so first is going to be the header then we'll have get started we'll have image card then we'll have single image we'll have up image card we'll have notice we'll
(2:26:42) have button and we'll have pay Payment Processing so all the components we have imported successfully looking good now we can come back here we have to import one function which is coming from all utils and this function can you guess which function we're going to call it I hope you guys have corrected we'll say get AI image and this particular function will return all the images which user have created and we need one more check o for user authentication so we imported the packages icons and we have imported
(2:27:15) the component and the functions looks good now we can simply come back here and we have to take actually a lot of State variable because we have a filter system and we have multiple State Management and that's what we going to do right up here in the page so first we going to take our let's take the router in which we going to receive the query and here we have to build a use state is going to be let's say open filter by default will be false the second one is going to be our loader by default it will be false the third one
(2:27:49) is going to be let's call this category because we have multiple category for YouTube for reals for Instagram so that's why we have taking this particular variable by default it will open the real category so we got this now we can come back here take another one this will be called single ID by default will be empty so this particular variable will keep when the user will try to read the entire details about the single post so we'll store the ID right up here then we'll take another one this will be call
(2:28:22) buying and by default there would be nothing so these are the main State variable we have which keep the track of the data all of that now we have to take a lot so we can come back here we'll take a state variable this will be called active user then we'll take another one this will be called all AI image then we'll say all post copy by default it will be an empty array then we'll take another another one this one is going to be for search then we'll take another one this will be called search item and then we
(2:29:01) have to Simply pass the search got it now we can come back here and we have to take couple of individual State variable for the models because we have two different models we have to keep the track of that so let's call this V3 and we going to define the state variable based on the like Dimension so this will be let's call it V3 and it will be 1024 into 1024 okay by default there would be nothing same thing I have to do three times and I have to change the dimension so this will be let's call this 17 92 * by
(2:29:46) 1,24 now let's take the third one let's change this to 1,24 multip by 792 perfect so these are the three dimension of the images we have now we have to take the same thing for the V2 model so simply copy and paste here and change this to V2 and now we have to change the dimension because we have different dimension in V3 and V2 so this one is going to be a little smaller one so this will be have 256 mtip by 256 this one is going to be 500 12 512 and the last one is going to be let's okay 1024 and 1024 perfect we
(2:30:25) got our state variable now we can come back here we have to build a hook because we have to check couple of data so we'll take this use effect and it's going to take a callback function and here we have to do the checks I have to check the query which is available in the URL so we'll say if because when the user will buy the credit this particular variable will be available in the URL and we are keeping the track of that and based on that we going to make an API call so if the query and credit is available credit Plan Credit plan is
(2:30:59) available then I have to Simply call this set buying and that I have to pass the credit plan so this will automatically going to call the backend API and is going to allow the user to increase their credit this particular function I have to run every time there is a change in the query credit plan perfect and that's the only thing I have to do so let me repeat what exactly I'm doing I'm checking for a condition that if there is a credit plan available in the URL so as soon as this data is available in the URL we have to make the
(2:31:30) backend API call and we have to increase the credit because they have completed the payment successfully so we got that now we can simply build this particular function which allow us to change the category so it's going to be a huge function so we'll come back here we'll take this cons change category in this we're going to receive the category because it's going to have on click function and here we have to do a lot of things first we have to Simply get the model which is there in the local storage so we'll say
(2:32:02) active model so this will give us that which model is currently active whether it's V3 and V2 and based on the model we have to display the images so if it's active V3 then we have to display all the images generated by using V3 model but if it's V2 we have to display all the images generated by V2 model so so we got the model and here we have to build a long if statement so we'll say if model is equal to AI image Art di 2 make sure to give the exact name because this is the name we going to track in multiple
(2:32:38) Pages e V2 then I have to Simply render all the V2 images so we can say if category is equal to real then I can say say set this is the one we have that's what we have to call let's call this set all images is going to be V2 and why I'm not getting the suggestion V2 556 and 556 but I'm not getting the suggestion let's come back here okay this is the problem so I have to change this to V2 V2 V2 and now it will work fine change it all the places looks good and that's what we have to Simply call it here so simply change
(2:33:20) this to V2 perfect this is for now I have to do the same thing for the copy so this will be the all post copy this one is for the real and at the end we have to set the category so it will be called real so we got this now I have to build a next statement so we'll say else if it's equal to Instagram then I have to do the same thing simply copy this one and paste here and I have to change the model so this will be let's call this 5 12 512 and this will be Instagram now we have to do for the YouTube Simply
(2:33:57) copy and paste here and change this to YouTube and this will be 1,2 1,2 1,24 1,24 and change this to YouTube perfect so this is our if statement based on the V2 model now we have to do the write the lse statement for the V3 if it's not V2 that mean it's V3 so we'll take this lse we'll say and that we going to build the if statement we'll say if category is equal to real then we have to say simply copy this portion and that's what we have to Simply paste so let paste here variables so this will be called
(2:34:39) V3 1,24 1024 let's build the next one so simply copy this portion and that's what we have to paste here and this will be for a different one actually I made a mistake so let's change this to V3 and this will contain the dimension of 1,24 1024 and here I have to do the changes in the real so this will contain our V3 1,24 and 1792 and copy one more time and paste here and change this for YouTube and this will have the YouTube ratio so it will be V3 792 and 1024 so this is our entire change category function we have looks good I hope you
(2:35:25) guys can understand that why we are building this particular logic because we have multiple ratio and that's how we can deal it in the easiest way so that's the entire function for changing the category now we can simply go ahead and start building the next function called calling all post and in this particular function we're going to call our backend API it's going to be ning obviously because we have to Simply wait for the synchronous behavior and first thing we have to do is to take the Cent catch if
(2:35:51) anything goes wrong we have to catch that so we'll say error got it now we can simply come back here first thing we have to Simply take and make a API request so we already have the function so we'll say response we'll say await and we have to Simply call our function and this particular function will going to give us all the images created in our back end now we can simply come back here and we have to build a this function is going to be quite huge so we can come back here we'll take the V2
(2:36:19) model and we have to take a couple of internal function so this will be V2 256 256 it's an empty let's take the next one is going to be 512 512 Mt this is going to be the 1,24 and 1,24 mty same thing I have to do for the V3 model I'll explain the logic that why I'm exactly doing it because when this particular function is going to be execute we have to Simply filtered all the data based on the size because this particular API endpoint will give all the data as a chunk but we have to design our data so we can display
(2:36:54) different data in different component based on the size so that's why I'm taking this empty array so next we'll take this 1,24 empty array let's come back here V3 792 and 1,24 and the last one is going to be 1,24 and 1792 so we got all of this empty are let's add a unique ID so we'll call this temp copy and paste this perfect we got this variables empty array now we can simply come back here and we have to build the if statement so we'll take this response and we have to run a for H
(2:37:33) because it's going to be an array and I have to Simply run a loop and I have to Simply push the data in each one of this empty array so we'll say for H it will take the element and here I have to build a if statement so we'll say if element Dot AI model is equal to let's say AI image Art di V2 so if it's our V2 model then we have to Simply check the another is statement and this time we have to search for the size so we'll say element do size because every single image will have a size filled I hope you guys have
(2:38:11) watched the part I have explained when we have designed the entire field for the post so in that we have the size so we'll say if size is equal to so if our Dimension matches with 256 then I'm going to push the image into this particular Dimension array and let's provide this one more because I have to check the string as well the data type so that's the one we have if it's matches then we have to Simply push it so we already have this empty array we'll say V2 256 256 temp push and element and that's the exact thing we
(2:38:44) have to do for all the V2 and V3 so let's build the next one we'll say lse if size is equal to the next Dimension so this is the 5 12 512 then we have to Simply push and the 52 52 so we'll take this temp push element now we have to do the fourth third thing size equal to 1024 1,24 then we have to Simply push so we'll say 1024 push element perfect so this is for our V2 model now we have to do the exactly the same thing for our V2 model so we can come back here let's take else if a model is equal to the same we'll
(2:39:27) say di V3 in that we have to build a if statement we have to check for the size if it's equal to 1,24 1,24 then we have to Simply push to V3 1,24 1,24 and element let's go to the next one we'll say else if size is equal to like 17 92 1,24 then we have to Simply push into that particular array so we'll take 1792 and push element then we can go to the last one if size is equal to let's say 1,24 and 1792 then we can simply push in the empty array so let's push that and that's our if statement I hope you guys
(2:40:11) can understand that what logic We are following we are getting the entire data in an array then we are running this for and we are simply filtering out the data based on the size that's pretty simple got it all of things are looking good now we can simply come back here and here we can simply say set V2 is going to be the array we have designed so let's set that we'll say V2 to 56 because we have filtered the data and stored in the empty array now once we have the data we have to Simply set in our state variable so let's set very
(2:40:43) quickly this is for the V2 now let's take this one 512 and this is going to be 5 12 10 this one is going to be let's say 1,000 24 and we'll have the 1024 so this is for the V2 now we have to do the V3 it will start from 1,000 let's send this to 1,000 this will be take the next one this will be V3 1792 and 1,000 and the same thing we have to provide it and this is the going to be the last one let's say 1,7 and we'll have 1,000 17 so all of the array we are storing in our state variable looks good now we can
(2:41:25) simply come back here perfect and here we can see things are looking good so we have to Simply check we are providing the exact data so you should always double check because there is a quite repetitive name we have and the data we are using it for filtering and pushing so you have to always check that you are passing and pushing the DAT in the right field we got it now we can simply come back here we can take this and here we have to Simply get the model so we'll take this model which is coming from the local storage we'll say active
(2:41:57) model and here we have to Simply build a if statement we'll say if model is equal to our current model means AI image Art Del V2 then we have to Simply set this we'll say set all image is going to be our this is the dimension by default we are setting up so it's going to be our 5 256 256 and we have to say do the same thing in our copy we say 256 256 perfect now we can come back to the lse statement and in then we have to Simply pass the next one will say 1,24 and 792 we have set all the variables looks
(2:42:44) good perfect we're done with that now we can come back here we'll take a video called store cookie value so this time we trying to access the cookie which is stored in the browser to perform the authentication because if the user is not login we have to open the login model so user can provide their credential and they can create their account or they can log in so let's take the cookie which we can use it with the help of this cookie package and we'll call this token got it so we have our cookie and here we going to build if
(2:43:17) statement we'll say if cookie EX exist means the user already have their account and here we can simply call this so we'll say user and we going to Simply call the internal function we have built check off this particular one going to give all the details about the user we can simply set the user detail in our active user got it we got the details of the user and this is perfect we don't need to do anything in here now we can simply come back here and here we have to build other function so we'll take
(2:43:45) this use effect and this is the function we going to Simply call in this particular hook so we'll say calling all post and I have to call this particular function only one time when the page will reload not multiple time so that's the entire function we have I hope this particular function is quite big and you guys have follow along with me and understood that what exactly we have done so we are getting this then we are designing this Mt array based on the dimension then we are running a for each Loop and we are simply filtering out the
(2:44:16) images based on their size and that's what we have here then we are storing that filter array in our state variable then we are getting the model and then we are simply storing an actual State variable which we're going to render in the component by default and here we are dealing with the cookie to get the user information and then we are simply calling the function perfect once we done with that now we can simply come back here and we can start working on the filter because user can type the name of the image and they can filter so
(2:44:41) that's let's build it so we can come back here let's build a function called on handle search is going to take value and it's going to be a very simple function we have built this particular function multiple time in other project so we'll take this const filter post we already have all the details about the post so in this all AI image we have to call this filter and in that I have to pass the prompt it's going to take a call back function there I have to Simply do the comparison so we'll say prompt. to
(2:45:15) lowercase and in that I have to Simply look for the include method which is there in that I can simply pass the value and I have to also convert it to a lower case because I have to match it and this particular method we have built it will filter out the image in the array and give the exact image which user is trying to search now we got this now we can simply come back here we'll take this if statement we'll say if filter post.
(2:45:42) length exist post. length is equal to zero then we have to go with the default value so we'll say set all post image is going to be our all post copy got it else we can simply past our filter post that's the only function we have on handle search now we have to build a next function call let's call this on clear so when the user will type and then when the user will remove everything from the search we have to display some data so that's what we going to code here so we'll say on clear here search it's going to take nothing
(2:46:22) and then we have to check for if statement we'll say if all post AI image length exist or all post copy length exist if this two condition is true then we have to Simply set the image like all post copy and that's the only thing we have to do very simple now we can simply come back here we'll take this uh we have to build a hook we'll say use effect and we have to call this function we have build it so we can simply come back here we'll take this timer and we'll say set time out and I
(2:46:57) have to execute this function every 1 second so we'll say set search in that we can simply pass the search item and I want to execute this in every 1 second I have to Simply call this return and I have to Simply clear the timeout and that I can simply pass the variable we have created very simple it's just a JavaScript nothing complex so we got the first hook and I want to execute this every time there is a change in the search item means every time the user will type one letter this function is going to
(2:47:29) recall so this is the first hook now I have to take one more so I can take this use effect and here I have to build a statement and I have to call the function we have coded above so we'll say if search is there then I have to Simply call this on handle search and that we have to Simply pass the search item so it will go into our function it's going to filter the entire ARR else we have to Simply call our on clear search means there is no information no data available in the input field so call the on clear
(2:47:59) function and I want to execute this function Whenever there is a change in the search item perfect so that's our entire function I hope you guys have understood that what exactly we have done this is very Basics now we can simply come back here and all the data we'll get from the array it will come as a normal error so let's reverse the array so we'll take this array reender and first I have to Simply spread the array so we can say and we already have that so remove this one we can simply say all image Ai and I have
(2:48:31) to spread it once I have spread that now I have to call the reverse function so always the first image will renter okay always letest image will display in the front and on that I have to Simply call this empty array if there is no array and simple so I hope you guys have understood that what exactly we have done first we have imported this packages then we have imported our icon then we have imported our component and the function and here we have taken our state variable all of the state variable this is for the size State variable here
(2:49:04) we are checking for the credit plan then we have a change category function which will keep the track of that which category user is trying to see the images then we have our function we are making the call to our backhand and getting all the post that's what you can see we are building this Dynamic condition you can simply do a console log to see that you are getting the data or not so let's call this response and I want to Simply copy and that's what I can simply pass all the way to down to see that all the
(2:49:33) function we have built it's working or not so let's paste here so it's good and this is fine this is fine and this is the hook perfect so everything is looking good now let's come back to the browser and let's execute reload the page the moment we reload the page this function is going call let's do the inspect element to see that what exactly we are getting in the console and you can see we are getting this empty every means the function we have built it's working fine it's pretty good so it's
(2:49:59) quite satisfaction that we are seeing something because there is no post available at the moment that's why you can see there is zero array so we're done with all of this function and to be honest this function is going to be quite repetitive in other Pages that's why it took so long to write such a huge function but it's going to be more easy when we start working on the other pages and other part of the application so let's come back here remove this one and now we can start working on our GSX so
(2:50:26) let's make it side by side to see what exactly we are working on so that's how it's looking let's bring on the right hand side and now we'll start working on the GSX so first thing we have to do is we have to take this and we have to take our header there it is reload the page and you will see our header component is looking fine there it is now we can come back here and let's make it side byid perfect now we can come back here we'll take a div and will have a class and let's call
(2:50:55) this margin bottom we're going to have a let's say 56 pixels we'll have on a small screen we're going to have let's say margin bottom is going to be zero on a small screen we'll have margin top is going to be 56 pixels and somehow this instant conversion of the telin CSS is not working properly so let's me redo the page and you can see it's taking a little bit time to make the changes which we are writing here so let's come back here we'll take a div it will have a class and let's
(2:51:27) call this Flex Flex column inside that we'll take a get started component and it's going to have a prop like the user information active user information you got it you can see it's taking a lot of time to make the changes in our screen so we'll take a d it we have a class let let call this with screen overflow x hidden Flex Flex column item item Center we'll have padding y for pixels padding top margin top 16 pixels and that's looks good inside that let's uh uh we can simply come here reload the page and here you
(2:52:12) can see it's reflecting so let's come back make it side by side so we got this now inside the div we'll take anchor we have to redirect to the homepage and inside that we have to display our logo so home logo let's reload the page okay this is quite weird our CS is not getting converted instantly it's taking a little bit time so we got our logo now we can simply come back here we'll take a anchor and we can take a app aparture because when the user will click we have to Red them to the create
(2:52:49) page and it will have a class let's call this cursor pointer inside that inside that will take a p it will have a class margin top is going to be two text Excel and we'll have text Indigo -300 active is going to be let's say scale 95 and text Center font medium Shadow small and let's make on the big screen reload the page and you can see the stylings are not changing instantly so let's work in this way okay so let's come back here let's add the class over effect is going to be Shadow medium background is
(2:53:35) going to be Indigo -300 background opacity 5 over we'll say background opacity is going to be 10 and we'll have a border we'll have a border indigo is going to be three and we'll have a border opacity is going to be 10 and we'll have a over on that we'll say border is going to be opacity it's opacity CIT y opacity is going to be 20 and we'll have a transition all and we'll have a rounded kind of styling so we'll say rounded medium and we want to have a padding X so we'll have six and padding Y is going
(2:54:14) to be two so these are the classes we have apply I hope you guys are familiar with the Telvin class okay so that's what we are applying here so if I come back here reload the page you can see the styling can see this box it's working fine perfect now we can come back here and inside that we can display our text so we'll say AI image 10.
(2:54:37) 5 is here save it and you can see reload the page and there it is the styling is working fine on over effect we are getting the nice border everything is looking good now we can simply go ahead come back here we'll take a d it will have a class Flex item center with full Max with 600 pixels we'll have medium margin left is going to be 48 pixel margin top is going to be 8 pix 8 and we'll have padding X is going to be four padding left is going to be five on the medium devices we'll have padding X is going to be five and inside that we going to take a div
(2:55:10) it will have a class called with full inside that we'll take another div it will have a class let's call this with full Flex items Center relative and it will have on click function so we'll say let's call this change category and by default we'll go with Filter we'll say filter perfect so we got our button now if I come back here you can see in this particular function we are receiving the category and that's what I'm passing let's close all of this and now we can simply come back here and we got
(2:55:46) that now we can come here we'll take a search component and we have to display our input let's call this input it will have class let's call this background is going to be Zin 700 Flex 1 padding left is going to be 12 padding right is going to be 12 and we'll have a rounded full and we'll have a text small and we'll have padding x 4 then we'll have padding Y is going to be 2.
(2:56:19) 5 and focus is going to be out line none focus is going to be ring one and focus is going to be ring Indigo 700 it will have a placeholder and in that we can simply pass search for any image then we can simply come back here we can add a on change and we can simply get the data from the input in our search state so we'll take this set search item and in that we can say e.
(2:56:46) target. value so we'll have this in input data and by default we'll display this particular value the search item and if you guys are not familiar with tmin classes you can check this particular course and that you will Master complete blockchain development and we have used the modern technology including the telin CSS a lot of things so you can simply check this one you will understand everything so we got the input fill now we can come back here and we can reload the page and there you can see beautiful we got our input F we got
(2:57:14) our search icon everything is looking great so slowly slowly our application is coming to live now we can simply come back here and start working ahead on our button so we can come here we can take a d button it will have a type it's going to be a button it will have a class let's call this margin left is going to be two height is going to be 10 with is going to be 10 and we'll have a rounded full cursor pointer we'll have a flex item Center justify center background is going to be transparent on over effect want to have
(2:57:49) a background zinc 900 and inside that we can display the text so we can call it our filter icon we can display that there it is it will have a onclick function and on the on click function we have to display the model so we'll say open filter if it's true then we have to say to false so we'll say set open filter to false but if it's false then we have to set it to True perfect simple IFL statement we got our button now we can simply come back here and I'm getting this warning simply reload the page it's
(2:58:18) not an error reload the page because our telin c is taking a little bit time to get converted into our and display perfect there it is look good now we can come back here and we can simply go ahead and work in the next component so we can simply leave to div and we can take a div it will have a class let's call this Flex with full Max with 600 pixels on the medium device we'll have Mar left is going to be our 48 pixels padding X4 padding L5 and we'll have on the medium device padding X is going to be five
(2:58:57) inside that we'll take our Dynamic block and we have to display our notice component so we'll say if open filter is true then we have to display this component notice component cut it and here we can add a custom style so let's take that one we'll say position is going to be relative perfect we got it now if you come back here reload the page and if you try to click on it okay something's went wrong our component is not perfectly aligned but uh if you click you can see our notice component is opening means
(2:59:28) our click event is working but our CSS class there is some problem that's why it's not perfectly align it's just a beginning we're going to Simply fix this so here we have it I can see the problem we are having so this is the button we have simply come back here simply copy this one and paste here because we going to have two button and here we have to do the changes simply remove this portion and we have to remove the classes as well so this will have a different class we'll say text base absolute right two we'll
(3:00:02) say over effect we'll say BG zinc 800 height 8 width 8 Flex item Center justify Center rounded full there it is we can simply remove that and we can display the icon of the image and save it now we can simply come back here and take this portion and cut it now we can simply come here leave the two div and we can take a div it will have a class called Flex justify Center inside that we can display our button there it is perfect I hope you guys have understood that what we have done we have created a new button and we have removed the old
(3:00:41) previous button and taken into a separate diff and that's the fine Del the page uh and you can see still we have the problem still we have this problem so we have to fix that come back here and I noticed one thing so this is fine here we have the next component simply cut this one and we have to Simply lift to De and then we have to Simply paste here perfect now if you reload the page you will see now it's perfectly align so we got our search bar we got the image icon and the filter button perfect I hope you guys have done the
(3:01:17) changes now we can simply come back here and we can simply go to the public inside the public we have the asset in that we have all the CSS classes we have applied now we can simply come back here bring it and we can start working on the next component so this is what we have ai image 10.
(3:01:37) 5 is here that's what we have it so let's format that properly because when you use Telvin classes your component structure is going to your component structure becomes very big so this is the one we have let's close this one this is the external component perfect now we can simply come back here below the dynamic component we'll take a div it will have a class called margin bottom 8 Flex Flex column item Center inside that we'll take a div it will have a class call Flex space X2 inside that will take a button it will have a class call with 32 on a small
(3:02:12) screen we'll say withd 36 and we'll say Flex items Center text small justify Center text Center we'll have a height N9 rounded full on over effect we want to change the background so we'll say brightness 10 we'll say background is going to be opacity zero we'll have a shadow small and we'll have a margin top is going to be four we'll have a background gradient to top and we'll have a from Indigo 9900 and we'll have VF Indigo 900 to Indigo 800 and inside that we can display our
(3:02:59) search let's say search text and save it our button is ready if you come and reload the page you can see our button is displaying okay there is a problem in the alignment so there is a small typo in my CSS class so what I can do I can come back here and I can see the problem so it's items s add s and we save it and reload the page it will fix the issue there it is it's in the middle perfect now we have to work on the next button so what we can do is we can simply come here we'll take an anchor
(3:03:31) and we want to redirect the user to the create page it will copy and paste here and we have to call it generator and I have to Simply remove couple of classes because I want to have only border so I want to remove this portion remove it and call let's call this border border gray 700 on over effect we want background zinc 700 and that's the classes we have now if I reload the page you will see the button is having over effect and we have the Border perfect we got the button now we can come back here we got
(3:04:09) the two buttons we can simply come here and we have to leave two div and we have to work on the next one so we'll take a div it will have a a class let's call this Flex space X2 space X2 inside that we can display our button so we'll have a multiple button which user can click and they can change the category from real YouTube and Instagram so we have to send couple of props in the button so first is going to be the icon we already have the icon so we'll say real the next one is going to be the name and we have
(3:04:40) to add a handle click functions and we already have the function which is ready so we'll say change category and in that we have to Simply pass the category so it will be real so we got it now we have to Simply replicate it two more time and we have to send the category as well so simply save it and replicate it two times and change the icon and change the image this will be change the name this will be YouTube copy this one will be our Insta insta copy and past here so we got our button save it looks good now we can
(3:05:16) come back here take a div it will have a class called margin top two and it will have a space then we'll take another div let's come back here reload the page you can see our button is perfectly aligned we going to fix this that what exactly went draw but for the time being just work ahead now we can come back here we'll take a div it will have a class called margin top three we'll have a relative padding X2 on the median device padding X7 then we'll have with full inside that we'll take a div it will have a class
(3:05:50) called active we'll say outline is going to be none we'll have Focus outline none overflow hidden and we'll have a new CSS style box it will have a role we'll say grid and we have to add couple of custom class so we can take this tab is going to be zero then we'll have a style we'll say position is going to be relative display is going to be grid we'll have a grid column template column in that we can simply say repeat auto fill minmax is going to be the size so we'll say 200 pixels to 100 one one F
(3:06:38) FR then we can say list style is going to be none and we'll have a margin is going to be zero we'll have a padding is going to be zero and we'll have a gap to 1.1 Ram perfect so this particular div will contain and display all the images perfectly now we can simply come back here and we can simply render our card image component so we already have the data we'll take this fragment and we'll take this Dynamic block we'll say array render because we already have the arror data and we have to call the reverse
(3:07:12) function so it will give us the latest image and we will say map item index and it's going to return the entire component so we already have the component image card and that we have to send the props we'll say index is going to be index then we have to send the item then we have to send the set single ID to set single ID then we have to say active user that's the card we got it now we can simply come back all the way down and we have to build and display the dynamic component like the single image
(3:07:48) card and the buying component so let's work on that so we can take this single ID if it's exist then we want to display our single image component in that we have to send the prop so first is going to be the single ID then we have to set this set single ID and this is the two prop we have to send now we have to do the same thing with the payment processing so we can simply copy this one and paste here and this will be the buying and I have to change this to payment processing and we have to change the ID
(3:08:18) so this will be our buying and this will be set buying perfect so that's the entire code we have written here in the index page everything is looking good I hope you guys have understood let's reload the page and you can see reload the page and everything is aligned there is some problem in the alignment but we're going to Simply fix that because when you write so many CSS classes you commit some sort of spelling mistake here and there so that's the part of the development okay perfect but the
(3:08:46) architecture is looking absolutely great the component is also working fine perfect now we can simply come back here and we can start working on our header component before we start moving and working on any other component so reload the page this is good this is also good no problem in that and we can come back here and this is looks good let's have a quick overview that what exactly we have done and let's format this one properly let's close this one this is fine this is the second section we have
(3:09:25) and the last section and now we can start working on the header section so simply come to the header section so we already have it we can go back here in the in the component inside the component we have Global in the global we have the header component let's close this one and here we have to Simply make a API call and we have to also take couple of State table so first we have to import couple of thing use State and use effect we got it now we can simply come back here we have to get the cookie because we have to check the
(3:09:56) authentication then we have to Simply import the couple of icons this will be header logo this will be account we'll have generate history we have home and like so this is the component we are importing now we come back here now we have to import the setting component which is is coming from the same directory we'll say do/ setting we got it now we have to import the function it's coming from our util index and we'll have this check o we got it because this check o will give all the information about the user so we can
(3:10:33) simply come back here and let's take couple of State variable so this will be call Au by default will be false this will be our open setting it will be false and we'll have our active user there is no data available so once we done with that now we can simply come here we'll take a nav list we'll say nav list it's going to be NN of object so first is going to be the menu home and second one is going to be link replicate couple of time and change this so this will be generate apure and this will be our
(3:11:11) history our history this will be likes this will be likes and the last one is going to be our accounts perfect got it this is our nav list now we can come back here and let's take this function we'll say calling user details is going to be aning we'll take a try and catch and we'll console out the error perfect now we have to Simply make a call so we'll take this user await and call the function we have B check Au and we have to Simply console log out the user credit and we can simply set this data to the
(3:11:50) active user perfect we got the function now we have to Simply call this function so when there is a page reload we have to call it so we can simply take this use hook and we'll say first we have to get the data from our cookie so we'll say store cookie value and I want to execute this function when there is a cookie available we'll say cookie doget and we can give the token so we'll have the cookie we'll say if cookie exists then we want to call this function so we'll say calling user details and we
(3:12:23) have to set this set or is going to be true perfect and we can come back here we'll say else we can say s or to false perfect and I want to execute this only one time when the page will reload so we're done with this perfect our function is working good if you come back here reload the page nothing happen here but if you go and do the inspect element in the console you will see that you won't have any data because there is no Ki available in the browser that's why the function is not getting called
(3:12:56) means the logic we have implemented is working absolutely fine so now we have to Simply work on our component in the j6 part so we can come back here we'll take a class fixed with screen bottom zero on a small screen we'll say top zero Z index 50 Flex Flex row items Center justify between backdrop is going to be blur background opacity is going to be 80 and we'll have a border top and board border top and on small screen we'll have a border bottom border opacity 50 and text small and we'll have a selected is going to be
(3:13:42) none and we'll have a background Zing is going to be 900 and we'll have a border top zinc is going to be 700 and on a small screen we'll say border bottom zinc is going to be 7700 if I come back here you can see we are getting this nice blurry options reload the page this looks good our blur effect is working fine perfect now we can simply come back here let's make it side by side so we can see what exactly we are working on let's come back here bring it on the right hand side you can see the condition we
(3:14:19) have built because on the small screen we are hiding the top bar and we are displaying our our header component right down below and that's what you can see so that's the dynamic navigation we have built for our header so we have a different header on desktop but when it come to Mobile screen we have a different footer navigation perfect now we can start working ahead so looks good we can simply come back here we can simply apply a styling so this will be our let's call this height is going to be 56 perfect now we can
(3:14:52) take this anchor and here we can display our logo we'll say hidden our small screen Flex item Center cursor pointer padding X4 padding left 6 left zero height full and withd 32 you can see we are getting that now inside that we can take our header logo if I make on the big screen you can see we are getting our logo perfectly reload the page and you can see the logo is look good let's make it side by side so let's minimize that one and bring here perfect you can see the cusis is applying perfectly now we can simply
(3:15:38) come back here we'll take a div it will have a class called Flex relative item Center Height full margin is going to be negative top one width is going to be full on a small screen we'll say the WID is going to be Auto inside that we'll take a dip it will have a class called absolute we have a rounded background is going to be zinc 700 inside that we can come back here we'll take this style and we'll say height is going to be 32 top is going to be 15 we'll have width is going to be zero opacity is
(3:16:12) going to be one and we'll have a transform is going to be none so we have all of this Styles we have applied now inside that we'll take our Dynamic menu list and we're going to Simply render that so we'll say menu list map menu index and then we have to Simply render it so we'll take the anchor we have to provide a key and we have to apply the classes so this will be Flex Flex row item Center cursor pointer height full padding y 1.
(3:16:43) 5 padding bottom is going to be zero and it will have justify Center transation all and flex is going to be one it will have a hre is going to be menu. link perfect and then we'll have a style with is going to be 80 Z index is going to be two and opacity is going to be our let's say 0.5 perfect inside that we're going to take a div it will have a class relative on a small screen Flex justify Center hit hidden with full inside that we'll take a div it will have a class called absolute with full we'll have a style
(3:17:26) this will be the Border bottom is going to be 2.5 pixel solid and we'll have our transparent inside that we can display the bottom will be minus 17 pixels then we can come back here we'll take a span it will have a class let's so we don't have any class let's give the data menu perfect so the menu somehow is not reflecting okay there might be some issue in the classes why the navigation menu is not reflecting let's let's go ahead so we can simply come back here and now we have to Simply deal with the icons so we
(3:18:06) have the menu and I can see the problem so we have this extra div so just remove this one and we have to Simply close the diff because this style the custom style we have apply is going to be self closing div so let's close this one and save it now perfect so we got this span perfectly now we have to take a div simply live one div we'll take our Dynamic block and we have to Simply render it so we'll say if menu is equal to home then we have to display the home icon L menu is equal to generate then we
(3:18:37) have to generate display the generate icon if it's equal to history then we have to display the history icon if it's equal to likes then I have to display the likes icon or by default I will go with the account icon so we got all of that save it and let's give this one and perfectly okay I'm getting this particular error so somewhere I forgot to import the component I'm not importing the component somewhere properly that's why I'm getting this warning so let's come back here let's check all the component
(3:19:07) we have imported so the problem is happening in this component the icon component we are importing so let's try to compare and comment this one it's fine so the problem we have in the icon component so what I can do I have to recheck the component spelling so come back here we already have the components in the csb and here we have it so this one is for Generate perfect generate is fine copy paste this one is history copy and paste here okay then we have to Simply copy the home home good and I can see the priv
(3:19:40) it's likes sorry it's it's likes let's give the S and this will fix the issue now I have to Simply change this s and bring it back and save it and you can see everything is good but somehow our menu is not displaying again still we have some problem but if I do the inspect element you can see our B icons is reflecting but they are not perfectly align so we have some issue in the class so I have to see what exactly went wrong now I can simply come back here like in the Cod and let's do a couple of fix so I can see the problem
(3:20:18) like here we have to add uh one more class so this is fine here I have to add one more class so let's call this padding X is going to be two and I noticed one problem is here so Maring negative is going to be one so give this slash okay then the class will apply so this is the two changes let's come back here and REO the page still we are having the same issue so this looks good okay so what I can do let's work on our button after that we going to simp to do the testings so check this Dynamic blog
(3:20:53) we say if authentication is true then we have to display this button otherwise we have to display this button so we'll take a div it will have a class let's call this hidden well width is going 32 height is going to be full on a small screen we'll say Flex item Center justify and margin right is going to be six inside that we take a button it will have a class called height 7 width seven rounded full text Xcel on the medium device we'll have a text small background is going to be zinc 800 and
(3:21:30) we'll have a border border zinc 700 we'll have a let's say drop shadow not prop prop Shadow it's a drop shadow and we'll say Flex item Center justify Center and we'll have a opacity is going to be 80 and we'll have over effect as well so let's call this opacity is going to be 100 on over and we'll have a custom style so we'll say type is going to be a button and we'll have on click function so on the on click function we want to Simply call this set open setting is
(3:22:02) going to be false so here I have to build a dynamic condition we say open settings if it's true then I have to make it false otherwise I have to make it true so what I'm doing I'm checking for the open setting state if it's true then make it false but if it's false FAL and make it true simple logic and here I can display the text so we already have the details about the user so I can take this active user I can simply get the username and I want to slice it and I want to get the first character of the user so I want to
(3:22:31) say one and we'll say upper case so it will display the first letter of the name got it now we can come back here and we can display our component so user can click and it will open the setting component where they can have all the details so let's call this setting and in that we can set this user information perfect we got our button now we have to work on the next one the dynamic one if the user is not authenticated then we have to display this button we'll take a div it will have a class hidden with 32 height full
(3:23:01) small screen Flex item Center justify and margin six inside that we'll take our anchor and we have to Simply redirect the user to the login page and we can say class Flex item Center justify Center height 8 rounded medium we have a opacity 90 over is going to be brightness 110 padding X is going to be a four we'll have a text XEL on the medium device we'll have a text small background is going to be a gradient to top and we'll have a from Indigo 800 VI we'll have a indigo 800/8 800 we'll
(3:23:47) have a top Indigo two Indigo 600 we'll have a drop shadow font medium will have a white space no wrap that's the classes we have and we can simply come back here we'll take this get started and that's our entire class looks perfect now you can see our menu is displaying so there is some problem in the alignment or maybe in the closing diff everything's looking fine you can click and it will redirect you to the falling page so like it looks good it looks good let's try to do a little bit
(3:24:28) inspect element and we have to see what exactly went wrong so it's still we having the same issue in the footer as well come back to the code and let's go through one more time so this is fine this is fine and we have some issue right up here I guess this is the icon no there is no problem in that so this is fine we have this so let's add one more border class here so this will be our small screen will say border is going to be top zero that's the one class you have to add then you can simply come back
(3:25:01) here and you can see this is fine there's no problem okay I can see the problem so it's going to be a self closing div so let's close this one and we have to remove one di so this is fine com all the way down and remove one di from the bottom and save it it because this particular div we have for the styling purpose and save it once you do the save it will work absolutely fine so this is fine don't need to do any changes here you can see our navigation is working fine now you can reload the page and we have this navigation you can
(3:25:30) click and you can go to different pages perfect if you do the inspect element you can see our icons are also displaying fine so slowly slowly our application is coming to live perfect so we are done with this entire header component this is good this entire header is good now we have to work on the setting so that's what we going to work next so we can come back here and we have to receive the prop so this is what we are sending in the prop let's receive that come back here close all of this open Tab and come back to the settings where
(3:26:07) it is it's right up somewhere here in the components so this is the one we have setting click here and we have to receive it and cover in this video I don't want to extend this video too long because it's already more than an hour so in the next video we're going to start working on our setting component so let's move to the next video hey everyone welcome back to the fourth part of our a generator in the last video we have written all the functionality which connects our back end with the front end
(3:26:32) and we have built couple of components now we're going to start where we left in the last video so we can come back to the pages index and we're going to make couple of changes in our UI component so I made a couple of typo that's what we're going to fix it so we are importing the packages here we are importing the icon here we have all the components we have import and here we have the two function get all image Ai and we have the check off and here we have all the state variables we have taken which we have
(3:26:56) covered extensively in the last video so if you haven't watched make sure to watch that video then watch this one and here we have all the function we have built for filters and getting the data from our backand that's all looking good now the very first fix we have to do is WR up here so here I made a small typo in the spelling of absolute so make sure to fix this so instead of this you have to type AB abolute a b s o l u t that's the one change you have to do and you can come back here and here is going to
(3:27:23) be a self closing div this is going to be the self closing diff and that's what you have to do here and from here you have to Simply remove this div if I bring it back and if I'm going to bring this back you will see that we're not going to have proper alignment so let me reload the page and you can see the alignment is not perfect so we have to fix this simply close this one and we have to Simply commment this step so make sure to do this change and if you relo the page you will see that now it's
(3:27:51) perfectly aligned everything's working fine and this is the image which was not aligned perfectly because of the spelling mistake we made it so here instead of ABS o l you have to type the right spelling of absolute so if I bring this back and save it and reload the page you will see that the image is out of the input fied there it is so we have to Simply give the right spelling so this is the only two Chang you have to do simply remove this div and remove that so everything is looking good and now we have to do a couple of changes in the
(3:28:23) variable name in our utility function which connects our backend so we can come back here in the utils we can come back to the utils and here we have built all the function all the function which connects our back end so the very first change we going to do I hope some of you have noticed this so we can simply open this particular function and here we have to change the method so it's not going to be delete and you will encounter this problem you will commit this mistake when you're going to to do a little bit copy paste it's a normal if
(3:28:49) you are getting that you can see I'm also getting it so it's normal it's a part of development so all we have to do is to change with put because we have to update that so if you come back to the backend API in that we have to go to routers and that you will see that here we have the user and that's what we are targeting if I open this one in that we have this method call put have this method put and that's what we are calling it here so change this to put in capital that's the one change you have
(3:29:14) to do that's the first change you have to do once done with that save it and the rest will be fine now close this one and the next we have to check list delete so delete is fine we don't need to do any changes here this is absolutely great then we have to check this get single post this is also good we are getting all the data from a backend API based on the single post ID that's good and here we have this return and that's what we are returning in our back end and that's what we are calling
(3:29:39) here so it's perfect close this one now we can simply come back to the get user AI images and here we have to do the changes you can see the endpoint is not this we have to call the user endpoint instead of all we have to call user so this is fine here we have to make the changes so so we can come back here in the router in the post section there you will find we have this user like this is the one we have to call it so simply copy and that's what we have to call Simply copy and that's what we have to Simply replace this is
(3:30:10) the URL we got it which will give us all the post created by a user perfect we're done with that now we can simply come back here and we don't need to do any changes in this it's absolutely fine here we have this V2 model and here we have to do the changes so you can see we are checking the O controller and here you can see that I have called prompt V3 but it's a V2 so we can change this there is no problem in that but let's make it V2 and here we are taking this n let's change this first V2 and change this to V2 so this
(3:30:39) is the first change you have to do and this is fine we don't need to make any changes we need all of this data and you can see this is the extra variable we have actually we don't need this one so we can simply remove this one save it and the rest would be fine we are simply making the call to our back end and we are storing the data perfect that's the one change you have to do now you can simply close this one now let's come back to V3 and let's have a look in this so this is fine we are getting this all
(3:31:03) of that and then we are making the call so this is fine you don't need to do any changes in that then the next one we have is dislike post to open this one and in that we are making the call and absolutely fine don't need to make any changes come back to the like post we getting the post ID and simply passing the details to our data and the ID this is also good close this one here we have the check off we don't need to make any changes it's going to give us all the detail about the user and that's what we
(3:31:28) are returning at the end then we have this log out and this is fine keep it as it is and here we have to make the changes in the logging user so this is fine this is two information we getting from the front end for loging but we have this extra variable I have noticed let's remove this one and save it so this is the one change you have to do and the rest would be fine like this is fine perfect close this one come back to the register user and you can see we don't need to make any changes this is going to be exactly the same so make
(3:31:58) sure to do this update I hope you guys have understood that what exactly we have coded in the last video and how you can do this minor changes now we can come back to the index page and now we're going to start working ahead so if I reload the page you can see everything is working fine and here you can see everything is working fine the button is aligned we have the tab now we can start working on the other components so let's come back to the code and here you can see that this is what we have notice so
(3:32:21) let's start with the notic because this notice will contain the information about the two different models which user can select so that's what notice we have here so we can come back here close all of this open folder and we can go back to the component inside the component we have this particular one called notice and that's what we're going to start working on it so we can simply come back here make side by side and let's click on this tab you can see our notice component is opening perfectly now let's write the code so
(3:32:45) first we have to to import couple of things use State use effect then we can import our icons and that's coming from SBG file in that we need the take and arrow down so these are the two icons we need then we can simply come back here and we going to take couple of State variables so first is going to be our Open Notice by default will be false the second one we going to take is let's say active model this will keep the track of that which model is active currently so by default I will go with this V2 model so
(3:33:16) I'll say e V2 and you have to give the exact name and this is the exact name we going to use it for triggering different function based on the V2 model so this is what we have by default now we can take an array of models which we can keep in this particular variable AI model and we'll keep it as an array so first is going to be the same one simply copy and paste and we have to Simply copy the same thing and we're going to Simply give this will be V3 so we got this two model now we can come back here and let's take a variable
(3:33:45) this will be a a model and by default we'll have V2 perfect got it now we can come back here let's build a function which allow us to change the model so in that we're going to take the model as a input so let's come back here but first we'll simply call set AI models to be model and this model will come from the input field so we'll take this model and that's what we have to pass here then we have to set this model in our local storage so we can utilize in different pages so we're going to give this name
(3:34:17) active model and it's going to be a model so that's the key name active model and the value we're going to store in the model so that's the function we have now we have to Simply set this to active model to model and the last one is going to be the set Open Notice is going to be false because when the user will click it's going to open pop-up model and after that we have to Simply reload the page so let's call this window location reload and that's our function is ready after that we can
(3:34:45) simply come back here we'll take a use effect and we have to get the information from our local storage so what we can do we I want to run this function one time when the page will reload so here I have to do one thing I have to get the information from the local storage about the model so we'll say where value local storage get item and we have to Target the key so active model so I can know that which model is currently active after that I have to Simply check if value exist then I have to Simply set that in a AI model and
(3:35:17) this will be our set active model and that's the only thing so it's going to change the entire application based on the model and all the data now we want to start working on our jsx so we can come back here let's take a class it's going to have Flex width full Max width is going to be let's say 48 pixels then we'll have padding X4 padding left five and on the medium device we'll have padding X5 then we'll have a style it will have position going to be relative perfect inside that we going to
(3:35:53) take a dynamic data so we'll take this open notice if it's true then I want to display this component we'll take a div it will have a style let's call this display is going to be Flex Flex direction is going to be column we'll have min WID is going to be 238 492 pixel then we'll have top is going to be 0o we'll have bottom is going to be 0 pixel we'll have height is going to be 44 let's take it as a string so we'll take this 44 pixes 441 and then we'll have the margin is going to be 10
(3:36:42) pixel and 0 pixes then we can come back here we'll take this Min height is going to be 732 pixel we'll have Max height is going to be 753 pixels and we'll have Z index is going to be let's say Auto then we'll have position is going to be absolute because we have to change the alignment based on the different scen size so that's what we got it now inside the div we're going to take couple of more data so what I will do I'll simply come back here and I'll give this hey and I'm going to Simply check the click
(3:37:15) event so if if I click on this you can see our click event is working and the component is open so everything is working fine so what I will do I'll simply remove this one and now I can simply come back here let's take a div it will have a style let's call this box sizing is going to be border box then we'll have Max height 100% we'll have display Flex Flex Direction column outline none pointer event Auto that's what all the Styles we got it now we can come back here we'll take a dip it will have a class
(3:37:59) background zinc 800 padding one drop shadow medium border border zinc 700 rounded medium then we'll have a style let's provide the property so it's going to be position is going to be relative we'll have Flex 1 1 0% overflow is going to be Auto inside the div we can come here we'll take a div it will have a class let's call this select none inside that we'll have our Dynamic data so we have taken the two model and those data we have to rug and that data we have to render here so we'll take this AI Dash model we're
(3:38:46) going to run a loop and we'll call it model indic and it's going to be instant return and here we have to Simply build that GSX a div so we'll take a div let's close this one it will have a key let's call this model let's provide a on click function when the user we click we have to change that so we already built the function change model in that we can simply pass the model then we can assign the class let's call this Flex space X2 items Center padding X4 padding left 8 padding
(3:39:20) Y 2 and we'll have a cursor is going to be pointer on over effect we won't have a background color is zinc 700 and we'll have a round dead Tex is going to be small relative we'll have a focus on that we'll say outline is going to be none so these are the classes we have now we can add come back here inside the D we'll take a span and it will have the data the model and you can see we have the model now I can do more thing I can come here and I can take a dynamic block because I have to display that data so I can come back
(3:39:56) here I'll say if a model is equal to model then I can display the span let's close that one in that it will have a class called with six left zero and we'll have absolute got it and we can have it here and we have to display the tick that which one is active so everything is looking good and I can see the problem so here we have the issue so withd is going to be something big so let's change this to 600 pixels and I want to add one more class here let's call this one is medium margin left is
(3:40:28) going to be 48 pixs now I can come back here and here I can simply do one thing and we can come back here and we'll take a let's say div it will have a class we'll call this with full Flex Flex column item Center inside that we take a div it will have a class called with full padding X3 padding top three Flex space X1 item Center we'll have justy Center padding right 12 and there it is you can see the click event is working now we can simply come back here we'll have a button we'll say it will have a
(3:41:10) class called Flex cursor pointer select none on over effect background zinc 900 over effect background opacity is going to be 50 padding left three padding right three and we'll have a padding right Point 2.5 padding Y is going to be let's say two and we'll have items Center justify Center Space X 1.
(3:41:44) 5 and we'll have a rounded on Focus we'll say outline is going to be none text X small and we'll have text Zing 200 color and you can see the stylings are looking good right now you can see the empty space but all the stylings are applying so let's good now we can simply have a type it's going to be a button and here we can add on click function and based on this we have to Simply open the notice so we'll say if notice Open Notice is true then we have to make it false but set open notice to false but if it's false then we have to
(3:42:18) turn it to True perfect now we can simply display the text so we can display take the span and it will have a style let's call this P pointer events is going to be none inside that we can take this active model and there it is you can see the text is reflecting fine this looks good you can click and it will open the model but there is some problem in our popup model it's not displaying properly so I have to see what's went wrong now we can come back here and we can take a span it will have an aial attribute so aial hidden is
(3:42:49) going to be true and inside that we can take this arrow down icon so there it is the icon is looking good you can simply close open and you can click on this it will open the pop-up model but somehow it's not working so we have to see what exactly went wrong perfect now we can simply come back here and I can see the problem so what I will do is come back here and here we have to Simply provide the tick icon so come back in this AI model equal to model in that we can simp provide the tick icon so it will open the popup
(3:43:17) model and it's going to display that which one is currently active that's the one change you have to do provide that and the next one you have to do is here so you can see this is the problem this is the problem so you have to replace this with instant return so remove this and you can simply come back here and here you have to do the changes and save it and this will fix the issue and you can see I'm getting this warning because I have this semicolon and that's what I have to remove just remove this one and
(3:43:42) this will fix the issue and now it's working fine now the moment you will click it's going to open the popup model and you can see currently V3 is active but you can simply click on V2 and it will be active and it will read to the page so if you click on that you will see it's V2 active so the logic we have implemented the tick is everything is working fine so that's the entire code we have in the notice I hope you guys can understand that what exactly we have done so make sure to do this minor
(3:44:04) changes but the rest would be fine here you have to make it instant return and here you have to provide the tick and the rest would be fine this all looks good now we're going to start working on the next so come back to the index page and there we have done with this notice now we can simply come back here and we can start working on our button so where it is we have it so come back here and we can go back to the header and inside the header we have a lot of components before we start working on the button
(3:44:29) let's work on the header component because we have multiple component in that so we can come back here and you can see here we have this header logo that's fine and this is fine we don't need to do anything in here so here we have this icons and here we have the setting so that's what we have to work simply copy this one and that's what we're going to receive right up here let's receive the prop and I remember one thing before we start working on the setting we have to work on this get started you can see on
(3:44:57) the top we have so let's work on that first because we have two component in that and this setting component we have we are utilizing in this get start as well so let's work on this first so we can simply copy this and let's receive that in the prop so we can come back here and let's receive it we got it perfect now we can simply import couple of things from react is going to be use State and use effect we got it now we can simply come back here we have to Simply import the cookie because we have
(3:45:25) to get the cookie from the browser to check the authentication so we got it now we have to import the setting component this is going to be internal component which we going to utilize it so that's the setting component now we can come back here let's take a state variable this will be o by default it will be false the second one is going to be our another state variable this will be called open settings so when the usably click on the get started it will open the setting component so by default it will be false then we can come back
(3:45:53) here here we have to take this use effect and we have to get the data so come back here first we have to get the cookie so we have to get the cookie which is store in the browser we'll say store cookie value we'll say cookie. getet and we can give the key pair we have given which is the token we'll say if store cookie value is available then we have to Simply set set this to or to True else we can make it to false simple logic I hope you guys have understood we are getting the cookie and doing the
(3:46:23) authentication that's ready now we can simply come here and we can start working on the GSX so first we have to convert it into a fragment and we have to remove the text inside that we're going to T taking this Dynamic block because it's going to have two components so first we have to say if Au is true then we have to render this otherwise we have to render this simple logic now let's work on the jsx so we'll take a div it will have a class let's call this on a small screen we want to say
(3:46:51) hidden it will be absolute with full Flex item Center justify and top two right two we got all the classes now we can simply come back here we'll take a button it will have on click function and we have this called open setting if it's true then we have to make it false and if it's it's false then we have to make it true simple logic we got it now here we have to add the classes so it will be height 7 width 7even rounded full text Excel and it will have a median we'll say text small background is going to be
(3:47:34) zinc 800 border border zinc 700 and we'll have a drop shadow Flex item C Center we'll have justify Center we'll have opacity let's call 800 and we'll have on over effect we want to have opacity turn to be 100 so we got all of these classes looks good now we can simply provide the type is going to be a button and inside that we can display the G because that's what we going to display we're going to display the first character of the user name which is the G we got it now we can start working on
(3:48:17) the next one so this looks fine what we can do we can simply come back here we'll take this portion copy and paste here we got it now we have to do the couple of changes so first thing we have to do is this looks good and this particular is good we don't to make any changes we have to make the changes in the button so convert it to a anchor and we have to remove this one and we have to redir the user to the loging page if they're not logging so we can say/ login and we have to change the classes so
(3:48:41) simply remove all of this and we can add Flex items Center justify Center Height eight rounded medium opacity 90 over fig we want to have brightness 110 panning X4 we'll have text extra small on the medium device we'll say text is going to be small background is going to be gradient two and we'll have from Indigo 800 00 we'll have VI Inigo is going to be our 800 and we'll have two indigo is going to be 600 and we'll have a drop shadow we'll have font medium and we'll have white space is
(3:49:35) going to be no wrap perfect you can see that blue with the text it looks good perfectly you can click and you will redirect to the login page so that's what absolutely fine because right now we are not authenticated that's why this particular button is reflecting so we can simply do the changes in the text this looks good now we can simply remove this to get started get started and there it is perfect and that's the only thing we have to do here everything's looking good if we find that we need to add
(3:50:06) couple of more things then definitely we come back here and we can do that so let's make on the big screen to see you can see that's how it's going to look reload the page and things are looking good to me now we can simply make it here uh let's expand on my different screen sizes so it's good come back to the code so we're done with this close this one now we going to start working on our setting component because this setting component is also going to be available in the get started component
(3:50:33) and the nabar components in two places so that's what we have to work so we can come back here and we have the button so before we work on that let's do one thing we can simply come back here and we have the header here so let's work on the setting first then we can start working on the button come back here let's make it side by side so we can see what exactly we are working on so let's click on this make it here so that's how it will look now we can start working on the setting component so first we have to import
(3:51:02) couple of thing so we have to import the utils and in that we have to Simply import our log out function because in that we'll have the function which user can click and they can log out we have the log out function then we have to Simply import let's import our csb icons let's call this ISO log in out we got it now we can come back here and here we can start working on the jsx straight away because we already have the function ready so inside the div we can take a div it will have a class let's call this
(3:51:35) class with 64 background zinc 800 Z index 5 fixed ring zero top five rounded medium drop shadow shadow Tex small Flex Flex column items start overflow hidden border border Dash zinc 700 we'll have a slider drop and fade perfect we have all the classes applied on the div and we can add the divider so we'll say divide Y and we'll have divide Z 700 and we'll have a style let's call this margin right is going to be one ram and we'll have a margin top is going to be two Ram perfect we got all of the
(3:52:39) classes and our custom style inside the div well take a div it will have a class let's call this padding X is going to be uh four padding Y is going to be two background zinc going to be 700 we'll have a background opacity we'll have a background opacity is going to be 50 with full inside the DI we'll take a DI it will have a class called Flex items Center inside that will take a DI it will have a class called rounded full height 7 Flex shrink zero we have a width seven Flex item Center justify center background zinc
(3:53:22) 800 margin right two inside that we'll take a P tag and it will have our data about the user information so we'll take this user active user in that we can display the user name and we have to slice it down and we have to display the first character of the user so we'll take this 0 to one and I have to convert it to uppercase so I hope you guys guys have watched the demo video in which I have explained that what exactly we are building so this is what we have the name perfect now if you come back here
(3:53:52) so what I will do I will simply turn this to false so here I'm in the head I will simply give this one and save it and if I come back browser you can see it's reflecting fine if I click I it will open the pop-up model so now I can come back here and I can simply come here and I can simply see all the things are looking good here in the header component perfect close this one come back to the get started and here we have have the exactly the same thing if I simply provide this it's also going to be visible in our mobile device so here
(3:54:21) you can see it's reflecting that g so we can come back here in the setting now we can simply go ahead and start working so we'll take a span we'll take a class let's call this font medium inside that we'll take our Dynamic data so we'll take this active user email we got it now we can simply come back here and we'll take a anchor and that we have to take this custom styling so we'll take this display is going to be Flex we'll have a justify content content is going to be Center
(3:54:55) we'll have align items going to be Center and we can come back here and we can have the regular classes so let's call this with is going to be full padding X4 padding Y is going to be two and on over effect we want to have background Zen 7 and flex justify Center well come back here inside that we'll take our text we'll say create credit left and we can give this stml space tag and we can display our icon and then we have to Simply copy and paste here and display the actual credit which user
(3:55:29) have and that data we have here in the active user credit perfect we got it now simply copy and that's what we have to Simply replicate here and all we have to do is to Simply remove this one and we can simply remove this data because we don't need this data simply provide this HF and we want to redirect the user to the account page so he or she can buy that now we can simply remove and we can call it Buy credit perfect now we can simply come back here we'll take a button it will have a onclick function and we'll simply
(3:56:02) add a log out function so we'll take this log out and it will have the class so let's call this with full padding X4 padding Y2 on over effect we want to change the background color to zinc 700 inside that we can display call sign out perfect if I make on the big screen you can see that's how it's going to look so I'll come back here reload the page if I come back to the code and here I am in the setting and if you can come back to the header section go to the header and I can simply bring this back so let's
(3:56:33) give this to exclamation and here we are and here we are having our setting component you can see looks fine if I turn this on and save it come back to the browser it's reflecting that se Circle but the data is not reflecting because there is no user we have created if I click it will open the component you can see all of the data all of these details are looking fine perfect you can close it you can open it you can come back here and if you want to check the data is reflecting you can simply do that you can simply come back here and
(3:57:04) you can provide this G and you will see it will reflect fine so when the user will create their account they can able to find their details right up here so it's working absolutely great now we can come back here and let's remove this one and save it so this is the setting component looks good now close this one now we can simply come back here this is good in the desktop mode now we have to do the same thing in the in the mobile device so I first I have to change this one remove this one save it and just
(3:57:31) keep it as it is close this one now we can simply come back here in the get started component and here you will see that here we have this one so we have taken this explanation mark now we already have this setting component and that's what we have to call here so it will also visible on a mobile device so we'll say if it's true then we have to display it so we can simply send the user information and perfect save it now it will work fine so come back to the browser and just make it side by side so
(3:57:57) we can see how it looks on a mobile bring it back and you can see it's look great if you click on it it will open the model and you can find the details click open working fine so we are done with this component as well let's remove this one for the time being because when we going to bring the loging functionality it will automatically going to trigger based on the token perfect now we can simply come back here and close come here minimize this one and we can simply come back here and we are done with this we're
(3:58:30) done with this this will also look good now we have to work on the button components so this button component we have to work so let's make it side by side now we can simply come back to the button component so it's in the component button and we have to receive the prop so it's going to have multiple props so first is going to be the icon second is going to be the function and then going to go name and it will have the category let's convert it into a button let's provide an on click function in that we can simply pass the
(3:58:57) handle click let's assign a class Let's uh it's going to be a dynamic class because when on the click event based on the active category we have to change the classes of the button so first is going to be let's say text extra small rounded medium we'll have a on a small screen we'll say text is going to be small we'll have a group margin top is going to four white space is going to be a no wrap Flex One Flex will have a selected select none cursor pointer you can see looks beautiful we
(3:59:32) have to Simply change the brightness to be 110 and we'll have a background gradient is going to be two top and we'll have a with fit content justify content items Center padding x 2.5 and we'll have a drop shadow and we'll have our Dynamic class so we'll say if category is equal to name then we can simply apply this class so we'll say from Indigo 900 viia indigo this will be 900 we'll have a two Indigo 800 we'll have padding 2.
(4:00:24) 5 we'll have active is going to be scale 95 we'll have a transation all else we have to apply these classes so this will be form zinc 700 we have a viia zinc is going to be our 700 we'll have a two Z in 700 padding Y is going to be two so we have all this Dynamic classes looks good you can see it's automatically apply now we have to Simply display the icon and the name so we can simply come back take the icon and we have to give the HTML Space Tag and then we can simply provide the name copy and paste here and then we have to give the name and there it is
(4:01:04) you can see the icons and the names are reflecting fine so you can click and they can select different category perfect absolutely great click it will open they can select the different models button is also looking good now we can come back to the index space close this one so we done with the button as well and now we have done with the notice as well button is also done now we can come back here so we right now we don't have data about the images so we cannot work on this we can work but we when we'll have the actual data
(4:01:35) then we'll start working on it and we have this two component so we'll start working later first we have to work on the important component so we can come back here now we can go back to the component inside the global we have this called Au so we have to check the authentication we have to allow user to log in and create their account then we can able to do the validation so we can come back to the O and that's what we're going to work on it so before we start working on it we have to set this in our
(4:01:59) app. GSP so we can come back to the pages and here we have to write the code because there right here in this page we going to attach the O function so we can come back here and we have to import a lot of things so we can come back here let's import react let's call import react in that we can take this use State and use effect then we have to Simply import the header tag because we have to display the title and the low Feb icon of our application then we have to Simply import our cookie because based
(4:02:31) on that we have to do the validation then we can come back here and we have to Simply import the O component which is coming from the component we got it now we can simply come back here and take the straight variable so first is going to be let's call Au it will be Au by default it will be true because we have to check whether the user is log in so it's going to be true so let's make it this small a then we can reload the page come back here we can take this use effect and in that we have to Simply make a call and check so
(4:03:02) first we have to check the cookie so we can say store cookie value get cookie which is the token we'll say if it's available and based on that we have to set this to false otherwise we have to set it to true if cookie is available then simply make it false otherwise make it true we got it perfect and that's the only thing we have to do now we can simply come back here and here we have to Simply import the header tag in that have to display the title and the metadata so first is going to be the title you can call whatever you want
(4:03:33) I will call AI image Art and I have to give my metadata so first is going to be the name so I'll call it description and the second one is going to be content and here you can give a brief description about your application so AI image Art generator powered by the blockchain coder perfect we got our metadata now we can simply come back here and we can provide the fave icon so we already have this icon in our file asset file so I'll access from there assets SL AI logo Ai logo.
(4:04:09) png and this will be our call short cut icon perfect so we got our metadata in the head attack now we can simply come back here and we can build a dynamic block so if o is true then we have to display the component so we'll display that and that's the only thing you have to do here everything's looking good if I come back and make on the big screen you will see that this data is available so the name is change AI image Art and the logo is also reflecting here you can see the logo is also reflecting perfect the tabs are also working
(4:04:36) fine now we can come back here and start working on the o component so come back here go back to the component Global and we have the o component so in that we have to do a lot of work because in this we going to have login as well as sign up so first we have to import couple of things so let's make it side by side before we actually write the code looks good you can see the O component is visible on the top and that's what we're going to work on it so first thing we have to Simply import couple of thing so
(4:05:03) it's going to be use State then we have to Simply import the icon it will be called login log we'll have ISO login outline inside that we can then we have to import so first component is going to be the input field the second one is going to be the loader so this are the two component we're going to use it then we can come back here we have to Simply import the function we have built and that we going to take two things register user and we'll have a login user and that's what we have now we can start working on the
(4:05:41) state variable so let's take couple of State variable so first one is going to be the all let's change this to true then we can come back here let's take the another one which is for the loader by default will be false the third one we going to have is for error so when there is any problem will occur that's the error message we have to display so we have to Simply remove it and empty then we can come back here and this will be called login and in that we're going to have the details about the login like email
(4:06:06) and password so it going to be an object so we call it email this will be password and this is the exact name we are giving in our function and receiving it okay then we can come back here we'll take this for sign up we say sign up it will object we will take name email password and we'll have a confirm password perfect we got all of this we got the component the functions State variables we have taken now we can start working on the function so we can come back here let's write the fun function so this will be called
(4:06:40) calling register User it's going to be ning fun function it will receive the sign up data it will come as a form of object then we have to Simply take this try and catch if anything goes wrong we are returning the error so that's what we have to receive so first thing we can simply console log out the entire error object we can come back here and we can take this loader to true then we have to make a call to our API we have build already so we'll take this response await register user and in that we have
(4:07:07) to Simply pass the data called sign up perfect we're going to make the API call and all the details we'll have in the response so we can come back here we'll say if response is there then we can simply say set loader to false we'll say set error is going to be the response perfect got it I hope you guys have understood the logic and simply copy and paste here and that's what we can simply access the error and we can say data error perfect that's the entire function for register user got it now simply copy and that's
(4:07:50) what we have to paste here and this is going to be exactly the same for the login we have to change the data this will be login user this will be login copy and paste here and the rest would be fine we don't need to make any changes perfect we got the login and we got the register now we have to work on the jsx so first we have to Simply take this fragment inside that we're going to Simply take the div it will have a class let's call this fixed insert zero background zinc 900 we have background opacity is going to be
(4:08:22) 40 Z index 5 you can see the apply perfectly then we'll have our inline style we'll call this pointer events is going to be Auto so it's looking good now we can simply come back here we'll take a d it will have a class called background zinc 800 we'll have items Center fix Shadow Excel rounded 2 XEL Z index 50 padding x 8 padding Y is going to be let's say 8 text small we'll have border border zinc 700 it will have a inline styling let's call this one top is going to be 50% we have a transform is going
(4:09:18) to be translate minus 50% minus 50% left is going to be 50% and we're going to have Max width is going to be let's say 330 pixels perfect you can see the box look good now we can come back here we'll take this width is going to be 100 pixels and Ma x height is going to be let's say 85 VH so there is a problem in the model why it's not in the middle okay first work on it we'll see that what exactly went wrong now we can come back here we'll take a div it will have another div inside the div it will have
(4:09:59) a class Flex Flex call Tex Zing 200 Tex Center item Center inside that we'll take our icon there it is the login logo icon we got it now we can simply come back here we'll take this Dynamic data we'll say if Au is true then I want to display this otherwise this perfect this is our Dynamic block now we can simply start working on it so we'll take a div let's take a div close this one and let's turn this let have a class style let's call this one margin top is going to be one ram then we can come back and inside the
(4:10:44) div we'll take a input this is going to be our input component in that we have to send the props so first is going to be the placeholder this will call email address then we have to send the type is going to be email this will be handle click and we already have the functions will take set login login and then we have to Simply Target the email and we have to Simply update that e. target.
(4:11:15) value pretty simple perfect let's change this okay my bad so simply remove this one save it and you can see we got this input now looks good come back here and we got the handle click now we can simply copy and paste here and this will be going to be a password this will be text and here we have to change this to password and here we have to add a custom style so we'll say style CSS we'll have a one ram we'll have a button we'll take on click and we already build the function call calling login user and that we have to
(4:11:52) Simply pass the data so we'll say class is going to be over effect we have brightness 110 background gradient to top we'll have from Ino 800 VI a in Deo we'll have 800 two indgo is going to be 700 we'll have a border we'll have a border IND Diego and that's going to be 800 we'll have a padding X is going to be four padding Y is going to be 1.
(4:12:27) 5 and we'll have a rounded is going to be large we'll have a shadow and we'll have a height is going to be 9 and width is going to be 64 we'll have a drop shadow we'll have Flex item centers we'll have a justify G content and margin top is going to be three so it looks pretty good we got our button in that we can display the text so we can come back here we'll say log and then we can display the icons we'll say if loader is true then we have to display the loader component so it will display the loader
(4:13:02) when the user will click on the login button perfect we got it you can see it's not perfectly aligned so there is a problem in the alignment so we can come back here in the code and I can see the problem is happening here so this is fine okay this is this is the problem we have make sure to close this one okay close this one I hope you guys have noticed it and here is the another problem we have to Simply remove this L from the bit then the vid will apply properly so make sure to do these two changes save it now you can come back to
(4:13:27) the and you can see reload the page and it's perfectly align the center let's bring it side by side and look good so now it's in the middle so our login is done now we have to work on the next statement so what I will do is it's going to be quite similar so what we'll do that when the user will provide the wrong condition I have to display the error message so let's bring write that so we'll take this if error exist then we have to Simply display that so we'll take a p and it will have a style we'll say color
(4:13:58) is going to be red and it will have a padding top is going to be5 ram and here it is see now if I type this notice you can see the red and it will display that so it's also looking good that's the one remove this one save it now I can take one more so I can come back take a p it will have a style and this will be margin top is going to be one ram we'll have a display Flex we'll have a justify content Center we'll have a align item and this will be Gap is going to be 1.5 RAM and we'll have a cursor is going
(4:14:41) to be a pointer so we have to display the the sign up button so user can click and it will open the sign up component so this looks good now I can simply come back here it will have on click function so we'll take this set o is going to be false if if it's false it will open the sign up but if it's true it will open the login here we can say let's call it sign up and we'll display our icon Perfect by default it will open login but user can click and they can open the sign component so we are done with
(4:15:15) this now we can simply come back here we'll take a div let's take a style it will have a margin top is going to be one ram and we have this component so I guess I need couple of things so let's do one thing let's bring it back you can see now the sign up component is opening and we need couple of things so we can simply copy this one and that's let's copy this two and that's what we can simply paste here so we got the two component and all we have to do is to change it so this will be the name this
(4:15:53) will be text and here we have to okay sign up and this will be name copy and change here and this will be email address and here we have to say email you got it and this will be email now we need two more for password and confirm password so simply copy this one and paste here and here we have to change the password so it will be password and this will be password and this will be text simply copy this one and paste here and this one is going to be confirm password so we'll say confirm password and here we have to say confirm
(4:16:35) password save it we got it now looks good we got all the four component and we need the button as well so simply copy this one copy this still here edor component as well and that's what we can simply paste here got it we got that and we need this so simply change the function this will be called register user we have to pass the sign up details and this is fine and here we have the error component now we can simply come back here and copy this one as well and display here there it is perfect and this will be login
(4:17:14) and the rest will be fine now we can simply do and check one more time everything's looking good we have no issue so this is what we have and this one is going to be a self closing div so let's close this one and you can come back all the way down and from here we have to remove one dip so just remove this one save it and perfect so that's the only thing we have to do let's remove this one and here we got it now we can simply come back here and here we have this so let's change this to true and if you click it will open sign
(4:17:51) up and login perfect it's getting switched between the component now I can simply come back here and here we have the placeholder simply copy that one and that's what we can receive in the input fill so let's receive the placeholder then we have the handle change now we can come back here convert it to a input and remove this one then let's see the data so we'll have a style is going to be let's say margin top and in that we can add the custom style so we can say let's receive that we'll say style CSS and that's what
(4:18:26) we can simply pass here save it if you come back here this is what we are providing simply copy and that's what we can receive and change here then we can come here we'll add a placeholder going to be a place holder let's add a type is going to be a type and that's also what we have to receive so let's receive here we got the type now we can come back here and let's add a classes so we'll say with 64 padding X3 background zinc 700 focus is going to be outline none we'll have Focus ring one we'll have Focus ring
(4:19:05) Indigo 600 we'll have a rounded leg large border border zinc 600 on over effect we have the brightness let's call this brightness 110 got it look good but we have to provide the padding as well so come back here let's add a padding here so we'll say padding is going to be Y 2 and there it is perfect now you can click and you can go back to the different components for the login and the signups looks good now we can come back here and we can attach the function so we'll say on change we have the function we'll say
(4:19:42) hand change perfect so we are done with this we are done with this let's have a look one more time and here we have the login so let's change this to Let's uh this is what we have login and sign up so I can come back here this is where in the register user I have to change this to sign sign up so they can simply go to different component you can see it's changing if it's loging then it will show sign up but if it's sign up then it will show login perfect working fine now we can come back here and this is good we don't need
(4:20:27) to make any changes everything is looking good and now we are ready to test this out we are ready to test this out so we can make it on the big screen and let's test our login functionality we have already built so let's reload the page and let's try to provide some data so if I paste this and I paste this random and click click on this login is going to throw me this error that user not found means it's working absolutely fine it's working with our validation check because we haven't created account
(4:20:52) and we are trying to log in with a invalid data so it's working the error message now reload the page come back to the sign up and let's try to create an account so I'll give this data and I can simply click on the sign up it will throw me this error that data is missing it's also working fine perfect reload the page now we can simply come back to the signup and let's provide a real data so we'll take this uh we can simply call this the blockchain coders and we can give the email ID so this is the email ID for the
(4:21:20) blockchain Cod if you have any question you can simply ask me right up here then we can give a password 1 2 3 4 5 1 2 3 4 5 one of the strongest password and click on the sign up and here you can see it say data missing why but we have provided all of these details let's do the console log and check why we are getting this error and come back to the code and let's try to Simply console log out this console.
(4:21:47) log that's what I have I can come back here and let's drip the data and you can see the data is not updating okay the data is not there it's still empty so we have made some mistake in the update function so come back here and this is what we have is the sign up so I have to change the spelling as well I made a wrong spelling so come back here and I can see the problem okay here is is the problem so it's sign up is this this one is fine but here we have to call this a set sign up so I can come back here and I can simply copy I hope you guys have noticed
(4:22:23) this you have to be little attentive and that's what you have to change in all the four places select all and simply change so we have changed that perfect now we can simply come back here and here is the spelling mistake so I can simply get Rectify this one it's a sign up copy and this looks good no need to do any changes here I can simply come back here and this one is also wrong simply change it perfect save it now you can see everything's looking good now let's give the data uh let's give the
(4:22:59) data all of this data and perfectly we are getting all of this data is getting updated absolutely now you can reload the page and let's test this out now let's come back to the signup and let's give the details so this time I called the blockchain coder then we can give the email the blockchain coders gmail.
(4:23:24) com 1 2 3 4 5 1 2 3 4 5 and sign up and you can see our load compan is opening but nothing is happening why again this weird behavior I'm getting let's come back here and you can see there is no data available but all the logic is looking good we have done all the updates so come back here and we have to do a little bit debugging so so we can come back here so this is fine this is the function we are calling it and we are getting all of this data in this sign up and that's what we are passing here if I come back to the function if I go to the
(4:23:52) utils there you will find that if anything goes wrong it's going to throw the error message but the error message is also not getting so what is the problem we are having we are not getting the error message as well as any response so we can come back to the utils you can see this is the function we have and we are providing this deconstructing it and then we are simply passing in our API and is taking all of this data at the end is going to Simply give us the response or it's going to Simply reload the page if there is a successful
(4:24:22) account creation that's good this is fine there's no problem in that um let's open our terminal and you can see that I'm getting this error musz that user is not found so right now we are in the development and when you will get an error in a development you have to Simply save it to start the server so you can see somehow my server got stuck so I have to Simply Save it save the file to restart the server if I save it you can see it will restart the server but when you will deploy your application on online the hosting
(4:24:56) provider will automatically restart your server whenever any problem will happen in your application so you don't need to worry about it so that's what you have to do restart your server simply ignore this warning because we are using some of the old version packages not the updated one and currently node version is in the test phase so that's why we are getting this simply ignore this warnings looks good our server is looking fine there is no problem in that now we can simply reload the page and
(4:25:20) let's try to test one more time so what I will do is I'll make on the big screen and I can simply come back here give this credential and give the this text the blockchain coder give all of this details and simply click on the sign up and you can see we are getting all of this data and here I'm getting this that user on email already exists okay so you can see in the last API call I guess we have created the account and that's the it I'm getting here so what I will do is this looks fine there's no problem in this it's
(4:25:55) Shing that the user is already exist so come back to the database and you can see this is the database I have open and if I come back to the collection you will find that all the accounts we have created so if I come back to the user you will see that the function we have buil is also working fine Absol absolutely it's already working fine you can see it's already there in the two users we have created so the last user which we made the request is already got created you can see the email and the username so our function is working
(4:26:26) absolutely fine so let's delete this two user and let's try to recreate one more time so the function we have built for the backend API is working absolutely fine maybe in the front end code I'm just doing something wrong that's what I have to spot here so this is fine let's click here console log out the response to check that what response we are getting back and I can simply copy and that's what I can do with the data as well so I can simply let's do one thing copy this portion and let's console log
(4:26:54) out here so we can see what data exactly we are providing after deconstructing so simply remove this one now let's reload the page make sure to reload the page and save your file so it will restart the server now let's give the name so I'll say doot this will be the email ID let's call this coder and it will take the gmail.
(4:27:20) com password and we'll have our regular password and click on the sign up and here you can see our account has got created successfully we got a success response okay my bad my bad my bad so this is good all the data is got back and the problem we have in the status code you can see it's give us status code 2011 if you can see once you will create account the cookie will be available right up here in the browser and that's what we going to access if I come back here if I reload the page if I reload the page click on this it's going
(4:27:48) to give you the details about the user we have created just now so this looks good absolutely perfect this is the email let's try to log in I'll say and give the password so once you create account you have to login because that's the double authentication we have used let's click on this login and it's going to Simply login you can see we have created account successfully perfect you can see by default we are providing three credit and that's what we are rendering you can see the name is also reflecting fine D
(4:28:14) is reflecting because we are taking the first character of the user if I click on this you can able to find the name email and the credit left so our account creation is working fine I can simply log out and can relog in let's give me the password log in and I'm logged into the application so our account creation is working absolutely fine there is no problem in that you can click and it's also working good on the mobile device now we can simply close this one come back to the code and come back here and
(4:28:43) here we have this input Clos this one close this one close this one close this one come back here in the loader and let's work on this loader before we actually test that why it's not reloading the page after the account creation so let's work on this quickly it's going to be a three to four lines of code so what I can do I can simply come back take a class and let's call this three body copy this one inside that we're going to take a three Dev it will have dot dot dot and simply replicate it three
(4:29:12) times perfect and save it got it now it will display our loader so reload the page let's quickly log in so I'll simply come back here copy the email and the password I'll give it 1 2 3 4 and click on this login and you can see the Lo the loader is working fine now I can click on this and I'm logged in successfully and I can log out now I can simply paste I can give one more password wrong it will say wrong credential so the login authentication is working fine now we have to work on the signup so L the page
(4:29:38) and come back to the signup and let's give the name give the email then we can give the password and we can give the confirm password and click on this sign up so we have made the request still nothing happening let's do the inspect element and let's come back to the console we are getting the data you can see all the data is reflecting there if I come back to the database and if I do the refresh you will see that okay the account is created successfully but why the page is not reloading that's the weird thing I'm
(4:30:11) Happening Here so it's working fine now we can come back here you can see our server got stopped so simply save it one more time to restart so I can come back to the files API section like this one and save it so this is the starting file of our application you have to come back to the index and you have to Simply Save it and our application got started reload the page and there it is so what I will do I'll simply delete the user quickly to test one more time so the login is working absolutely okay fine
(4:30:43) somehow the account creation is happening but the P page is not reloading perfectly so let's come back here sign up let's create one more account I'll say let's call this gym this will be gy at theate gmail.com 1 2 3 4 and this will be let's click on this sign up okay okay my bad my bad it's 2011 status code the account creation is happening but it status code is 2011 and I have used 200 I guess that's why the page reload is not happening here so if I come back here and this is the one we have okay this is
(4:31:19) the one and here is the problem you can see response. status is 200 but it's 2011 now it will work fine so you know sometime it's become very mindboggling error if I reload the page and everything would be working fine I can simply give the email and I can pass it if I call it it will say did I'm missing come back to the sign up and let's create and let's login with the account we have created so I can say JY and this will be 1 2 3 4 and login and we have logged on so you can see our account got created and we got the
(4:31:51) credit perfectly now let's come back to the sign up let's create another new account so we'll say time time at.com we'll have a password we'll have a password we'll sign up and perfectly we are successfully login our page reload and now we have to Simply log in after creating account so we'll say time and gmail.
(4:32:15) com 1 2 3 4 5 click on login and there it is we are back in our application perfectly T is reflecting so every single thing is working fine I hope you guys have done the changes now simply close this one done with the loader now we can simply click on this and you can see it's reflecting the data about the user and all of this looks great and we can simply click and go to the next now we have all of this component which we have to work so there's a lot of component we have to work so this is the thing we have now we're going to Simply come back here and we
(4:32:49) can come back to the index page and before we start working on the other component let's set up the structure for history page and like page because these is going to be a very small pages so what I will do these Pages we going to do later when we going to create the images so what I will do I'll simply say select all because this is what I'm going to Simply replicate select all and that's what we have to Simply p paste here in the history file so that's fine copy this one come back here in the
(4:33:18) history and simply select and remove and paste change this to history and simply copy this one and that's what we have to Simply change here as well this will be history simplye select reload the page and click on the history and you will be having the same thing in the history page Perfect come back here simply select and that's what we'll have in the like page and change this to likes copy and that what we have to change here to likes perfectly now we have to do a lot of changes the structure is going to be the
(4:33:51) same we have to change in the component and the variable type so we can come back here and let's start with the history first this is what we have so first thing we have to Simply remove couple of packages which we don't need it remove this XCS and we have to remove this router then we have to remove the SBG icon so this remove this one and we have to remove the filter and we have to remove this like uh like magic and heart then I have to remove this like this heart we are not using on this let's
(4:34:21) remove this image we using the heart but not the image so this looks fine let's remove this as well this four we are using and remove this one remove this one remove this one and we have all of this now here we have the function so instead of getting the we have to get the user function user so we can have that already so we can come back here and we can get this user all user AI images and we have this import now we have to change and remove couple of State variables we don't need this query and we have to Simply remove
(4:34:59) this one we're going to have the loader I and we going to have it so what else we need to remove so this is going to be fine this is going to be remove it just remove this as well and this is going to be okay we don't need to have actually we need the search bar in the History Section as well so just keep it and here we have this two which is going to be there because we have to still filter and store based on the size we need don't need this credit so remove this one and we need this function change
(4:35:27) category this is going to be exactly the same and here we have the function so here we going to do a little bit changes so this is what we have here now what I will do is I can simply come back here and here we have this function that's what we have to call instead of all images we have to get the user images we got it and here we have to get the cookie from the browser because only authenticated user can have the detail so we'll take this which is coming from cookie get token and then we have to Simply build if statement so we'll say
(4:35:59) if it's there and we can validate it so we can simply call our check o function and we have to store this data about the user in our active State user and then we have to Simply copy all of this code and that's what we have to put inside this so simply cut and paste here we got this we got all of this now we have to put more so please select this one and that's what we can simply paste here as well then we need this model as well so like this is good we can simply select all of this and that's what we can paste here
(4:36:35) actually we don't need the cookie because we have taken on the top so simply select and remove this one perfect and this is will be fine and we need the search so this function is going to be here just keep it as it is and this is the render which we going to utilize it to render it perfect so we come back to the j6 and we need this header we're going to have the same class and here we're going to Simply have this perfect and we're going to have this div exactly the same here we have the logo actually we don't need the
(4:37:06) logo we need the text so let's do one thing we can simply remove this and call his history this will be called history and we have to add the classes so let's remove this one and let's add couple of classes this will be called text 5 XL on a small screen we'll say text 6 XL on the medium device we'll say text 7 XL and on the margin bottom eight fonts logo we'll have a font bold margin top is going to be zero text Center so we got all of these classes looks good now we can come back here in
(4:37:40) the div and we have to do a little bit changes here so this looks fine so this will be call 500 and let's remove this one and let's remove this as well and the rest should be fine this is what we have we need the function on the div so don't need to make any changes here then we can come back to the search input fill so we need the input fill so just keep it as it is we don't need to remove anything from here but let's have a quick check here so this looks good now we have this button so actually
(4:38:11) we don't need this button so remove that one because going to be only the input F so remove that one now we can come back here and here you can see we have this Flex so let's change this to uh margin bottom isal to8 we have this still change this one and this will be called search and the rest will be fine and here we have to Simply remove this one and add the classes we'll say withd 32 small we'll say withd 36 Flex item centers text Xcel justify Center text Center Height nine rounded full over effect will have
(4:38:57) brighness 110 background opacity zero Shadow small margin top four background gradient top two from Indigo 100 VI Indigo 900 we'll say two Indigo 800 and that's the button we have looks good now we can come back here in the next section and I guess we have to do the changes here as well so we can come back here and actually we don't need this section remove this one and we have to close this one and we have to remove this section as well so let's bring it back let's remove this first remove that and we have to remove this
(4:39:40) div as well so remove select and remove it and save it so we going to have the buttons perfect and is there any changes we have to do actually we don't need this as well so remove this as well perfect and here I have to build a dynamic block as well because I have to check for the length of the images so I can simply come back here let's come back here and let's take a dynamic block we'll say all image there is a length means images are available for the user then I want to Simply display the button
(4:40:10) component so we need all of this simply cut and paste here we got all of the button and let's come back here and let's write the else it's going to be nothing perfect the category category is going to be the same so let's come back to this and come back here we'll take a dip and it's going to be uh just a styling one so we'll say Marin top is going to be two and we'll have a space perfect okay we already have this Sol let's remove this one and we already have this entire section so we need all
(4:40:45) this entire section simply select this one cut this and that's what we're going to utilize it here so let's take a call it category and let's paste this one it's going to be exactly the same because we have to display all the images created by the user and here we have this grid perfect and I just want to remove the Gap let's remove this one and this is going to be exactly the same perfect okay here we have to write and display a message if there is no images created by the users we'll take a
(4:41:20) div let's add a class text Center ping X10 text small margin top is going to four text zinc will'll say 400 inside that we'll take a p it will say your camera role is empty and we have to redirect the user to the create page so we'll say aperture and we'll have a class that's call this generate an image okay simply select and cut and it will be underline and we can display the text here perfect now we can come back here the single component is going to be there and actually we don't need this
(4:42:01) remove this one perfect so that's the entire code for our history let's come back here and just reload the page you can see things are looking good but the alignment of this are not in perfectly aligned so we have to check what we made so we can come back here and I can see this is fine this is good we don't need to make any changes here so we can come back to the search and input and here I guess we have to make the changes so what we can do is we have to take a div so we can simply come back here here we have the
(4:42:32) extra div so this one is the extra one I guess close this one and let's remove this one remove this and remove this save it we got it now we can simply we got that now we can simply come back here and we'll take a DI close this one and from here we have to Simply remove it one diff I hope you guys have understood what we have done so simply remove One D and close and reload the page and there it is you can see perfectly aligned let's check the responsiveness is looks great perfect so we have the text and
(4:43:10) all the things are looking great great so we're done with this entire page I hope you guys are follow along with me make sure to rewatch the video If you haven't understood properly so our history page is done simply select all copy and that's what we're going to Simply paste in our like so let's select and remove and paste and change this to likes and simply copy and that's what we can simply paste here likes and here we have to do a little bit changes so we can simply come back to the you can see
(4:43:42) we have the exact thing we're in the like page now we can simply do the changes so what I will do is I can simply come back here and here I can change the text so this will be called likes and we don't need this actually we need button not the anchor let's take a div and let's change this one and here we can simply remove this this will be 7even and here we can say margin bottom is going to be 12 font logo font bolt Mar in top and this will be likes perfect this is good we not going to have the filter so this is what we have
(4:44:22) so close this one and we have to remove this one because we don't need this we have to display only the images we don't need to have the filter we don't need to have the buttons this is fine we are getting this copy this one and that's what we have to paste here perfect and do we need the button yes we need the button and the card is looks fine and here we can change the text so let's select this one and say you hav't like any images yet and rest will be fine and we have to make the changes in the function as well
(4:44:56) so reload the page that's how it's going to look look the like page the like page is ready history page is ready now we have to do the changes in the function like there is not need to do any changes in the change category function but we have to do the changes here in the calling all post because this time we have to Simply call the all images all post so here we have to do the changes so I can simply come back here in the in the let's say where we can come back to the index and we have to Simply copy
(4:45:24) this get AI images all images and that's what we can simply call it here and we have to import here as well we got the function now we have to build a if statement to run and check those images like by the user so that's the image we have to display here in the like page not all the images all the images which user will like only that images we have to display so here we have to build a if statement so this is the for we have in the response we'll have the entire array so we have to add one more if condition
(4:45:53) here here right on top so we'll say if let's close this one we'll say if like element likes includes if that likes likes will be in array in that if it's includes the user ID mean the current user ID which can get by this user ID if it's include means that user is like that particular post so we can simply take and we can cut and past here and that's the only thing you have to do perfect we're done with that I hope you guys have understood that what we have done we have simply checking the user
(4:46:26) have likeed or not if it likes then we want to Simply execute and we have to Simply store that in a perfect category otherwi would be fine looks good this is the image AU and that's what we are checking here so that's the entire thing now we can simply come back to the likes it's also looking great so we are done with that all now we can simply come back here in the aparture mean in the create section and that's what we're going to work next so if I reload the page you will see everything is working fine there is no
(4:46:58) post that's why no data is reflecting but when the data will come it will reflect fine now we have to work on this generate one aparture so come back here let's we have to Simply select all of this and that's what we're going to Simply paste here so simply select and remove and paste and we have to remove couple of things so remove this one we have to remove this then remove the icons couple of icons so this time we going to take only three icons let's move this one and in the component we're
(4:47:28) going to import couple of component as well so we going to take this we don't want the let's say we want the prompt input and we want the prompt got it now we can simply remove this one to AI processing got it now we can simply come back here and remove that and then we have to Simply import the subscription component that's what we got it now we have this this looks good and we don't need this remove that one and save it so this is all the component we're going to utilize it this is perfect now we can
(4:48:06) come back to the utils and there you will see that we have this particular function like V2 V3 and these are the function we need so simply copy and that's what we can import then we can come back here copy this one let's import that we got the two functions now we have to get let's say one more for the user so let's come back here and we have to get the user one and replace with this one and we need all of this four function looking good now we have to do the changes in the state variable perfectly so we have
(4:48:33) to remove this and we have to simp play come back here and we don't need this one we don't need this one actually we need loader remove that one this three thing we needed and by default I want to take one more so I'll take this use State and this will be called active model by default will be false then I can take another one this will be called error because when we get the error from the API we have to display that so that's what we have and in the category by default I will show YouTube and this
(4:49:04) is fine this is good don't need to make any changes and we can can simply remove this copy because we are not going to add filter so just keep it as it is we we don't need to have search so remove that one and just remove this query part as well you don't need this remove this actually we need this because this function we going to attach on the button so user can change between the categories so we need this function perfectly now we can come back here and let's take a straight variable this will
(4:49:37) be called prompt V3 and in that we need couple of data which we going to take from the user so let's take that so it will be have prompt then we'll have a negative prompt then we'll have the size we'll have a style perfect and by default we'll go with this one W it and this will be this particular size 100 1,000 24,4 and simply copy this one and paste here and this is going to be for v2 and we have to change the few things in here so we don't need the style we need the number by default I will set three and
(4:50:18) the size is also going to be a different one so we'll say 256 256 perfect we got it now we have to build the function for both the model we can come back here and we'll take this use effect and that we'll have to get the model from the local storage we'll take this get item is going to be active model and once the value is available I have to Simply set that in the model and I want to run this every time there is a change in the model active model perfect that's the hook is working fine and this is the function and we don't
(4:50:51) need this function handle click and all all of this so let's select and remove this one remove the four and save it and we're going to have this we can come back here and let's start working the function so let's take a variable called click V3 means we're going to call the V3 model it will be Asing function in that we're going to receive the prompt V3 we'll take a try and catch and we have to catch an error if anything goes wrong first we have to activate the loader then we have to Simply make a
(4:51:22) call to our API we'll say await V3 and that we have to pass the prompt then we have to build if statement so if the response is success is equal to data missing means the data is not provided properly so if the response is equal to data missing then we have to throw the error message and update that so we'll take this response and we'll set the loader to false else we can simply say status code is equal to 2011 means for create then we can simply display that we'll say set loader to false and this will be called set
(4:51:59) single ID is going to be the ID of the post which we going to pass to our single image component perfect and here we have to Simply deal with the error so we have to construct the error so so this error can happen from two places one from open Ai and the other one is from the back end so we have to construct that error so we'll take this error message first we'll get this error do message so when there is a error available in the open a that's what we are accessing otherwise we can go with this default error an unexpected error
(4:52:29) occur will say open a perfect we can set this loader to false and we can set the error into the error component and that's our V2 V3 is ready and this data is missing is important variable which you have to check in the util so if you come back here in the V3 model actually V3 and here you can see we are passing data is missing so we have to check the spelling that's what you have to provide data is missing and that's the exact thing you have to do here in this well so data is missing paste and here you have to check
(4:53:02) and here you have to check perfect so this function is ready now simply copy replicate it and change this to V2 and change this V2 and we have to change the function to V2 and we have this now change this V2 and the rest would be fine just keep it as it is perfect so our function is ready now we can simply ahead and start working on our other component so this is fine now we want to Simply take this portion like take this one and bring it here and we need to adjust the component so we're going to Simply remove this one
(4:53:34) we'll have a d without class and here we have to do the changes remove this one this will be over Flex hidden we don't need this section logo and the value remove that one and here we have this and here we have to have the full WID so let's remove this portion let's add this on small screen margin top is going to be four medium screen margin top is going to be 10 perfect and we have this full let's chain this to padding X is going to be two medium device padding X going 10 large padding x 16 and
(4:54:11) flex item Center Flex column and we have a Max width is going to be 1300 pixels we'll have withd full and we can come back here and once we have this let's do one thing and we can come back here let's take a div we'll call it part one and we can take a div it will have a class called withd Full Flex Flex column reverse we'll have on the medium scale we'll say Flex row and that's what we have so I can do I can simply remove this one and save it because we don't need that here we have inside the div
(4:54:54) we'll take a prompt and in that we can send all the prompt let's send that it's going to be V3 we'll say set prompt V3 we have to do the same thing for the V2 then we have to take this V2 then we can take the loader error we can take this active user and we'll have our function so we'll say generate function and we have to Simply call it so we'll take this build a dynamic condition based on the model so we'll see this if active model is equal to V2 like V3 V3 then we have to call this V3 the
(4:55:41) function and pass the prompt else we have to call the V2 model perfect so that's our first prompt now we have to work on the input field so say promp info and we have to provide the exact prompt so we're going to Simply copy this portion and paste here and we need to do a little bit changes so we need to add this active model and we have to add this sect active model as well got it now we can simply remove this one and we done with that I guess we are done with that now we can simply come back here and here we have to work on
(4:56:17) the body so this G will contain the body so let's take a dip it will have a class called item Center width full Max width is going to be 800 pixel inside that margin top is going to be eight padding X going to be four padding left is going to be five on the medium device we say padding x five it will have a style we'll say Min height height is going to be 1 pixels we'll have a position is going to be relative and inside that we'll take a div we're going to have empty div because we don't want to add any classes
(4:56:57) we just want to have a space let's come back here and here we going to Simply add our subscription component in that we can send the user information active user that's good now we have this so I don't need this remove this one fine now we can simply close this one actually remove this one as well select this and let's uh let's do one thing we need close this one and this is what we have so we don't need this we want to use a different component called ai1 so we'll call this loader if it's true then
(4:57:31) we have to display the AI processing and in that we can simply pass nothing this is going to be here and looks good and we have this four but we need to have one more so we can come back here and let's close this one and from here we can simply do one thing we can simply close this and remove this portion and we have this empty div and remove this as well because we don't need this you got it now we can come back here and we can come here we leave one diff and actually we don't need this empty self closing
(4:58:08) remove this as well perfect now actually remove this one and call this body come back here reload the page and there it is you can see our full WID is taking and we have the button if I click it will giving me this error because this particular variable is not there but everything is working fine you can see perfectly it's aligned so all I have to do is to Simply come back here in the change function change category and I have to Simply remove this one remove this remove this let's format this properly do the same thing from here
(4:58:44) here and here we got it reload the page now you can click and you can go to different tab perfect so we're done with this now we're going to start working on this component so perfect this is the one which we're going to work so simply copy and let's receive that as a propt and that's what we have to receive let's quickly format that perfect and that's the only thing I want to cover in this video because this video is already very long in the next video we're going to start continuing for here
(4:59:19) so let's move to the next everyone welcome back to the fifth part of our AI art generator so this is where we left in the last video now we're going to start working on the prompt section so we have imported all of the prompt let's come back here and let's import more so we're going to take the loader and that's coming from our Global file loader then we have the prompt now we can simply come back here and we have to take couple of Stateway variable so first is going to be for reload and this
(4:59:45) particular function will allow us to reload the browser so we'll say window. location. reloads very simple we got it and all of these steps are working absolutely fine now we can come back here and we have to take the classes so we'll take a class name it will have Flex one Min withd zero inside that we'll take a DI it will have a class called Flex justify between text small padding two padding bottom one padding top six on the medium device will have padding top is going to be zero inside that we'll take another P
(5:00:22) tag it will have a class called opacity 40 inside that we'll take a description tag we'll say describe your image and there it is you can see the description now we can come back here come out of the div and we'll take a div we will have a class called relative Z 10 we'll have Shadow background zinc 700 background opacity is going to be 60 Border X Border top border zinc 700 rounded Excel inside that we'll take our text area component so I'll simply remove this one and let's apply the classes so it will
(5:01:07) be block resize none we'll have background transparent we'll have overflow y hidden we'll have withd full rounded XL leading relaxed we'll take this small patting left four patting right s and I have to give this space now perfect come back here we'll take a padding top 2.
(5:01:46) 5 padding bottom 10 and on the focus we want to have outline none we'll have Focus ring one Focus let's call this ring Indigo 700 and there it is looks good text filled now we'll say placeholder let's call this opacity 550 rounded Bolt Excel we'll have border bottom zero and we have got all of these classes looks great and I want to do a little bit fix so I can simply come back here and provide this space and I have to Simply remove this one and save it now perfect you can see it's looking good our highlight color is also looking
(5:02:29) good so we are done with the stakes area now what I can do is I can simply do one thing I let's add a inline class so we can say style we'll say height is going to be 96 pixels important there it is perfect we can come back here we can add on change function so it can get the data so we'll take this set prompt V3 and I have to Simply update it so we'll spread it out and we have to Target The Prompt and we can simply say e. target.
(5:03:04) value so that's how we can update it perfect so this is the one and actually I want to update one more so simply copy this one entire section wrap this in this bracket and we need this portion copy and that's what we can simply paste here so make sure to wrap this in bracket because we have two two State we are calling here so here this will be call two and this will be two and the rest would be fine got it perfect now we can simply come back here and it's going to be a self closing text area remove this one now we can come
(5:03:40) back here we'll take a div it will have a class called border border transparent inside that will take a div it will have a class let's call this margin minus top is going to 31 pixels padding X is going to be 10 pixels and we'll have a padding bottom is going to be 7 pixels with full inside that will take a div it will have a class called Flex Flex wrap Gap one it will have a style let's call this position is going to be our relative and it's going to be a self closing div so let's close this one and
(5:04:22) remove this one because it's a decorative element now we can come back here we'll take another div and will have a style called position relative and it's going to be a self closing div so let's remove this as well so these two Dives are self closing div now we can simply come back here and we can start working on the next component so we can say p is going to be have a class called opacity 40 text extra small we'll have left two bottom one and top is going to be four we'll say prompt and
(5:05:00) tag perfect now we can come back here we'll take another so we already have this so we can simply copy this entire text area and that's what we can paste here and we have to do a little bit changes so first thing we going to Simply uh come back here and select all of this still here and remove it and let's apply the classes so it will have Shadow overflow y hidden we'll have width full background zinc 700 background opacity is going to be 60 there it is you can see the stylings are applying we can come back here Brower
(5:05:40) we'll have border zinc 700 it will have a rounded extra small extra large we'll have leading relaxed text small padding X4 padding y 2.5 and this looks good you can see we are getting this rounded ship and I want to get this detail so I can simply come back here and I want this portion from Focus copy till here and paste here so we got the focus outline Focus ring and all of things are looking good now we can simply come here we'll say placeholder is going to be opacity 50 and that's all looking good
(5:06:22) so you can click and we are having that n event perfect now we can simply come back here and here we have to change the height so we want a small height so I'll take between 45 there it is for the tag and this is the onchange function so I have to change the just the tag name is going to be uh negative promt negative prom copy that one and that's what I have to Simply paste here this one perfect got it I hope you guys have understood that what exactly we are doing here we got all of that let's add
(5:06:53) a placeholder so we can say black and white and we can give this tag you can give whatever tag you want and we have to do the same thing from here as well let's give a placeholder we'll call it a cat a c cute mouse pilot wearing Avatar Google's Unreal Engine render and 8K this is the placeholder I have given you can give any brief placeholder which you want so this looks good we got our input fill now we can simply come back here in the change the states uh looks good also uh come back here we'll take a
(5:07:39) DI it will a class called with full Flex item centers we have justify Center medium schem will have justify and top 24 to margin top 4 space x 4 inside that we'll take our Dynamic block and we'll say if active user has credit equal to zero because we have to display different button based on the user credit okay so it will have multiple State like for for buying for generating for error for loader so we'll have four different stage so we'll say that if credit is equal to zero then we'll take this
(5:08:22) fragment and for the time being just give this and let's work on the first one so we have to display the buy button so we'll take a Di and it will have a style let's call this cursor is going to be a pointer we got it now we can take our classes we'll say transation all we got that inside the div we'll take a anchor and we have to redirect the user to the account page so we'll take the account let's apply the classes as we text text small background gradient to top from Indo 900 VI Indigo 800 will have a
(5:09:04) rounded full drop shadow text media padding X4 padding Y2 transation let's call this transition all opacity 70 and we can come back here inside that we can display bu credit perfect we can save it and right now it's not displaying if I change this to and it it will reflect and the reason why I'm doing it because when the user will create the account for the very first time they will get three credits and right now that's why it's what not displaying so right now you can see it's displaying now I can see that it's quite
(5:09:47) close so I have to apply one more classes so we can come back here and let's come to this 900 and let's add one more this will be two indgo is going to be 800 perfect now you can see it's on top and we getting the full fledge of the button perfect we done with this button now what we can do is we have to work on the next one so let's bring it back let's B on the next component and this will keep the track of the loader so if the user will click and it's loading forther generating the image so
(5:10:17) that's what we have to display so let's call this loader we got it so we'll take the div it will have a class called transation all inside that will take a button it will have a class called text M background gradient to top from indgo 900 VI Indo is going to be uh 900 and we'll have a two Indo this will be our Let's uh call this one 800 so we already have the classes I'm going to Simply copy till here and that's what I can simply paste because it's going to have the same button and inside that what I
(5:11:00) can do is I can see do I have to make any changes no this looks perfect and let's add one more class this will be cursor default perfect now we can come back in the button and we have to display the loader component got it now we can simply come back here and here we have to handle the error so if anything goes wrong we have to display that so we'll say div it will have a style let's call this cursor is going to be a pointer and we can come back it will have a onclick function and we have to Simply reload
(5:11:35) the page so user can have the all the states get reset sits and user can supply put and get the details and generate the image so let's call the function it's and call the function reload perfect got it now we can simply copy this one and that's what we can simply paste here and here I have to display the error message so we'll take the error and I can tell the user to reload the page so I'll say click to refresh perfect we got all of that and this looks good I don't need to make any changes in the shadow and I
(5:12:10) have simply remove this one perfect now we can simply come back here and write the last statement so we can simply copy this one the entire error component and that's what we can simply paste here and I have to do the minor changes so the would be fine like this classes would be great I just remove this to generate and I don't need this one let's come back here and we can take this classes so we'll take this transition all and remove this one and now we have to call the function we have so we'll
(5:12:46) take this generate function and that's what we can simply call it so user can click and they can generate the image so looks great if I make on the big screen you can see it's looks absolutely perfect so the left section is done input fi description and the buttons that's also look great now we have to work on the prompt input so all of this are looking great come back to the code and this is the Imports we have done this is the one we have this is the classes perfect here we have the tags everything
(5:13:17) is looking great close this one and now we have to start working on the next one called prompt this is the one we have to work prom input let's make it side by side so we can see what exactly we are working on so let's bring on this side and here we are now we can come back here and we have to receive the prompt so this is what we are sending simply select all and that's what we have to receive in the prompt input so let's remove this one remove all of this perfect we got the prompts now we can come back here input couple of
(5:13:53) things like use State then we can come back here here we have to import couple of things so it's coming from our SV icon and we need a lot of icons so we need our AI logo and we need our Dimension icon this two is in a for a time being now we can simply come back here and we have to Simply import the index and from there we need the active model component and we need the fast slow component this two component we have imported now we can simply come back here and we can simply come and take a state variable so we'll take this range
(5:14:33) value and by default is going to be three and we can take the another one this will be called V3 Style by default it will have this particular module we want to call it vi vi ID withit because in V3 model we have two models weid and natural so I will go with weid by default the second state variable we have to take is for the AI size style V3 and by default I will go with this one perfect so these are the stat variable we have now we can simply replicate it and this going to be for v2 and change this to 256 256 perfect now
(5:15:14) we have to write a function which allow us to change the model so we give a option to the user to change the model between V3 and V2 so let's build the function so we'll take this cons Change Model it's going to receive the model and all we have to do is to Simply set that in our set active model to model and we have to change in the local storeage so we set that in the local storage as well perfect and we can simply reload the window once it's get done perfect now we can simply come here and we can start working on our GSX so
(5:15:48) first we going to take the class it will be full withd margin top is going to be 20 pixels margin left is going to be zero we'll have medium device margin 8 on the medium device we'll have Max width is going to be 300 pixels come back here we'll take a div it will have a class relative border border zinc 700 rounded large Shadow medium inside that we'll take a div it will have a class called padding X5 padding y4 padding bottom five inside that will take a div it will have a class call margin bottom four text small
(5:16:34) opacity is going to be 40 and we'll have a select none inside the div will inside that we have to display the active model so we can simply take this figment and that data we have in this active model so you can see the active models ref reflecting we got that now we can simply come back here we'll take a d it will have a class called Flex space X2 padding X2 inside that wi take a DI it will have a onclick function and on that we have to Simply call the change model function and pass the model name I told
(5:17:05) you this name is very important this big name so we'll call it a imhr d EV3 and it will have a classes so let's apply that we'll take this Dynamic class and we'll say text small and the reason why I'm taking this Dynamic class because based on the active State we have to change the classes because both the button will have a different classes on this active mode or on the deactive mode so we'll take this rounded medium on a small screen we'll say text is going to be small we'll have a group
(5:17:40) Maring top is going to be four white is going to be space no wrap Flex One Flex select none and let's call this cursor pointer on over effect we want to have brightness 100% background gradient to top and drop shadow we'll have items Center justify Center padding X to .5 so it's applying all the colors successfully and we will have our Dynamic classes so we'll take this we'll say active model if it's equal to V3 so copy this one and paste here if it's V3 then we have to apply all of this color so we'll take
(5:18:25) this padding y 2.5 with full content active is going to be scale 95 we have a transition all from Indigo 900 VI indigo is going to be a 900 and we'll have a two indigo is going to be 800 perfect and I have to add a l statement as well so let's add that and perfect so we have the added the L statement and you can see right now we are getting that blue line perfect and we got that now we can simply apply the other classes so let's call this from zinc 700 VI zinc 700 top zinc 700 padding Y 2 we have with is going to be full content
(5:19:18) fit content perfect now we can simply come back to the div and we can take our the logo we already have it and we can display the name of the model so we can take this space tag and we can give the model we'll say di EV3 perfect our one button is ready and currently that model is is active you can see on top a art image that's why it's getting this Dynamic class lless now we have to do the same thing for the my V2 so what I will do is I have to Simply replicate it the rest would be fine I can see that's
(5:19:52) looks great do I need to make any changes simply close this one and we have to Simply copy this one and that's what I have to Simply paste here and here we have to do the changes so this will be V2 and I have to do the changes in here as well so this is fine let's change this to V2 and the classes is change perfect okay The Click event is somehow it's not working so that's the fix I have to do so this is the function we have change model let's remove this one we don't want to reload the page
(5:20:21) let's remove this one perfect now we can come back here and this is what I have the function we are passing it it and it's going toly set in our local storage but still it's not working I have to see the problem where it's happening let's continue ahead in the other part of the component so we can come back here so we can work on the next component so let's take this two command this and this particular component is going to be dynamic it's only going to be visible in V2 model because in V2 model user can create up
(5:20:48) to 10 images but not in V3 so that's what we are working on so we'll take this active model is going to be we can simply copy this portion and that's what we can paste and we can build a dynamic block so we'll take this build fragment and we'll take the label tag and we can give this label range it will have a class let's call this slider we'll have a style and that we can simply say withd is going to be 100% margin top is going to be 1.
(5:21:18) 5 RAM and perfect inside that we can take this input and it's going to be a range it will have a class let's call this label it will have an ID so we'll say label range and it will have a Min value to one and the max I want to allow five because this can generate up to 10 but I want to restrict the user to five I don't want to exhaust my exhaust my API and the value is going to be the active range range value perfect and we can add this on change and we have to get the data so we already have this particular function handle range change
(5:21:57) actually we haven't built this function so this is what we have to build so come back here on top and let's work on that so paste the function and we can say event once we have the event now we have to Simply set this value so we'll take this set prom V2 I have to Simply spread it out prom V2 and I have to Simply pick the number number of image which user wants to create it so event. target.
(5:22:22) value I hope you guys have got it once we have this one now we can simply copy and this is the exact value we have to set in our range so we can display in the front end so this is the range we have to have and remove this one perfect so this is the function we have which allow us to get the data now we can simply come back here looks great now we can simply come here we'll take a div it will have a class called margin top is going to be 1 person and it will have let's take a dip it will have a class
(5:22:49) called select none opacity is going to be 50 text extra small Flex item Center justify start margin bottom three inside the div we'll take our Dimension the icon and we can display the text is going to be inside the P tag we'll say Quantity and we have to display the range value so right now it's not reflecting because our V3 model is active so I have to change to V2 then it will work so you can see come back reload the page and somehow it's not working because currently V3 is active so we can simply come back here and we
(5:23:29) can see this is what we are simply calling it and we can come back to the homepage and change the model so click here click on this V2 and now V2 is is active come back to the generate and there you will find the V2 model is active and this slider component is looking great you can click and you can able to display the number of quantity of the image which you want to create perfect this looks good now we can come back to the code let's make it side by side let's make it side by side come on drag it there
(5:24:04) perfect we can click and we can go that so the range component is done let's simply what we have close this one and we can come back here now we have to work on the next Dynamic component now we have to take another Dynamic component so we come back here we'll take this active model if it's equal to V2 then we have to render this otherwise we have to render this so let's work on the first j6 so I'll take this active model and in that I have to Simply send the props simply copy and paste here
(5:24:38) let's change the prop two active model is going to be active model then we have to send this size the size one is going to be 256 then we have the next size is going to be 512 and the third size is going to be 1,000 this is for v2 and we have to set other data so this particular function will update that so we'll take this update we can simply pass this set prompt V2 because this active model is a reusable model we are using for both the component that's why I'm giving this key here in the value I can say prompt V2
(5:25:17) and we'll have a add class in that I can simply call this AI size style V2 and we'll have this one called update class is going to be our set AI size by V2 perfect simply copy and paste here and all we have to do is to Simply change this so simply copy this and paste here like 1024 1024 in the second we have to have this 7 92 and 1024 and here we'll have this 7 92 perfect we have changed all of that this will be three this will be three this will be three and this will be three perfect we got that you can see the component is
(5:25:59) reflecting fine now we can simply come back here and we can display our last component called Fast slow perfect so we are done with this entire section now we can start working on our active model so simply copy this one and that's what we have to come back to our active model and let's receive that remove this one remove this all perfect so we have received the prop now we can receive couple of things so we have to receive the icons that's coming from our csb file then we have to call this Instagram this will be our camera for
(5:26:35) the real and the last one is going to be for for AI logo and we'll have a dimension perfect we got the icons now we can come back here and we can start working on the other part of our section so we can come here we can see this is what we have fragment we can simply remove this one and we'll take a dynamic blog we'll say if a model is equal to our V2 model let's change it to V3 because that's how we going to keep the track V3 then we have to display this component because in V3 model we have
(5:27:08) the style attribute which we don't have in the V2 model so that's the component we are working on so we'll take a div it will have a class let's call this margin top is going to be three and inside the div we'll take another div it will have a class called select none opacity is going to be 50 text extra small Flex item Center justify start Maring bottom one inside that we'll take a dimension and we can display the text so we'll take a p it will say image style type right image style type but it's not
(5:27:50) reflecting so if I click it's still in V3 model but it this component is not reflecting okay I see the problem let's give this a now it will display you can see it's reflecting fine so we're done with this now we can simply come back here and let's take a div it will have a class Flex space X2 we'll have padding x two pixeles and I'm getting this warning okay my bad I have to wrap this in a fragment so let's take this fragment and wrap it and perfect inside the div we'll take a div it will have a
(5:28:23) onclick function and we can simply call take this bracket and inside that we can simply call this update State spread the value and we have to Simply Target the style attribute which we have in the prompt and we can simply update this to vv2 and this will be the next one is going to be let's say style V3 is going to be Vivid perfect if I come back here this is what we are getting actually we need to take one more prompt this is fine so here we have this one the 3 Model so I can simply take one more prompt set vit v3s
(5:29:08) model that's what we have and we have to also take this the attribute so we have taken this set V3 model send that prop now we can come back here and I want to set the value as well so let's call this V3 style V3 perfect we are sending to both the state and that's what we are receiving here let's receive that and let's receive this and now we can simply come back here and let's add the classes so we'll take this Dynamic classes text extra small rounded medium on a small screen we'll say text small we
(5:29:45) have a group margin top is going to be for white space no wrap we'll have a flex One Flex select none and we'll have a cursor pointer on over effect we want to have brightness 110 background is going to be gradient to top and we'll have a drop shadow we'll say items Center we'll say justify Center padding x 2.
(5:30:17) 5 and we'll have our Dynamic classes so we'll say that let's take this V3 style if it's equal to our Vivid then I want to apply this class else I have to go with different class so let's add the classes padding y 2.5 with is going to be fit content active select scale 95 transation all from Indigo 900 v i a Indigo 900 to Indigo 800 and I can see some sort of error is happening because I have to format it properly save it and you can see just format it bring the question mark down below now it's look good let's save it it's format that and
(5:31:08) now let's add the next classes in the L statement we'll say from zinc 700 VI zinc 700 to zinc is going to be 700 padding y to power two we'll have with fit content perfect you can see the Blue Line looks great and we can simply come back here we'll take this logo and we can give HTML Space Tag copy and paste here and then we can simply display this VI viid viit there it is perfect now we have to write the same thing for the next button so let's come back here we'll take this button it will
(5:31:48) have a onclick function and we'll take this update State because when the user will we have to update that so we'll take this actually we need this one copy this one and that's what we can paste here because this is our second button and we have to do the changes so this will be called natural natural fine and I have to apply the classes so let's copy this entire classes and that's what we can apply and we have to do the changes a little bit so this is fine don't need to make any changes we can simply copy this
(5:32:31) one logo and that's what we can simply paste inside the button there it is but both the buttons are very close to each other so I have to see what exactly when wrong so let's change this to Nature and now we can come back here let's work ahead and we'll fix this problem let's build the skeleton first we'll take a div it will have a class called margin top three inside that we'll take a div it will have a class called select none opacity is going to be 50 text extra small Flex item Center
(5:33:03) justify start margin bottom one inside the div will take our Dimension icon and we'll display the text so we'll take the P it will call Dimension there it is perfect now we can simply come back here and I can see this and here we have to do the changes so first we have done with the Vivid this one is going to be natural natural and you can see it looks great perfect now we can come back here and we can come back here we'll take a div it will have a class called Flex space 2x padding X2 inside that we take
(5:33:43) a div it will have the couple of things so we need this one copy this one and that's what we can apply on this then I need the button so before we do that let's change this style is going to be the size and this will be four size one and this will be update class is going to be the size one I hope you can understand the logic that what exactly we are doing so we are simply updating the state in the prompt field perfect now we can simply take this entire class and that's the class we going to have it so let's paste here
(5:34:18) we got it now let's change this to size one and this is fine inside that we can display the icon and we can give the HTML Space Tag and the size name size one perfect now we can simply come back here and I need to do a little bit changes so this is the button we have simply copy this button and that's what we can simply paste here so let's come close this one and simply paste here we got the button and we have to do the changes so come back here we get this copy this one and that's what we can apply here so
(5:35:04) simply paste here not here here we have to paste and I have to do the changes to two two perfect and here we have to do the changes as well so we can come back to the first button and we can change this section so instead of V3 style we have to say add class and that's is the same thing I have to do here let's change this to two perfect now you can see the classes are appli successfully perfect now we can simply change this to V2 and we're going to have one one more so what we'll do simply close this one
(5:35:40) copy this entire section and paste here and we need only one button so let's change this to V3 3 and three and this will be Instagram three and let's remove this one perfect we got all of that perfect now let's make on the big screen you can see we got our Fields the only problem we have in the Styles they are very close close to each other so we have to say you can see the click event is working fine but this click event is not working on the model but everything is working fine come back to the code and let's try
(5:36:19) to fix out so let's try to fix that come back here and we can see that this is the problem we have in the space spelling so let's change this to proper spelling s p a c e that's the sample typo I have done and you can see right now we have this page so it was a typo reload the page looks great now this click event is not working so we have to deal with that as well so we can come back here and we can simply see this this is the where place where we are simply updating it and where is the next button we
(5:36:52) have so I can simply close this one and this is the one we have and here we have the dynamic component so what can do is okay I noticed the problem I can simply come back here in the uh let's come to this so before we fix this let's fix this one let's work on this fast component it's going to be a very small one then we'll try to debug that what exactly went wrong there so come back let's take the class call minus margin left is going to be one margin top is going to five Flex space x2.5 item
(5:37:34) Center inside that we'll take a button it will have a type call button it will have a class rounded medium padding y1 text extra small white space no wrap Focus we'll have a outline none pading X2 relative with is going to be 1X half disable is going to be cursor none not allowed we'll have text zinc 400 that's what we have let's add this attribute so we'll say disable is going to be empty and inside the button we have to take this slow perfect now we can simply copy the button and replicate it one more time
(5:38:20) this is fine simply change this to First and we have a div it will have a class called text extra small opacity is going to be 50 inside that we say generate generation speed and per perfect now I can see the problem so I have to take a div and I have to wrap this button in that so let's come back here take a div it will have a class called relative self center background zinc 900 rounded large pading is going two pixes Flex Shadow and I can simply see this perfect everything's good now we have this one let's remove
(5:39:07) move this one and add this background zinc 700 text white that's the one change you have to do and the next change you have to do right up here so this is fine we have to take this button this div we have taken so simply take this div closing and that's what you have to Simply paste here and perfect now you can see we got this styling slow fast and generation speed perfect and that's the only thing we have to do here so this component is look great and it's ready let's make on the big screen and
(5:39:41) perfect this compon looks great we can Tab and we can go to this and this one is not working so we have to check that where we have made the mistakes the just be fine so we can come back and close this one and close this one and here we are in the apach of file page and this is fine this is great now we can simply come back here and we go back to the component so we have the the component right up here in the prompt input and there is is an issue so this is the model we have but somehow it's not working on the click event this one
(5:40:17) sorry okay I can see the problem so this is the second button we have and here I'm checking for V3 and this one is also V3 okay this is the problem so the first one is perfect this is V3 model this is the V3 model and here I have to do the changes it's not V3 it's V2 so simply change that V2 and now it will work this will be V3 I hope you guys have noticed this if you open that we have this V3 in V2 in all the places perfect now save it you can see if you click it will simply change the color and will open the
(5:40:55) component and perfect so we are done with this section as well reload the page and it's working absolutely fine now we can go to the different section and we can create so looks great slowly slowly our application is coming to life this looks perfect this looks good now we can start testing the feature we have built so what I will do we don't need to do any changes we are done with this we are done with this entire section actually before we start testing let's work on this subscription component because it's going to be a
(5:41:27) very small component so let's simply copy this one and let's complete this one after that we're going to do the testing so it's all the way down and we have to receive and let's work on it very quickly so I'm going to work on the subscription and the AI processing this two component because these are the two small component so let's come back here let's make it side by side perfect now we have to work on the subscription so we'll take a class it will have Flex Flex column full width
(5:41:59) Flex one item Center justify Center inside that let's add a class style it will be position relative inside that we'll take a d it will have a class called Max width is going to be 800 pixels then we have to take a d it will have a class called margin y 4 margin bottom 8 Tex small background Indigo 800 relative border 1.
(5:42:32) 4 border is going to be 1 Indigo 500 background opacity is going to be 10 then it will have a rounded large border border indgo 900 border opacity 50 Shadow will be medium padding wise going to be two items Center and we'll have a with full pading X4 there space is looking good and we can simply come back here we'll take a p and we can display the text we will say font medium text small margin top one inside that we can display the dynamic data so we'll take this if user credit is greater than five then we can display welcome and we can give the user name
(5:43:29) user name perfect and we can display the lse statement if it's not greater than five then we can display the user and we can display your credit is going to be the credit left in the user account so we'll take this credit okay that's the problem it's getting undefined undefined okay that's not a big deal we can fix that very easily let's work on the component we can come back here we'll take a p it will have a class let's call this margin top two text small inside that we can
(5:44:01) take a span and here we have to build a dynamic message so we'll take the if it's greater than five then we can take this or else so I can what I will do is I can display a dummy text but you can display your text so I simply cut and paste here and cut this half and paste in the L statements let's format this properly so let's click here and format this perfect let's do the same thing with this format and format this one so this is our L statement but you have to display actual text message we got it now we can come back
(5:44:38) here we'll take a p anchor sorry because anchor and we have to redirect the user to the account page so he can buy more credit so we'll take this account inside that we can take this button we'll call the classes top four bottom two Tex small padding Y 2 plus 4 will have y padding x 4 padding Y 2 background gradient top two we'll have from Indigo 700 VI a Indigo 700 we'll have a two Indigo call 600 we'll have a rounded medium we'll have a drop shadow and looks perfect we'll have a text is going to be
(5:45:28) medium Shadow active scale 95 and we'll have a transation is going to be all on over perfect we want to have brightness to be 110 there it is you can see the button inside that we can display the text we say view plan there it is if I make on the big screen you can see it look perfect this notice component looks perfect so the user can click and they can go to the plan but somehow the data is not reflecting so I have to see you can see that we already have the data in the header bar but the data is not reflecting in our page component means
(5:46:05) there is some problem in our page component function which we are calling so this looks good now we can come back here and this is the data we have we getting the data and that data we are storing here in the state variable and that's what we are passing so we are passing correctly this is the function in which we are updating the data oh I can see the problem I can see the problem that's the problem we have so you can see this is where we are updating so I can do in different way I can simply come here console log out to see
(5:46:43) that whether we are getting the data or not let's do the inspect element and reload the page and you can see I'm getting this error get a image is not defined okay that's the problem the function is not defined so I can simply come back here on the top and this particular so I don't need to call this particular function I need to call the user information so you can see I have imported this fun particular function get user AI image and that's the function I have to call Simply copy and I have to Simply change the
(5:47:14) function okay now all I in this I need to pass the user ID so we can do is we can simply bring the cookie one on top so we have this section like this section we have we updating all of that so we have this section so we can simply cut this one and bring on top and simply paste here and we we have to Simply cut all of this and take in the if block so we can simply come and paste here and in this particular function we have to Simply pass the user ID so we are getting that and we can pass this user Dash ID now it will work
(5:47:55) fine now we'll have the data and this looks good reload the page here I'm getting this server error not a problem it's not an error make sure to reload the page and this time you can see this looks good we are getting the data about the user and the we are having different error this time so this particular set all post copy is not defined and we have already removed this state variable so let's remove this because we are updating it here so let's remove this one and remove this one perfect and that's the only thing we
(5:48:26) have to do now it will work fine simply reload the page and this time you can see everything is working fine we got an empty array so now things look good and if you see we got the name and the credit is left perfect you can click and you can go back to the account page so everything you can see it's working fine and when you encounter this error it's part of development you can click on different T and you can go it now we can simply provide and we can start generating the images so we can come back here we're
(5:48:54) done with this entire section let's work on this a process after that we're going to get our API key from open AI so we can simply come back in the AI process and it's going to be a very simple component so let's turn this on and save it close all of this let's make it side by side so you can see a process component is reflecting fine now let's make it side by side let's bring it back drag it here and there it is now we can simply start working on this component so we'll import our logo login icon and that's
(5:49:33) coming from our csb got it now we can simply take this fragment inside I will take a div it will have a class let's call this fixed inside zero background zinc 900 opacity is going to be 40 Z is going to be 50 you can see we got the overlay it will have a style which will say pointer events is going to be Auto inside the div we'll take a div it will have a class background zinc 800 items Center fixed Shadow Excel rounded 2 XL Z index 50 padding X is going to be eight padding Y is going to be eight T small
(5:50:19) border border zinc 700 and you can see the square on top it's looking great now we have to Simply adjust the alignment we have to bring in the midal so we can take this style and we have to add this stop is going to be 50% then we can add add the transform so we'll take this translate - 50% - 50% then we can simply add this left is going to be 50% so it will be in the center you can see now we can say Max withd is going to be 330 pixels with is going to be 100% Max height is going to be let's say 85 VH inside that we can display a div
(5:51:03) so we'll take a div div it will have a class Flex Flex column text zinc 200 text center items Center inside that we'll display our logo there it is then we can set we display a div it will have a class called new loader js on and in this we can have the animation so inside that we're going to take this span it will have a class call binary you can see the number is deflecting simply replicated and this will be one and we want have and we want to have one more so this will be called getting three and
(5:51:46) inside that we can say AI processing okay it's why it's coming on top so okay my bad here I have to do the changes so this will be there t there now it will come down and you can see it looks great so that's the entire section we have let's make on the big screen you can see the loader is looking fine now we can come back here close this one one close this one and now we have to Simply get our API so that everything is looking great perfect let's have a look quickly great now we can come back here we can go back
(5:52:20) to the environment variable and this is the key we have to get it that's what we have to get it so we can simply do one thing we can come back here open a new tab and type open Ai and here you have this click on this API references you will come back to the open air and there you will find all the details about this particular provider so you can check all the models they provide but we have to Simply get into the account so I have already logged in make sure to create your account and log into that click on the dashboard there
(5:52:51) you will find the section click on the API and from here you can generate your own API so I already generated couple of API and use this in my project so to create one you can click here and you can give the name and you can click on this and generate and here you will get it copy and that's what you have to paste here in my case this particular key will not work because I have already generated the key and I have used my free credit so if you are creating your account for the very first time in open then you will get the $5 credit but if
(5:53:29) you have already used it or if you already created your account then this particular key which you have generated it will not work so I'm going to use my different key which I have generated already and it's working fine so this is how you can get your own key okay save it and done that's the only thing we have to do you can come back to the users and there you will find all the API requests you have M and you can see I got the zero credit so I cannot be able to use the key which I have generated I have to Simply buy the
(5:53:57) credit or I have to Simply upgrade my account perfect looks great come back here we got the key close this one and now we can simply test our application so everything's looking good we have already have the feature now we have to Simply restart the application because we have provided the AP ke in our environment variable so when we'll restart the application it's going to reload our environment variable so close this one clear it and start this one again so our back end is running everything is working
(5:54:29) fine so let's come back here and this is the function we're going to call it V3 so so before we call it let's do one thing simply copy and do the console log so we can see that we are passing all the data in every single section simply cut this one and paste here and I want to get the image generated by the open a so simply copy and let's console log out here so we can see the data flow so that's what we have simply cut and that's what I can simply take it here in the response as well let's paste here and we have this
(5:55:03) response and that's what I can simply change change this to V3 and I can simply paste the response okay I'm getting some sort of warning I can give this uh let's give this comma and now it will fix the issue so that's the one thing we have to do simply copy and here we can simply paste this will be credit copy and paste here so looks good so we can tracking all the stacks perfect and this is the function we're going to call call it V3 model so we can come back here and that's what we have
(5:55:43) here let's format this all it's going to Simply take the data and it's going to make a call and going to set all of that so things looking good we are ready to test our application everything's looking good we'll get the response now let's come back here reload the page and let's try to test this out so let's do the inspect element and let's make it big click on it and let's try to test this out you know the page you can see we getting the information about the user perfect now
(5:56:11) we can simply come back here select the V3 model and I can select this nature and I can select this uh particular one the Instagram one now I have to Simply give the description of the prompt so we'll say flying cat in C say animal and cat so let's check this spelling it looks good now click on the generat you can see our a model is working fine the processing so here we have given the prompt in the terminal in the console you can see it's processing it will take a little bit time so just wait once
(5:56:50) we'll have the data it will reflect in our console so here you can see finally we got a response from our AI model this looks good and we have made the call to our back end but something went wrong when we try to update our create like credit function so we have successfully created the image we have successfully make a request to our back end for storing the image but when it's come to updating the credit something went wrong you can see something went wrong that's why we got this 400 status code but we
(5:57:20) have successfully stored the data in our backand post created successfully and there you will find all the details so something's wrong in our credit function like update credit okay so that looks good so this is the one everything is looking good here this portion but this is something wrong here we have some issue you can see it's 2011 I have applyed the same status CES there but why our credit function this one is not working it's not updating the user credit balance okay this is fine we got this if you open that if you go to
(5:58:00) the data in that you will find the images you have generated so we'll get this reverse prompt from the V3 model and here we have the URL of the images so this one you can simply select and that's what you can simply paste here and remove this comma and hit enter okay the image is not that great but you have to give brief prompt and the one thing I would like to tell you that this particular image which you can see is available in this URL is only available for 1 hour after that it will not work this end point is not work so
(5:58:34) that's why we are storing this image in our local file system so from there we can access anytime so everything is looking good this is the problem we are having here we having some sort of issue but everything is looking good let's check our function come back to the API go back to the router and this is the router we have API /ap user credit if I come back to the user this is the exact name I have given credit that's what I have in user ID if I come back here I'm calling the same thing user we are verifying for the
(5:59:10) token and that's what we are passing here in the endpoint because it will take the user ID as well okay so we can see this is the Endo user and this is the method I'm calling put we can come back here with this is everything is good let's come back to the index this one I can simply simply copy and let's paste it to double check because sometimes time you have something in front of you but you can't see let's come back here we have to get the router so let's come back to the router
(5:59:43) and creit spelling is good yeah it's good we are passing the ID of the user there's no problem in that this is good we can come back in the API controller user controller and this is the function we have in that we are receiving the data and the ID we are checking for the data in the body then we are making the call and checking for the users and then we are sending the response the SK this is the one we have we are simply targeting the credit property and that's what we are updating so we are sending
(6:00:20) the exact data let's change this to I guess this is the response so we have one response two response reload the page one more time and let's do one thing you can see there is a one post we have created and that's reflecting fine you can see all of this data looks great so we can able to get all of the post we have created if you come back here and if you simply come back to the upload there you will find the image we have created so you can see there is a lot of images I have already and this is the one we have generated
(6:00:51) which we have stored in our local file system now what I will do is I'm going to Simply remove all of this because this is what I have generated in the tting phase so I'll just remove all of the other one which I have not gener generated and not stored in the back end API so let's remove this one and select all and remove this one perfect so this is the image we have generated just now so close this one and let's change this to credit and looks great the status code is fine so we don't need to make any changes here
(6:01:32) everything is looking great and here we have the status code to be one and here we have the V3 model we can see this is also fine we calling the exact [Music] model let's reload the page and let's try to generate one more image so let's select this one we select this V3 and go with this viid let's give the prompt snow mountain and we can say nature and tree let's give more details with tree cover and click on generate and here we got the prompt correctly so this is fine everything is working fine it's
(6:02:20) processing once we get the response it's going to make a call to our back end API so we got the image perfect we got the API response for back end but our credit means updating the user credit and decreasing it not working so there is a the problem we have you can see we got the two post we have created in our back end if you come back here click here this looks beautiful it's created a beautiful image like Mountain snow and the tree perfect the dimension is also working fine so we have to check that what
(6:02:54) exactly went wrong so let's create one more boy doing workout in gym let's and give more details we'll say with wait and this will be gym workout and let's fix this one I get this suggestion from grammarly and I'll go with this and let's click on generate it's working once it will generate we'll have the image so just wait and finally we got the image and we are having the same issue so perfect we'll see that what exactly went wrong so let's come back to the homepage and we have all of the tabs and this is
(6:03:46) the image we have generated perfect now we can simply close this one and for the Tim we just keep it as it is we're going to Simply fix and we going to debug in details that what exactly went wrong because all the function in the front and side and the back and side is looking good so we have to check some sort of authentication we are doing with the cookie so we have to do the testing there so let's close close this one close this one and we can come back here in the let's come back to the homepage
(6:04:12) and let's work it because we already have the image so we can start working on our components and display the image so this is the index page the home page and this is the component we have to work because this time we have the image and simp we're going to work on it simply close copy and come back to the image card and we can receive the prop remove this one remove this remove this and remove this and save it we got the propt now we have to Simply import couple of things so it's going to be our
(6:04:42) this will be called image search we'll have magic fa reg heart and we'll have fa Heart come back here we'll take this domain and we have to provide the our domain path which is coming from our environment variable next public - domain D URL because right now we are testing on Local Host so that's what we have provided so we'll give the domain name and the folder name where we have the image so it will display perfect now we can simply come back here and let's make it side by side so we can see what exactly we are
(6:05:25) working on so we'll take a onclick function and on that on function we have to Simply Spade update the set single ID so it will receive an ID and is going to fetch a data about the images from our backend API so in that we can simply pass the ID of the post which is available in dash ID and I also want to provide the key so let's call this key is going to be index index then we can simply add the class we'll say class name is going to be new card with inside that we'll take a div it will have a class call
(6:06:07) this block relative group select none overflow hidden margin 0.5 border Indigo 600 cursor is going to be a pointer and it will have a style we'll say transition is going to be opacity 250 millisecond easy and zero and we'll have a let say background radius border radius is going to be 5 pixels and let's give this and we will fix the issue now we can simply come back here and we'll say hi and you can click and you can see there is a problem why this is not reflecting so we have to do a little bit fix in the function call
(6:07:11) as well we have the array but why it's not reflecting in our filter system so let's come back to the page and there we have this is we are getting the data I can come back on top and here we are calling this reverse so I'm calling reverse twice so let's do one thing let's remove this reverse because we are all doing the reserve reverse and now we can simply come back to the function so this is fine there is no issue in that let's console log out to see we actually have the data or not and this is the function we are
(6:07:46) calling which going to give us all the data and we are calling the function correctly now you can see we are getting it so it's 101 so this portion is giving me the data let's remove this one and uh I can simply come here console log out this all AI image okay there is a problem we are not getting the data actually we are not getting the data so what I can do is I can see this is fine you don't need to make any changes so we are changing for the model and based on that we are making the state call and we updating that so
(6:08:24) this is fine this is the model is look great don't need to make any changes just cut this one and paste here to see that we have the data or not in inside the function let's reload the page okay there is a problem in our function somehow we are not able to filter it properly and finally I found the problem I made a small typo in the function and it took me half an hour to find it out and fix it out so let me show you so I've already created nine post we already created three post earlier but I created more to test that
(6:08:58) what exactly went wrong and I found all the problem which I did in the functions and the typo so this is great you don't need to make anything in here we are getting all of this data now we can simply come back here first thing we have to go to our API and remember that the credit like decreasing the credit from the user it was not working because I had a typo so we can come back to the controller go back to the post and we have to do a little bit fix so first fix we have to do in this particular function generate file name so instead
(6:09:30) of calling this two date string we have to call this 2 IO string because if you call this two de string it's going to replace the previous images which you will create using the V2 model so let's remove this one and activate this perfect that's the one change you have to do now you have to do the same thing here as well so simply copy and paste here so this is the one change you have to do and we can come back to the function and here we have this AI model m o d l but I made a typo it's d ited
(6:10:07) That's why I getting this error so if I come back to the model inside that you will see that here I made a typo m o d l so you have to Simply change this to e change this to e and it will work fine so that's the one change you have to do this is fine and we are done with that now we have to come back to the middle wear and we have to fix in the token so this is the problem I have did is JWR but here we are calling JWT but that's the problem so make sure to change this to JWT and now our token will work fine when it's come to
(6:10:43) updating the crit because if you come back here you can see we are calling this verify token and this is the function throwing the error perfect so this is the small fix we have to do now if you come back to the functionality that should be fine we don't need to do anything in here close this one now close this one and here we have this so you have to keep it as it is and we can do come back here in the V3 model and here we are simply calling this credit make sure to call this credit okay so this is the testing I was
(6:11:15) doing it's credit and that's what I have called it do the same thing for the V2 model as well because if you type response response that's going to create a complication so let's change this to credit and this looks great perfect so make sure to do these changes and everything would be working fine let's reload the page we are getting the data now you can come back to the database and I have already created a lot of post and the users so what I will do I will going to simply delete all of
(6:11:45) those data so let's first come back to the post and let's delete all of this post very quickly so to delete click here and delete so let me do that very quickly so I have deleted all the post now let me do the delete in the user because let's create from Fresh So finally we have deleted all the post and all the user simply Rel the page and everything is looking good we have no data available perfect now we can see sign out and there is no data available and our popup model is also working fine that you are not logging you have to
(6:12:24) create an account or you have to log it so let's create my account so click on the sign up and let's call this the blockchain coder let's give the email ID blockchain coder gmail.com we can give the password and we can give the password let's click on this sign up and here is going to make a call and we are logged in and we have created account successfully now we have to sub login so let's give the email and we can call the password and click on this login and we are logging to the application you can see we got
(6:12:58) this three credit free which we can use to create the image now we can come back to the generate and let's generate an image we say bodybuilder working out in the advanced gym let's give this body let's fix this let's select the model it's going to be natural and this time we'll have this one generate and it's going to make a call just wa is making a call to our am model this might takes a little bit time once we'll get the response from the AA model then we going to make a call to
(6:13:31) our backand and we going to update all the data in the post and the user credit and finally we got the response and you can see and this time everything is working fine you can see we got the response from our credit and we got the data updated you can see it's reflecting three but the moment I will reload the page this will go down to two because we have used one free credit and here we have this the data we have generated perfect everything is looking great now we can simply start working on on our homepage you can see this time
(6:14:08) high is also reflecting because we have the data the tab is also looking great let's come back here and let's try to generate one more image so we can start working on the front end component so we'll say create beautiful nature image with birds and we'll say nature and select the typo and this perfect and we got the response from the AI and here we got the response from our back end so everything is stored perfectly now you can see we have one credit let's do one thing come back here and let's start working on the next so
(6:14:45) you can see this looks great and now we can start working on our component so we can come back here and we can simply go back to the upload folder and then you will find the images we have generated so this is the images when I was doing the testing but if you come down here and this is the one we have generated this is the gym one so you have to give brief prompt the brief you will give the better image you will get looking great now we can come back here and this is what we have and this is what we are working on
(6:15:22) now we can simply come back to the component and let's start working on it let's make it side by side so we can see what exactly we are working on bring it here drag it on the right and let's go ahead so we'll take a anchor and we'll have a class called we'll say absolute insert zero insert that will take a div it will have a class called absolute inser zero Z index 10 block is going to be block text zinc 100 opacity zero group over opacity is going to be 100 we'll have a transition
(6:16:04) opacity duration I 100 Pointer events none line clam padding X2 text small padding X4 it will have a style we'll say linear background and we have to assign the property so let's call this two top rgba will say 0 0 0.8 it will have a 0% then we'll have the next one rgba 0 0 0 0 and this will be 60% and the last one is going to be our 0 0 0 0 and it will be 100% perfect but I'm getting some sort of error okay my my bad I have to give the keep here so I can save background and this will save perfect we
(6:16:59) got it now we can simply come back here we'll take a div it will have a class Flex shrink full hide full Flex items and inside that we can display this div it will have a class called Flex Flex column inside that we'll take a p it will have a class called text small and we'll have marching bottom 1.
(6:17:24) 5 and let's give this one it will have a class called font medium leading s inside that we can it will have a style called over flow hidden display is going to be minus B kid box and we have to do the browser setup as well so webkit we have multiple property so this will be let's say three and we'll have this webcad box origin is going to be vertical perfect inside that we can display our text the dynamic text so we'll say item do prompt and we have to slice it down I don't want to display the entire prompt which user have asks so I want to SI
(6:18:10) this 224 and right now it's not displaying because this data The Prompt the the icons will only be visible on the over effect that's why it's not reflecting here so let's work on our data set and this will be the length if it length is greater than this then we can simply display this or this perfect right now it's not displaying because it will be activated only on over effect if you do the inspect element we have the data perfect so don't think that it's an error we have the data right up here
(6:18:44) based on the filter we are getting it up and here we have an issue called AI model AI model so I have noticed one more problem I have to fix in one more place come back here in the index and here we have to do a little bit fix so this is the function we have this is good and here we have it it's not a AI model m o d e l because this is the fix we have done in our post control and make sure to do the changes here as well perfect and that's the only thing we have to do remove this one now we can reload the page and you
(6:19:23) can see this time we getting the data perfect this is the one we are getting based on the filter one we have this prompt make sure to check the spelling correctly that we have applied The Prompt prompt correct now we can simply do the console log of item that we are receiving the data and there you can see yes we are receiving the data here we are all of the data about the single post it's also looking great it's getting now we can start working ahead so we have done all the small fixes in our code and we have all
(6:20:05) of this data about the user and the post all of that now let's come back here and let's make it side by side and just continue working on our js6 remove this one perfect so this is the prompt and now we have to display the negative prompt to Simply copy and paste here and we can come back here make the changes here so we'll say opacity is going to be 70 leading s text Excel margin bottom one and this will be negative prompt copy and paste here perfect now we can simply come back here and we have to
(6:20:42) display the icons so we'll take a d and we will have a class called absolute top zero left zero right Zer pading two Flex Z index 10 text zenc 100 justify between pointer events none opacity zero group over opacity 100 transition opacity let's call text small inside that we'll take this anchor and this will be class is going to be background zinc 900 background opacity is going to be 50 on over effect we have background opacity is going to be 100 transition opacity is going to be Flex item Center and we'll have
(6:21:38) justify Center pointer events auto cursor is going to be a pointer text large height 10 width 10 rounded large that's all the classes we have now inside that we can take our icon so we already have this image search that's the icon we got it now what we can do is we can simply come back here take a div it will we'll have a class called Flex Flex column space Y2 inside that we'll take our Dynamic data and will say item likes include the user was actually logged in if that particular user ID is involved in the particular post likes
(6:22:28) then we want to Simply display icons on different icons so so what exactly I'm doing here we are checking that whether the user have liked the post or not if it's like the post then we have to display a different icon or if the user not like the post then we have to display a different icon so we'll take a button it will have a class let's call Background zinc 900 background opacity is going to be 70 overflow is going to be background opacity 100 Flex item Center justify Center we'll say padding is going to be
(6:23:05) a pointer evens Auto cursor is going to be pointer active we'll say scale is going to be 90 transition all will have a rounded large let's call it rounded large Tex large height 10 width 10 and inside that we can display the heart and we'll have a color is going to be red means user have like the post if it's not like the post I can simply display the same button but I have to Simply change the color and perfect got it now we can simply copy the button and that's what we can paste here and we have to do a little
(6:23:55) bit changes this will be 50 and I can simply come here remove the portion from here now we can add the classes called transition opacity Flex item centers we'll justify justify Center pointer events auto it's a pointer then we can add the let's say rounded large and that's our icon and we can simply change the icon to be magic now we can simply come back here and we can display the image so we'll take the image so we have the image in this we'll take this template eror and now we have to get the
(6:24:42) domain so we already have the domain URL and we can simply provide the path which is inside the folder the name of the image which we have right up here so what exactly we are doing that we are simply getting storing the name of the image in our database and in the folder we have the image so we are simply providing the path and I want to have the first image because in V2 model we can generate up to 10 and I'm allowing user to generate up to five so it will have based on the index so I'm accessing the first
(6:25:13) image there it is you can see it's reflecting perfect but somehow it's quite big we have to see the classes that why it's so big and on over over pick you can see it's looking great we can tap and we can open it up and on over pick our icons and images are also displaying fine okay you can see the condition we have built everything is looking great but why the image size is quite big we need to have a perfect alignment so let's add the class we'll say pointer event none but still I'm having the same
(6:25:51) issue so we have to see the div that what else we made a mistakes let's come back here so I have noticed few thing I need to do the changes I made a small typo so first thing you have to change the spelling of this s n u it's not s n so this is the fix you have to do simply remove this one and this is the exactly the same thing make sure to change the spelling to this remove this one that's the two fix now we can simply come back here and here you have to provide this bracket sorry comma I forgot to add this
(6:26:22) one so make sure to provide this and after that you have to do the changes here so it's i n s [Music] e s okay that's what you have to to provide here now looks good now we can simply come here and here you have to do the changes so this will be background provide this no just provide this back here opacity 100 and the rest will be fine looks great now we can come back here still we are having the same issue but we have fixed a lot of it and it's looking perfect on the mobile device you can see it's responsive on the mobile
(6:27:01) device but we have to do a little bit fix we can come back to the generator and let's generate one more image let's give the prompt so I can call this nature with tree and birds and let's give the tag it's going to be nature it will be trees let's click on this ratio size is going to be this one click on generate and it's generating just wait it's processing once it's get generated we'll have the images and everything will be updated perfectly and you can see it's generated
(6:27:36) successfully and if you reload the page you will see the credit went to zero and now you can click and you will come back to the buy page so everything's working fine come back to the homepage and we have got this two images we have generated but somehow it's not perfectly align so we have to check the CSS which we have applied so there might be an issue in the CSS file which I have to do the testing and that's why I really don't like to use Telvin because it's make our component pretty huge you can
(6:28:05) definitely do the refactoring but it's make our company looks very huge because we have so many classes to apply and looks good to me and that's the only thing I want to cover in this video we have treaten so many code in our component and we have done a lot of fix in the next video we're going to do the fixing and complete the entire project so next video is going to be the last video of our project so let's move to the next video everyone welcome back to the final part of our a generator in
(6:28:34) the last five part we have completed all the functionality and designed a lot of UI component in this video we're going to complete our entire application this is where we Liv and we had generated this images but we have some problem in the CSS styling and that's what we're going to fix after that we're going to Simply continue so this is what we have we have to fix this one and the images are not properly aligned that's what we have to fix the Tas systems are working fine if you come back here and change
(6:28:57) the model and we have a problem V2 model so it's not filtering it so that's the one fix we have to do we come back to the V3 and will reflect the same image so we have to do a little bit fix so come back to the code and here we are in the image card and we're going to start fixing from here so we can simply come back here and I noticed that I made a small typo it's inset and this is the fix I have to do let's do that se and save it now you can come back here you can see this text and the overlay color is perfectly aligned
(6:29:32) and we getting description and title perfectly on over effect it's working good now we can simply come back here so we are done with this now we can simply come back to the index page and here we have to do a small fix so this is the problem we have I forgot to add this bracket the entire closing bracket and because of this our grid system was not working so make sure to provide this and save it and if you come back here reload the page and you will see the images are perfectly aligned and we are getting
(6:30:01) this nice over effect and the images are ion and on the click event we are getting this image single image so things are looking pretty good this is fine now we have to Simply deal with this one and I made a small typo here as well so that's the fix we're going to do it so what we can do come back to the code and we can simply come back on the top in the index page and we have this particular function which allow us to filter the entire data so we can come back here this is the entire function I have you can see calling all post all we
(6:30:30) have to do is to fix this portion you can see I added an extra e I have added this extra e and because of that it was not working so let me remove this uncomment this and remove this portion and save it remove this and save it so it's D A L l- e- V2 so this is the naming convention We are following once you will save our a model will work fine so reload the page and now if you change the model the image will be not visible because we haven't generated any images using V2 model so things are looking great now we can come back here and
(6:31:05) bring it back the images so all the filter systems are looking great we have no issue in that now we can come back here click here and close this one close this one now we can simply come back to the history page and there we have to do a little bit fix so this is the one which is fine we don't need to make any changes here now we can simply come back here here we have to do the changes in the model so exactly the same mistake remove this one and save it perfect now you can come back to the history there you will find that the
(6:31:34) those are the images I have created and everything is looking great you can even do the filteration so if I type create you can able to filter if you remove that it's going to pull out all the images come back to the YouTube and that's all is working if we check the filter system here it's working perfect so we done with this now we can simply come back here in the history page in the main function and here we have to do the changes so you can see this is what we have I forgot to add a weight and that's obvious you have to
(6:32:05) add it because when the data will come in the come as a form of promise we have to Simply wait and resolve the promise so that's what you have to add and here you have to add it and provide the user ID because this time we are going for the user images the user is logged in and fetching all the images which that particular user is created so we have to pass the ID so make sure to do this changes and the this would be fine perfect simply remove this one and remove this one and save it and that's the only change you have to do
(6:32:37) here now you can come back here go back to the like section and here we have to do the exactly the same thing so we have to Simply provide this a wait remove this one and save it now we can simply come back here and we have to Simply remove this one this is the old one and this is the changes I have done perfect now if you click on the like you will come back to the like page and we haven't like any images that's why it's empty so we can come back here everything is looking great now we can simply start working ahead and we can
(6:33:08) work on the single image component so let's come back to the code and let's close this one come back here go back to the components and this is the one we have to work single image so let's make it side by side so we can see what exactly we are working on perfect and you can see the images is the component is opening now we can simply close this one come back here and we have to receive the prop so we have to receive these two props single ID and set single ID so let's copy that one and that's what we can
(6:33:42) receive so let me come back here give this bracket and receive that now we have to Simply receive the last one is single ID so this is the one copy and that's what we can receive so this is the only two prop we need because based on the ID we going to make a call to our backand and we're going to fetch out the entire information right up here in the single image perfect you click here and you can click on this and it's opening perfectly now what we can do we have to import a lot of things so first we have
(6:34:12) to import from react so we'll import use State and we'll use effect then we have to import file save because we'll allow the user to download and from there we need this save as then we have to come back here and we have to import the let's say SVG icons in that we need the close copy Link Link follow magic 2 Arrow right arrow left Arrow right two we'll have a download and we'll have a heart rug heart outline delete that's perfect we got all the icons now we can come back here we have to import the function so it's going to
(6:35:15) come from our utils SL index and we have to import dislike function then like function then we have to import check o function then we have to get get single post function and we have to get the delete function perfect we got all of these five functions now we're going ready to interact and work on the project so first we going to take the environment variable we'll take the domain URL and that's coming from our environment variable next public we'll call it domain URL perfect now simply copy and paste
(6:35:57) here and this will be call domain and we'll call it domain perfect we got the this two environment variable and now we have to take a lot of State variable so come back here we'll call it use State this will be like by default will be false the second one is going to be post details it will be empty by default because when we going to get the details from our back end we're going to store in this particular State variable then we have to take another one this will be active user then we'll take another one this
(6:36:31) will be a loader then we take another one this will be a selected image selected image then we have to take another one this will be call recall and by default it will be zero and the logic I'm going to implement that when the user will click and the component will open and user will like the image so whenever the user will like delete or do any the action we have to Simply recall the function internally in the component that's why I'm taking this variable come back here let's take another one this will be delete
(6:37:06) post and by default it will be false so we are getting all of this state variable now we can simply come back here and we have to take a function we'll say AI image download and all we have to do is that when the user will click on the download button we allow them user to download the selected image so it's going to take the image and here we have to build the condition so we have to build the URL so we'll take this domain URL slash and the image and I have to give this save it so we got the U image URL now we have to allow the
(6:37:39) user to save it so we have to Simply call the library and provide the information we'll say domain and we'll give the let's say image name perfect so we got it now we can simply come back here we'll take a function it's going to receive the text so we can allow the user to Simply copy The Prompt inside that we going to call it Navigator do clipboard WR text and we can pass the text so it's can copy now we can come back here we'll take a variable call calling like so this function will allow
(6:38:21) us to like the post it will be Asing function and that we have to Simply pass the post ID and we have to do the normal works we'll take the cry and catch and we have to Simply console log out if anything goes wrong so first we going to Simply turn off the loader by default it false and then we have to Simply call the console.
(6:38:41) log the error now we can come back here we have to start the loader after that we have to make a call to our API so we'll take this response wait and we already have the function so we'll call it like post and we give the post ID then we have to check for the response because when the post will be like successfully we'll get a response so that's response we have here in the response object we have to check for status if it's equal to 200 means the post is like successfully then we have to Simply update the state variable so
(6:39:11) we'll say set recall is going to be recall + one so it will increment and it's going to recall the fetch function now we can simply call this set loader to fals and that's the entire function we have for liking the post it's very simple because we have done all the hard work in our backand and in the utility functions all we are doing is simply calling the function now simply copy and paste here and this is going to be our dislike post it's going to take the entire same parameter all we have to do is to Simply change the
(6:39:42) function name so this will be dislike post perfect that's our function is ready for disliking the post now we can simply copy this portion and this one is going to be for our delete post so it's going to take the post ID and here we have to change that to delete post and everything is ready and we can simply remove this because because once the post will be deleted I want to reload the page and I want to reset everything so let's call this window.
(6:40:14) location do to reload perfect this ready now we have to get the function which allow us to fetch all the information about the single post so let's build that so we can simply come back here copy this one and paste here and change this to let's say usero because in that we going to fetch the user info as well as well as the post ID so we simply come back here we'll remove this portion we'll take this if post ID exist then I want to Simply call this single post and we have to make a call to our backend and that I can simply pass the post ID so I will
(6:40:47) have the single post once I have the single posst I can simply set that data to our state variable that's the first thing now the second thing is we have to check and by default we have to set the first image as a default so we can use this select selected image in that I can simply access the data so we'll come back here and I can say single post and I can take the first index because this imagees will contain the array of images so I can simply access the first image simple once I done with that now we can
(6:41:18) come back here we'll take this const response and this going to make a call to our check out and it's going to give us the details about the user so first we have to set that to response because this response will contain all the information about the user and then we can come back here we'll build this condition we'll say if response ID is equal to single post and that we have user ID means the owner who created the image is logged in and interacting with the image then I want to Simply activate this call
(6:41:56) set delete post to true so the delete button will display simple logic what I'm doing I'm checking the one the user who created it and I'm just trying to match it if it matches then I have to Simply activate the delete component I can simply come back here and build a second condition will say single post likes include includes the user the user who logged in and the data is available here response.
(6:42:27) ID so if the user already like the image then I can simply set this to true so it will display that like button already like button perfect else we can simply call it to false simple logic in this way user can like or unlike the images and that's the entire thing we have to write here in this particular function so first we are getting the information about the single post then setting up the state variable then we are calling the odd function and just checking for the condition and the like and unlike we're done with that now we can simply call this function
(6:42:56) Whenever there this particular component get open so we're going to use this hook inside that we can simply call this so I want to call this this function every time there is a there is a change in the recall and let's call this one perfect and pass the single ID and that's the only thing we have to do here so this is the entire function is ready first we are importing this then importing the icons the function State variable we have taken all of the states then we have build the internal function for
(6:43:26) downloading this is the copy and here we have for like dislike delete and here we have this user information and this is the function we are calling now we can start working on the GSX straightaway so everything is looking good you can simply go to that and you can see the components open now let's write the GSX so first we're going to take a class let's call this single image with fixed insert zero with screen height screen overflow hidden padding x16 padding y 4 Flex justify Center Z index 40 on a small
(6:44:10) screen Z index 50 background zinc it will be 900 background opacity is going to be 80 now if I click on this you can see we having a nice overlay effect and we getting our text so the overlay effect is working fine now we can have to work on the internal component so this component is going to be very big it's one of the biggest component we're going to write here so we can come back here let's add the inline style this will be called style we'll have over scroll Behavior it will be contain then we'll say m height is
(6:44:50) going to be webkit fill available perfect now we can simply remove this one take a div inside the div let's come back here let's add a on click function and on the on click function we have to Simply remove the single ID so it will close the component because we are working on the closing button it will have a class let's call this absolute top is going to be zero left is going to be zero cursor pointer it will have a h12 vid 12 Flex item Center justify Center text for Excel drop shadow and there it is
(6:45:37) perfect now inside that we can display our close icon and if I simply click here you can see the close icon was working fine so as it can open and they can close it that's how it's going to look on the mobile device okay so we done with that now we can simply come back here we'll take a div it will have a class single scroll Flex Flex column background zinc 800 drop shadow Excel overflow hidden rounded Excel border border zinc 700 box content inside the div will take a div it will have a class let's call this
(6:46:27) Flex Flex shrink zero overflow hidden text base padding X5 Flex Flex call height Auto it will have inline style let's call this height fit content with is going to be 400 perfect you can see night now is looking great now we can simply come back here we'll take a div it will have a class let's call this margin top six padding X4 padding y 3 background zinc 700 rounded XEL Shadow background opacity 50 font light Flex Flex call space y5 there it is can come back here we'll take a P tag
(6:47:32) inside that we can take an anchor and we can take a class let's call this background red 500 background opacity is going to be zero rounded over effect background opacity is going to be 40 cursor pointer inside that we can display our data The Prompt so we have that in the post details and if I click you can see the prompt is reflecting now I can simply come back here we'll take a div it will have a class let's call this Flex text small font light inside the div we'll take another div it will have a class
(6:48:10) called Flex Flex One Flex row space X2 margin right two ins set that we'll take a let's say we'll take a div it will have a on click function and on the on click function we have to Simply call this copy text so user can simply click and they can copy The Prompt and it will have a class let's call this text extra small rounded medium on a small screen we'll say text is going to be extra small active is going to be scale 95 we'll have a transition all we'll have transform let's call this one transform
(6:48:53) GPU we have vid is going to be white space no wrap Flex One Flex select none cursor pointer over effect we want background zinc 600 and border border zinc 600 background zinc 700 items Center justify we're going to have Center and it's going to have Shadow this will call Shadow padding x2.
(6:49:30) 5 padding Y is going to be two width is going to be fit content and these are the classes we have apply on our Dev now you can see we can come back here we can simply give the icon so we'll take this copy icon and we can display the copy prompt text now if you click you can see icon is reflecting and we have our text perfect we're done with this section now what we can do is we going to have a similar section simply close this one and copy this one and paste here all we have to do is to Simply do the changes so this will be called let's
(6:50:00) say domain and we'll have the name of the images so user can simply copy and you can open and share wherever he or she wants once we done with that now we can simply come back here and we can simply change it so this will be called link and this will be call URL copy if you click you can see we got this two buttons now we can simply come back here leave to div and we'll take a anchor and I want to Red the user to the create section so I'll add apply the classes text small withd 12 Flex select none cursor
(6:50:43) pointer over effect we want background zinc 600 border border zinc we'll have let's say 600 background zinc 700 item Center justify Center rounded medium Shadow pading X3 perfect inside that we'll take a link follow and we can simply display the link so user can click and it can follow perfect now we can simply come back here live do div and we can take a div it will have a class let's call this one to flex space X2 padding two inside the div we need this section Cy the angle and that's what we can paste here and we
(6:51:34) have to do the changes so this should be let's relect all remove this one let's apply the classes called rounded medium on a small screen text small we'll have a group margin top four whites space no wrap we'll have Flex One Flex select none then we'll have a let's say cursor pointer over effect we'll have a brightness 110 background gradient two top it's two top then we can say from Indigo 900 viia Indigo this will be 900 and we'll have a two indigo is going to be 800 and we'll have a drop
(6:52:23) shadow items Center justify Center and we'll have a padding x 2.5 padding Y is going to be 2.5 and WID is going to be fit content active is going to be scale 95 and we'll have transition all so this is all the classes we have apply and this will be called Magic 2 perfect now we can simply come back here and call this open Creator so if you click in here you can see our button is working fine perfect now we can simply come back here copy this entire anchor section and we have to replicate it and here we have to do the changes to
(6:53:05) history so user can click and it's going to go to the history section and the classes would be fine we don't need to make any changes like we have to do a little bit changes so let's have a look so this is fine like we're going to have the active and this section is should be not there remove this one perfect now here we have to do the changes to be let's say Arrow right and let's bring it on top and let's change this to explore your history perfect the buttons is reflecting now we can simply come back
(6:53:36) here and we'll take a d it will have a class called on the medium device will say margin top six margin top four opacity is going to be 80 margin left two grid grid grid calls 2 we'll say Gap two on the medium device Flex Flex wrap medium device will say Flex call medium device will say space x0 medium device will say space y1 and height is going to be Auto padding bottom is 32 on a small screen we'll say padding bottom is going to be eight inside the div we'll come back we'll take a div it will have another div
(6:54:18) inside the div and it will have a class let's call this text extra small opacity 50 inside that we'll take this model and we can display the data so we can take a class this will be called text small inside that we can display the data so we have the details in the post details and I can display the model which we have used to create the images now if I click on it you can see the model is reflecting and the section is reflecting perfectly now all we have to do is to Simply do a little bit copy paste so simply copy
(6:54:54) this one and paste here and change the data so this will be called Dimension means the image ratio and the quantity so this will be called quality got it now we can simply copy this one and paste here and this will be let's call this quality and what kind of quality we have used so quality copy and paste here and this will be called style and change this to style copy this one and paste here and this one is going to be called created Creator so we already have the data so inside the post detail we have the user information and from there I
(6:55:33) can get the access of the usern name perfect we got it now we can simply come back here and we can leave two div turn down here we'll take a div it will have a class called width full medium screen we'll say height full Flex Flex call style is going to be let's say ordered is going to be zero inside the div we'll take a div it will have a class called Flex Max Auto Marin top is going to be 20 pixels inside the D will take the button it will have a class let's call this hide full with 14 text 5xl Flex
(6:56:13) item centers justify Center opacity 10 inside the button we have to display the icon Arrow left then you can see the arrow icon is looking good now we can simply come back here and we can take a div it will have a class called relative inside that we'll take a div it will have a class called absolute top is going to be two right is going to be two Z index 30 inside the div we'll take a button it will have a class let's call this to background zinc 900 background opacity 70 on over effect we want to have
(6:56:51) background opacity 200 Flex item Center we'll have justify Center pointer event Auto cursor pointer active scale is going to be 90 and we'll have a transition all we'll have rounded large text large height is going to be 11 width is going to be 11 and that's all we have inside that button we'll take a div it will have a class let's call this one to scale 50 inline style is going to be let's say font size is going to be that's 2.
(6:57:30) 5 Ram we got it now inside the div we'll take out data so here we have the like State variable based on the true and false we have to display like button or unlike button so we'll say if it's true then we have to display this particular section for heart and it will have a inline style so I have to turn this to let's say color red means the user have likeed the post else we have to display the user to like it so it will also have a unclick function let's call this calling dislike and pass the post
(6:58:08) ID perfect same thing we have to do with the L statement so we'll take this reg heart and we have to send the prop the function we have to pass so we'll take on click and we have the function for like and in that we going to Simply pass the post ID so that's our like button or un like button is ready now we can simply come back here so come back down below the button and from here we have to take this Dynamic block and we'll say delete post and this particular section will only visible if the person is
(6:58:38) interacting who created the post so if I have created the post so I only can delete it so we already buil the condition above so we'll say delete post if it's true then I want to display this so we'll take this let's call this button close this one let's apply the style it will be Colum margin top is going to be one ram it will have a class called background zinc 900 background opacity 70 on over effect we can say background opacity 100 Flex item Center justify content pointer events auto
(6:59:25) cursor pointer will have active scale is going to be 90 and it will have a transition let's call this transition all rounded large text is going to be large and we'll have height 11 width 11 perfect now inside the button we can take the div it will have a class call scale 50 it will have a style let's call this font size is going to be 2.
(7:00:02) 5 Ram inside the we can display the icon delete icon and it will have on click function and we have to Simply call the delete function we have pass the post ID perfect got it now we can simply come back here we'll take a image and we already have the image so we can simply display this select image and it will have so we have to build a dynamic condition so we'll say if select image is there then I want to give the URL of the image so we'll take this domain URL SL select image else I can simply say domain URL SL post detail image it's going to
(7:00:45) be first index simple so when it will open for the very first time it's going to Simply display the index value image but when the user will select on the other images is going to be selected and it will display in the selected image so perfect I'm getting some sort of warning here okay okay this is the error okay I noticed one thing simply format this properly and I have to Simply format this one as well and okay my bad so this is the bracket I have which I need to Simply provide here so provide this and
(7:01:16) remove this one save it perfect make sure to check what I have done okay now you can see the image is reflecting but the image is not perfectly aligned so we going have to fix so here I have to provide this Ram so it will make our icon a little bigger now you can see the icon is bigger now we can simply come back here and here we have to work it will have a class let's call this single Image new then we can simply copy that one and paste here and here we have to do the changes so this will be our let's say relative
(7:01:52) Z2 New Height image and I can add little bit more classes here so let's add this absolute top is going to be Z left Zer and Z index 10 so this is the classes I have apply on the first one actually we can come back here and we can come here we'll take a style this will call withd is going to be 3 30.
(7:02:23) 0 56 pixels we have a height let's call this 4 57 pixels we'll have a Max width is going to be none and we can come back here I can see the image is not reflecting that's interesting and I noticed the problem we don't need to apply this classes so simply remove this one and just keep this one single Image new now if you click the image will reflect here we definitely we going to fix this so let's come back here and come here we'll take a div it will have a class called absolute bottom to right to space y to flex Flex call
(7:03:04) Item and Zen index 30 inside that we'll take a anchor it will have a on click function and we'll say AI image download and we allow the users simply download it so we can simply pass the selected image it will have a class let's call this background zenc 900 background opacity 70 on over effect we want background opacity to be 100 we'll have a transition opacity Flex item Center justify Center we'll have a cursor pointer text large height 10 width 10 rounded large inside that we can take our delete I download
(7:03:50) icon perfect now we can simply come back here lift two Dev and we can take a button it will have a class height full withd 14 text 5xl Flex items Center justify Center opacity 0 over effect we'll have opacity 100 cursor we'll have a pointer inside that we'll take our Arrow two now we can simply come back here and we have to display the images down below so we can simply come here we'll take a div and will have a class called Flex space X2 items Center justify Center we'll have overflow is
(7:04:36) going to be hidden with full Flex wrap margin top four on the medium screens we'll say margin top is going to be 10 pixels and when medium screen padding X is going to be two inside that we have to display the images because in V2 model we can create up to five images so let's render that image so we'll say post details inside that we'll have the images it will be an aray and from there I can simply run a map and we'll say image index and I have to do instant return so in that I can take a div let's
(7:05:10) close this one let's take a key is going to be index we'll have a class relative it will have on clip function and on the on clip function we have to Simply set the image to our state variable so we'll pass the image perfect now we can add the style height is going to be 50 wi is going going to be 36 pixel 111 and we'll have a margin bottom is going to be six we got all of the classes now I can simply come back here and copy this entire image and that's what I can simply paste here I have to do the
(7:05:49) changes so I can simply remove this section so remove this section we're going to have the domain URL and the image let's pass this one okay so URL and the image and the rest would be fine this is this should be changed let's remove this one and let's add this select none cursor is going to be a pointer we'll have opacity 100 I want to remove this one to Auto and remove this one and it will have object fit is going to be content we'll have a background color is going to be black and perfect you can see the
(7:06:30) image is reflecting fine but still we have some issue but we are getting the data now we can simply uh we can do one thing we can come back here we'll take a dip it will have a class called hidden inside that we can take a image and I can take this template tutoral will say download SL images perfect now we can simply come back here let's make on the big screen so this is fine this is fine all of things are looking great we don't have any issue in the that we have written all of that that looks great this is the entire huge section we
(7:07:12) have for like and this is the delete and images and all of the things we have here perfect now we can come back here and if I click on this okay there is a problem in our WID so it's working fine we are getting all of this detail but the vid is not perfectly aligned and you can see on the click event the image is also changing so all the logic we have applied is working fine I'll click and get the image so let's try to fix this one if you click on this it will take us to this particular one okay I have given
(7:07:43) the wrong name so that's the one change I have to do come back here if I click on the prompt I can copy and you can see I can copy the URL and the image is working fine perfect close this one open everything is working go come back here and we have to do a little bit fix so I can see the problem so here we have this two div close this one and I have to add wrap this inside a div okay so let's take another div it will have a class Flex full height full self stretch Flex column Flex column on the medium device
(7:08:29) Flex row pading bottom 16 medium we'll say padding bottom zero medium padding top is going to be zero and we'll have a flex line one and cut this dip and bring it back here and paste it now it will work fine perfect save it come back here now if you click it will take the entire bit looking good perfect you can see all of things are looking great you can click and you can open the image you can simply click and it will take you here so this is the wrong name I have given which I have to fix so come back here let's copy the
(7:09:03) name so rename copy and that's what we have to do the changes here so let's come back here replac here and let's bring it back uh we can click here come back here this is fine and here we have to do changes slow like this is good this is the place where we have to do the changes perfect now click here you can click on this it will take you to the History Section and if you click on this it will take you to the create section perfect click on this it will take you to create SE so everything is working
(7:09:43) fine you can see all the images are looking great you can like and the image you have liked successfully perfect you can like it and you have liked the image reload the page click on that you will see if you come back to the like section you can see this is the two images you have like and the data is reflecting fine here Perfect come back here everything is looking great you can simply click and you can simply like the images copy The Prompt and perfect like and we can like it come back here in the YouTube and you
(7:10:20) have liked it and it's reflecting there okay our dislike function is not working somehow so you can see click and it's not working let's do the inspect element to see what exactly went wrong and come back here and here I'm getting this X's area so there is some problem in our end point so it's telling me 404 why this is the 404 error I'm getting and I'm getting this message in the data field that you have already liked the post but yes I've like this but I won't Delight the
(7:10:50) post come back here this is what we have so I'm getting this warning make sure to save it to restart the server close this one and we can come back here in our backhand API go back to the router models not models we have to go back to the router in that you will see this is the end point we are calling for dislike DISD L like and we are passing the post ID this is fine there is no problem in that we can come back here in the utils and in the utils we have the function which allow us to connect with this particular route so
(7:11:25) this is the one we have dislike and we are calling the exact spelling API post dislike we are passing the post ID and the user information and I have noticed the problem I have noticed the problem that what exactly went wrong so simply remove this one this is the dislike post you don't need to make any changes just keep it as it is now you have to come back to the post controller and here we have made a small mistake so you can see this is the dislike post controller and here we are doing the check we are getting
(7:11:52) the post ID and the user ID first we are finding the post that whether the post exist or not second we are finding the user and third we are checking that whe whether the user have already liked the post or not so this is the problem I have I have to provide this exclamation mark and this is the message we are getting if I come back in the browser you will see that's the exact message I'm getting here if I click and if I try to click on the like here we have it you have already liked the post because that's what I'm checking here so
(7:12:24) I have to give this exclamation mark so it will check in other way perfect and that's the only thing you have to do reload the page and now you can able to dislike the post so click on this and click on this dislike and you have disliked the post you can see got the status to okay post dislike successfully like and dislike perfect reload the page so our dislike function is working great come back here click and like cut this go back to the like section and that's what is reflecting you can dislike and you can
(7:12:59) like it perfect got it now you can come back to the home and everything is looking great copy prompt open history this one download you can simply click and you can see the image you have downloaded successfully perfect and here you can see the name if I click on this this is the name first we are giving the name of our brand and then we giving the ID we have generated means the user ID and the time and date perfect so we are done with this entire home section everything is looking great we're done with this entire section
(7:13:39) close this one this is also done now close this one close this one close this one and now we can simply come back here and we can simply go back to the history and go back to the likes and you can see the this is what we are getting if I come back to the generate and this is what we have to work real and this one the component so we have a separate component for that so if we come back to the page is there it is and if I go all the way down here like this is the section we have to work which we have already done it which we have already
(7:14:10) done it now we can simply come back here and we have to do a little bit fix right up here so this is good so here we have the body part I have to add more div here so simply close this one come back here we'll take a div it will have a class called Flex item Center justify center with full inside that will take a div it will have a class called Flex with full Flex column reverse Max width is going to be 1400 pixels pading bottom 532 padding X2 small screen padding x 8 inside that we'll take a DI it will have a class
(7:14:54) called active outline none Focus outline none inside that we'll take a let's add an inline style as well so let's call this one to tab is going to be zero we'll have a style we'll say position relative width is going to be 100% Max width is going to be 100% will I have a height is going to be 994 pixels we'll have a Max height is going to be let's say 9 95 Pi pixel we got it come back here reload the page come back here come inside the div and we'll take a div it will have a style let's call
(7:15:41) this WID is going to be 100 we'll have a position is going to be absolute we'll say writing mode is going to be horizontal tab inside that will take a div it will have a class let's call this margin bottom 10 so we got this diff margin bottom 10 pixels now we have to Simply cut our button section so come back here and select all this copy cut and paste here perfect we got the button you can see looks perfect now we can simply come back here we'll take our Dynamic bar data and we have to Simply render our images so
(7:16:26) we'll call this render length if the length we have then we have to Simply call this fragment inside that we can take a div it will have a class called Flex Flex wrap justify Center Flex one with full item Center and let's add the L statement as well inside the div we'll take the dynamic array and we have to Simply render the images so we'll take this item index and we have I already have the component so we'll call this aart image card and that we have to send the prop so let's call this
(7:17:08) index then we have to send the item and we have to send the Single Cell ID perfect we got it now we can simply come back here on the big screen and everything's looking good now we can see the tabs are working great you can go to different tabs because we have the images come come back here and come back here we'll take a div it we have a class called panning X4 text small text Zen index 10 text zinc 100 with full Flex items Center justify Center margin top two inside that will take a DI it will have
(7:17:51) a class called opacity 0 over effect we'll say opacity is going to be 100 we'll have a transition all cursor pointer we'll have a group inside that we'll take a div and call it title it's going to be load in editor inside that we'll display our text we'll say welcome to AI image generator power by the blockchain coder so I'll just want to redirect the user to the blockchain coder so ww.
(7:18:24) the blockchain.com slash Source Code section there you will find all the project source code and we will take a strong T and we'll say the blockchain code perfect looks great now we are done with this entire section now you can see we got this Blank Space perfect and this is the photo section we have and it's reflecting great can open different tab now we have to work on this particular section so we can simply come back here and this is the card component we have to work so we have to Simply receive the prop
(7:19:02) receive this and that's what we have to open it's has inside the pages and there we can simply receive it got it remove this one remove this one remove this one and let's make it side by side so we can see what exactly we are working on we can come back to the global and from there we can simply copy a few things so we already have this so let's copy this entire icon and paste here then we need this portion this environment variable and paste here and we have to fix a little bit so we don't need these so many things remove
(7:19:36) this one we need the image search we need the share download delete and the like one this is fine now let's make it side by side okay I'm getting some sort of error okay I have taken as an array I have to take as an object let's remove this one perfect got it now the tabs are working good now we can start working on the jsx so let let's take a class it will have a onclick function set single ID to items ID then we'll take this class it's going to be a dynamic class so first it will be Flex Flex call will
(7:20:23) have a group medium device will say withd is going to be 1 by half margin y 1 by 1 Point five then we'll take this template Ral and we have to add a dynamic class we'll say if index is equal we'll give the percentage and if it's equal to zero remainder so when we going to do the division and if it's zero then we have to apply this class margin on the medium screen we will say padding left 16 else we can say padding right 16 perfect now inside that we'll take a div it will have a class called Flex One Flex Flex
(7:21:08) call Item Center justify Center it will have a Max 1.5 inside that will take a div and inside that we'll take another div it will have a class it's going to be a self closing div and it will have an ID let's call this menu container let's move this one come back here we'll take a class and will have a block relative group select none cursor zoom in margin bottom four small screen will say margin bottom zero we'll have a rounded small medium rounded large Shadow large transition opacity
(7:21:55) duration 500 rounded large inside the div we'll take a div it will have a class let's call this absolute inser zero Z index 1 10 block text Zen 100 opacity zero group over effect we'll say opacity 100 transition opacity we'll say pointer events none line clam padding X2 padding bottom two X small padding X2 inside that we can display let's have a inline style we'll say style is going to be background we say linear gradient let's call this to degree 0 Dee we'll say RGB 0 0 0 0.
(7:22:56) 1 it will be 100% then we'll have a second one rgba we'll say 0 0 0 and this will be 0.1 on 30% and the last one is going to be let's say 0 0 0 and this will be 0 on 0% perfect now we can come back here and it's going to be a self closing div so remove this one come back here we'll take a div it's going to have a class let's call this stop top zero left zero absolute panning 1.
(7:23:34) 5 with full Flex Z index 10 opacity zero group is going to be over we'll say opacity 100 text zinc 100 justify between transition opacity padding X to margin bottom one text small inside the div we'll take a div it will have a class called No extend image flex no extend image Flex Flex call space y two inside that we take anchor it will have a class call no extend image background zinc 900 background opacity 80 over effect we'll say background opacity is going to be 100 we'll have a transition let's call this all Flex item Center justify
(7:24:32) Center cursor pointer Shadow medium active will'll say scale 90 height 10 width 10 rounded large will'll say text large and the reason why it's not reflecting because this entire classes will be activated based on over effect so just keep working on the classes inside that we'll take our icon which is the image search perfect we got it now we can come back here we'll take a button it will have a class let's uh come back here let's grab this entire class and that's what we can place here and here we have to do a
(7:25:13) little bit changes so this is fine I guess we don't need to make any changes just add this attribute we'll say data state is going to be close and we can simply add the icon we say share perfect now we can simply come back here we'll take a anger it will have a attribute download we'll say create new and download it will have a title let's call this download and it will have a class called Max large absolute top negative 0.
(7:25:54) 5 left 14 inside that we can take our this entire button copy and that's what we can paste here and this will be download perfect now we can simply come back here we'll take a div it will have a class let's call this no extend image Flex Flex call space y y1 we can simply copy this one and that's what we can paste here now we have to do the changes remove that one and this will be 70 and uh remove this one we can simply come back here and let's add one more this is going to be our pointer event Auto and we can simply add one more
(7:26:43) class so remove this Shadow one and let's come back here we'll say transition all and we can simply come back here and this would be fine remove this one change the icon to div it will have a class called scale 50 it will have an inline style we'll say font size is going to be 1 2.1 Ram inside that we can take our icon perfect I'm getting this remove this one save it perfect now we can simply copy this entire section that's what we can simply paste here and here we have to do a little bit changes so this looks
(7:27:35) good that's fine let's change the icon only delete now we can simply come back here live to div and we can take a image and we can simply pass the image so we have to give our domain URL and Slash the image is available in the first index perfect you can see the images are reflecting fine let's add the class we'll say width is going to be 1152 and height is going to be let's say 7 6 8 and we'll have let's remove it perfect and that's how things will look you can see it's quite big and it's looking great we have
(7:28:15) to do a little bit changes and you can see the tabs are working fine but on over our icons are very close to each other so we have to fix this cuz this is not what we have in the design so we're going to have some space from Top as well you can see on the click event we can open the image Perfect come back here and here we have to do the fix so first thing we have to do right up here so it's a not semicolon so this is the wrong I have done so we remove this one and just give a normal comma it was this and you have to give
(7:28:50) this one now here we have to do the changes so this between and transition is close to each other so we have to give this space okay it was this you have to give the space that's the one change now if you come back here things are great but we have to fix this portion now come back here and I can see the problem right up here so it's a justify the spelling is wrong so Jus s FY J us T FY justify and save it now you come back here now there is space have space it looks good and it's very responsive for screen
(7:29:29) Mobile screen as well so pretty good perfect now we'll come back on the big screen working great perfect now we can come back here and we can simply go all the way down actually we can come back here and I just want to have some space from the top so we can do one thing we can simply come back here in the apart image card and here we can simply add the margin top so let's say margin top is going to be two and save it and you can see I have a little bit margin remove the page okay let's increase the margin so this will be
(7:30:17) four save it and now we have good margin this is good for is good perfect you can like or you can dislike or like perfectly so we done with this entire page we're done with that all let's check the credit so let's sign it out and let's try to log and create a new account we'll say doat doat gmail.
(7:30:47) com password password click on sign up and we have sign up now let's login doat gmail.com password is going to be login and we are login and if I click you can see I'm getting three credit so it's also looking great now you can come back to the history there is no post I have created that's why it's empty if you come back to the like there is no post we have liked so if I come back and like a post this data will reflect in our like page so if I come back in the like you can see the logic we have implemented it's working fine
(7:31:15) you can unlike or you can like perfect now we can come back to the generate and let's create couple of images so first thing let's give the prompt so I'll call it body builder working out in the gym and doing chest workout today you can give whatever you want let's give the tax it's going to be gym body builder and just fix this one fix this one and now pick the model so I'll go with this this viid and the size is going to be this one and let's take the Instagram and click on the generate it's making
(7:31:52) the call just wait and finally somehow our AI model got failed you can see we got this 400 error message which is coming from our open a so what I can do I can simply do the inspect element because the a key we have provided is working fine sometime it's happened okay sometime your AI model failed to response there's no problem in the code it's happening because the AI failed to give the response so simply click on this and let's try one more time reload the page and let's give one more try so we'll say
(7:32:25) body builder working out in the gym let's give the tight tag gym bodybuilder select the model natural and click on this let's do the inspect element before we click so we can see click on this generate and it's generating and you can see we got the response from our a model and everything is working fine so sometime it happen that's not a big deal you can click and you can download the image and you can simply copy and paste the URL of the image and you can see this is the image we have successfully construct our URL
(7:33:02) perfectly can like it reload the page come back here you can see this is the one we have created this is the one you have liked perfect now you can come back here looks great come back and let's try to create few more so this is good we can simply go to the different tabs reload the page and everything's looking good now we can do one thing I just want to open the real section by default so let's come back here go back to the pages and here we can do one change so this is what we have in the calling post and here we
(7:33:47) have this YouTube so instead of YouTube I can go with the real because that's what we are following in all the pages so change this to real and reload the page and it will fix the issue so by default it's going to opens the image the real one perfect if I simply sign out and log out my with other account the blockchain coder you will see this real data will be reflecting here by default save it and if I come back to generate you can see by default it will generate the real one perfect perfect we got it close this one
(7:34:22) everything's looking great now we can come back to the homepage generate is good history is good like is good and now we have to work on the account page so it's going to be a quite little bigger page so we can simply come back here close all of that come back to the account and we need to do a lot of work so first we have to import a lot of things so use State and use effect then we have to import the cookie then we have to import our icons like Instagram that's coming from react icons d f 6 this will be AIS Ai and this will
(7:35:05) be B BD let's say BS camera real fill and this will be AI outline YouTube perfect then we have to import the csb icons we'll say home logo home logo search filter color take come back here we'll import we'll come back go to the components from there we can get the components so first is going to be the header then we'll have the get start we'll say image card we'll have slider we'll have a single image and we'll have a a part image card we got all of this component now we can come back here and
(7:35:51) we'll take this and we have to get the check o which is coming from our utils then we get simply come here we'll take this import information so we have already got the Json file in that I have provided you all the details and that Json file we going to render so we can simply access that we can go back to the data and from there I can get all the accounts then we can get the features which we are providing in our services and that file is also given if we come back here there you will find in the data folder that we have all of this
(7:36:26) file in which we have generated the dummy data so if you come back to the account that's all you have you can simply play around and check so we can simply come back here we got all of that come here we'll take a state variable this will be active user then I have to get this get user details and I have to Simply call the function try and catch console loog of the error and we can simply call the function so we'll say store cookie so I have to call this function when the cookie is available means the user is
(7:36:58) logged in we'll say cookie get and we can give the key token we'll say if it's available then we have to make a call to our a backand we'll say a wait check out and set the data to the state variable so that's our function is ready now I want to Simply call the function when the page reload let's call the function only one time perfect that's all the thing we have done we have imported this we have imported the component function and the data and the function is looking great now we can simply make it side by
(7:37:33) side and I'm getting some sort of warning okay this is the error I'm getting so to fix this we have to fix here it's not BD it's BS and save it and reload the page and here is another problem in the name of the feature so I've given the wrong file name so let's come back here let's rename and that's what we can simply replace here perfect now reload the page perfect the account is looking fine now we can start working on the j6 so first we remove it take the header then we can take a div it will have a
(7:38:10) class call margin bottom is going to be 50 pixels small screens margin bottom zero on a small screen we'll say margin top is going to be 56 pixel and somehow this is looking good but it's taking a lot of time for our web pack to Simply render the CSS and the the front end so everything is good let's minimize this one and let's make it side by side okay perfect now we can simply come back here we'll take a get started component and in that we can simply send the user information then we'll take a div it
(7:38:52) will have a class called padding top 8 on a small screen we'll say padding top 10 padding bottom six container Max Auto Max with 6xl padding X5 margin bottom 32 small screen margin bottom zero inside that we'll take a d click on this small screen Flex Flex column align Center inside that we'll take a div it will have a class called text 3XL small screen text 4 XL margin bottom is going to be six 5xl font logo font bold margin top zero text Center inside that we'll take our account then we can come here P P tag it
(7:39:41) will have a class called text extra small extra large text Center margin top two inside that we'll take our text we say choose the plan that's right for you perfect then we can simply come back here we'll take a div it will have a class Flex item Center justify Center Flex column Flex shrink margin top 10 inside that div we'll take a p it will have a class called text right text small padding right four padding bottom one it will have an inline style called with 300 pixels inside that will take a save 20%
(7:40:31) text then we can come back here we'll take a div it will have a class called border bottom bottom rounded full border opacity 20 Border white relative overflow hidden background zinc 900 Flex inside that div will come back here make on the big screen and reload the page and let's see how things are coming together and you can see it's looking great it's looking great so the text is there now we can simply come back here and let's work on the entire j6 first so it will have a style let's call
(7:41:18) this withd is going to be 300 pixel inside the div we will take a div it will have a class background zinc 600 text White Shadow medium background opacity 80 height full absolute top zero left zero rounded full inside it will have inline Style with 150 pixels transform translate 150 pixels and translate is going to be 100 like zero pixels inside the div we'll take a button it will have a type button it will have a class withd 64 rounded full padding y 2.
(7:42:13) 5 text small font medium we'll say white space no wrap Focus outline none Focus Z index 10 on small screen will say with Auto on small screen say padding X 7 relative text zinx 400 inside the button we'll take a starter plan we can simply copy and paste here and let's uh remove this one this will be white this will be Max plan we can simply come back here we'll take a plan commment this one and come back and reload the page to see okay somehow it's not reflecting so reload the page one more time it's not
(7:43:05) reflecting again so we have to do a little bit fixed and this is the portion we have to do it's transform so we have to say x and this will be Z save it make sure to fix this and we have to fix a lot so first let's continue ahead in the jsx then we going to Simply fix so we can come back here we'll take a div it will have a class items Center justify Center margin top 8 small screen margin top 16 Flex call space y 6 space y0 and on small screen we say grid small screen grd calls three we'll have a small screen we'll
(7:43:50) say Gap is going to two medium screen will say Gap is going to be six it will have an inline style we'll say Max width 1100 pixels inside the div we'll take our Dynamic data so we'll take the feature map item index and we have to make it instant return inside that we'll take a d let's close that it will have a class call span One Flex strength zero border border opacity 20 background Zig 900 rounded two excels transition all height full Flex one border border opacity 20 Border white it will have inline style let's
(7:44:41) call it Max withd 330 pixels inside the div we'll take a div it will have a class let's call this padding X12 padding y 6 small screen padding X4 small screen padding y4 medium screen padding y4 Flex Flex uh this will be called medium padding X6 and flex call relative rounded 2XL it will have a inline style backround is going to be radial gradient RGB like what 1 194 97 2 954 and we'll have our 05 we'll have a second color 24 24 27 and 100% perfect now we can simply come back here
(7:45:47) we'll take a div it will have a class text left inside that div we will take a div it will have a class called Flex inside that we'll take a p it will have a class called text extra large margin right to inside that we can display the data so we'll have this plan if I reload the page you can see it looks good we have to do a little bit fix but it's looking great perfect now we can come back here we'll take a div it will have a class called margin top six bottom six inside the div we'll take a div it will
(7:46:25) have a class called Flex item Center item end inside that div we'll take a p it will have a class call text for Excel font semi bold inside that we can display the data which is the price then we can take another P tag it will have a class called text large opacity 700 inside that we can display the HTML Space Tag and we can display the type whether it's monthly yearly or annual come back here we'll take a p it will have a class called margin Y2 inside that we can display the building then we can simply leave to
(7:47:07) Dave and come here we'll take a anchor inside that we can display the UR link so user can click and it will redirect to the stripe payment Gateway and there they can confirm the payment and they will get the credit so let's apply the classes withd full height 11 Flex item Center just justify Center rounded large drop shadow padding X8 Shadow cursor pointer active scale 95 on over effect brightness 110 will have a transition all background gradient to top from synic 600 VI San 600 and two San 500 it we have a Target is going to be a
(7:48:07) next page means blank Das blank inside that we can say Buy credit perfect now we can come back here we can take a div it will have a class called Flex justify Center text small margin Y 2 inside that we can display the button cursor pointer select none opacity 50 over effect will say opacity 100 Flex item Center justify Center margin two on over F we'll say border opacity 550 we'll have a border opacity zero border bottom border white inside that we can display the item and we'll say monthly and this will have HTML Space
(7:48:58) Tag and we can display our SBG icon so this is the icon we have let's close this one current color in the fill we'll say current color we'll have a Stoke with zero and let's assign a view box let's assign the height width and we can go with the XML PS and this is the general convention we follow slcs B and inside that we can just find the PATH so this is none and we'll have a d make sure to give the exact ID replicate remove this one and let's give the second one 2 h 6.
(7:49:51) 59 l a L4 18 then we have 5.5 and all of that we have perfect so we got our SBG icon now we can simply come back here we'll take a div it will have a class March in Y3 pading X2 inside that we can take a if it will have a class text extra large in that we can say unlimited then we'll take a div it will have a class called text small opacity 70 inside that we can take a slow generation perfect now we can come back here we'll take a div it will have a class called text white text small text left space Y3 top margin top four margin bottom six
(7:50:46) inside that we'll take our Dynamic data and we can simply render the array so we have the item and in this features we have an array and we have to Simply render it list index you can check the dummy data there you will have all of these details let's render that we'll take a div it will have a class Flex item Center item Base Line Place items base inside that we can take our color tick and we can display the span it will have a class let's call this opacity 90 inside that we can take a HTML Space Tag
(7:51:27) and we can display the list item got it now we can simply come back here we'll take a div it will have a class called Marine top 12 inside that we'll take a div it will have a class called grid grid calls one medium device grid calls 2 Gap 8 medium Gap 10 inside that we display our our Dynamic data means the array the question and answer we have the information map item index is going to be an instant return take a div it's have a key let's give a class PR PR Indigo inside that we can take H4 it will have a class call margin
(7:52:21) bottom two in that we can take a span let's call this class margin right three hidden Target it's going to be inline flex and it will have an ID let's call this plan limit and it's going to be a self inside that we'll take another span it will have a class animate ping absolute inline Flex height three width three rounded full background Indigo 400 opacity 75 and it's going to be a s closing span remove this one now we'll take another one it it will be a self closing let's have a
(7:53:10) class relative inline Flex rounded fuel height three width three background Indigo 500 and now we can simply display the data item do questions come here we can a div it will have a class called text zinc 400 inside that we can display the description perfect now I can come back here we'll take a div it will have a class actually it has the similar structure so what I can do I can simply copy this one this is the entire close this one copy and that's what we can paste here let's remove this one and it's going to
(7:53:52) have the same classes the same structure no need to make any changes okay I can see one thing I can can simply take this question and cut and paste here and I have to do the same thing on top as well this will be call how does the plan limit works and here I have to do the same thing cut this one and paste here and here we don't have the data so we can simply display the dummy data which is the lowen I'll say lowen and it will give me this dummy data now what I can do I take a div it will have a class
(7:54:26) called margin top two inside that we can take a dumit data and I can simply remove few lines perfect looking great now we can see so finally we are done with this entire section if you come back here you can see that's how it's going to look good you can see this section is perfect and here we have an issue in our pricing section so they are very close to each other and the batter is also not reflecting so we have to do a little bit adjustment in the alignment but the rest would be fine that is to be
(7:54:53) fine so this is fine let's do the inspect element and this is how it's will look the responsiveness is working absolutely fine but the alignment is not perfectly so we can fix that we can simply come back here and I found the issue so first thing we have to do is to do the changes right up here if you come back here first we have to make this div as a self closing div close this one and we have to remove this sh from here and save it so one change you have to do there then if you come back here you can
(7:55:25) see reload the page and the button is reflecting fine Start Plan Max plan is looking great that's the one change we have to do and now we have to do on this card section they're very close to each other so come back here and here we are in the plan section and here you can see we have a Max width and here we have to add one more class called Flex so it's going to take the entire width and here we have to do the changes so here I made a mistake it's called f RM not f r oom so this is the wrong SP
(7:55:59) remove this one and here I have to do another fix it's called White space no wrap simply copy this one and replace in all the places perfect this is the fix remove this one and we can simply come back here and we can simply close this div and remove here perfect now it's looking good come back here relo the page and you will see perfectly this is the title we have the button perfectly align and our card section is spread out and with looks great you can click and you can come back to the checkout page and you can
(7:56:40) simply complete the payment Perfect come back here and go back to the data section there you will find all of this data we have designed for Max plan the price the images the billing model annual generate and here we have the stripe payment Gateway so when you will create the payment link from stripe that's what you have to provide here as well as in the environment variable that is the link and all of this data you can simply do the editing and will reflect in the front end perfect let's check the responsiveness it's 100% responsive for
(7:57:16) all the screen sizes absolutely great so we're done with this close this one close this one close this one close this one now we can start come back to the homepage and now we can start working on the payment section so you can see this is what exactly we have here all the tabs are working great here is the like one here is the account one perfect you can click and you can buy now come back here in the code and we can simply come back in the AP in the component inside that we have the global and we have to work
(7:57:48) on the payment processing this one once the user will complete the payment we're going to display the particular component and we're going to make a API call right up here so let's come back here import couple of thing use State use effect then we have to import EXs library then we have to import router because we have to get the data from the URL then we have to import our loader which is coming from index then we have to import our icon the brand icon that's coming from our csb index then we have to import our function
(7:58:24) we'll say Buy credit and that's coming from utils got it now we can simply come back here we have to take the plan that what type of plan we are selling we are selling three different plan Max Pro and starter and we have to import this so max plan we have process EnV next public Max plan simply replicate that and if you come back to the environment variable there you will find that in each plan we are providing these many credits so in the max plan we have 500 Credit in the Pro we have three and the starter file we have 50 so that's what
(7:59:02) we have to access copy paste copy paste and copy paste so we got that let's replace the name and looks good we got the environment variable and now we have to build the function so first we have to receive the props like buying and this will be set buying come back here we'll take a use State we'll say buying status so by default default it will be called waiting processing weight processing now we can simply come back here let's take this particular function calling buying and it will call credit
(7:59:45) it will be an Asing function and in that we have to pass the buying and this one is going to be very interesting so what I'm going to do is I'm going to Simply get the key pair which is available in the URL and based on that I have to select the package which user have bought so we'll say try and catch console log out it and here we have to build if a na statement so we'll say if buying is equal to Max plan because when the user will complete the payment this Max plan keyword will be available in the
(8:00:21) URL because that's the success you be are providing so if it's Max plans means user have bought the max plan you can see this is the max plans Pro Plan and startup plan you don't need to make any changes in these places because this is what we are finding in the URL and based on that we are updating the credit got it so first we have to say set buying status is going to be creating crediting then we can simply make a call to our backhand await buying credit and we can simply pass the max plan which is coming from
(8:00:56) our environment variable then we can simply set the status to be completed and after it's completed we have to Simply redirect the user to the homepage push to the homepage and then we can simply remove this set buying perfect when it's a Max plan then we have to Simply do all of these actions and update the user credit based on the max plan let's write the L statement and I can simply copy this one and paste here and this will be our Pro Plan so this is what we have Pro Plan Pro Plan and the rest would be F simply
(8:01:38) copy and paste here and the last one is going to be the starter plan so starter plan Start Plan and start plan and this is our function is ready which will update the user credit based on the purchase they have done now we have to Simply call this set buying status to be M contact support team if anything goes wrong and I want to call this function when there is a component open so we'll take this use effect and let's call this Buy trade and we have to pass the buying which one the user is buying so we're done with this now we
(8:02:18) can simply come back to the pages index and let's R work on the payment process so let's give this save it let's make it side by side let's come back to the homepage and let's bring it here and you can see the component is working now we have to work on the GSX come back here let's take this fragment we'll take a d it will have a class fixed insert zero background zinc 900 background opacity 40 Zen index 50 and you can see we got a overlay overlay now we have to apply the inline style
(8:03:08) top 50% transform translate minus 50% - 50% let's cut this one actually we don't need to apply this classes on this so simply select and cut and we have to apply this pointer event is going to be Auto then we have to take a d it will have a class background zinc 800 item Center fixed Shadow Xcel rounded 2XL zinx 50 padding X8 padding Y8 Tex small border border zinc 700 inline style is going to be top 50 and transform this come back here left is going to be 50 you can see that square and we'll say Max WID is going to be 3 335 30 pixels
(8:04:00) with is going to be 100% Max height is going to be 84 VH and inside that we can display the div it will have a class called Flex Flex call text zinc 200 text center items Center inside that we'll take our logo there it is now we have to take a div it will have a class called new Dash loader gs on then we'll take a span it will have binary replicate this and the third one will be call getting there and we'll display the current status of the payment so we'll say buying status perfect the entire component is
(8:04:45) ready we are importing all of that and all the Call of the API and transaction is happening so let's make on the big screen so this looks great close this one come back here and here we have the environment variable this is very important so this is what we going to provide in our strip payment Gateway once the payment will confirm successfully the the user will be redirect to this particular end point perfect and this is the URL we have to get from the stripe so close this one close this one close all of that and that's how it's
(8:05:25) looking perfect now we can simply minimize this one come back and now we have to go to stripe simply type stripe and I already have my account stripe is a very powerful payment provider which you can simply go I already have my account so I will simply log into it if you don't have your account simply create your account so let's click on this login and just wait it's taking a little bit time and finally I'm logg to my account and this is my text account that's why you can see it's available on the testt but if
(8:05:58) you want to go into the live mode you can have to verify your documents and submit your documents then they will give you the active active account so I'm going to do the testing on the test Network so you can see this is my dashboard and if I come back to the payment link you will find all the payment links which I have created so this is the three payment link I have created when I was doing the testing so to create a new payment link it's very easy you can simply click here in the in the new and here you will have
(8:06:26) multiple option so you have to click on this and it will give you two option based on the choose to customer which is going to be a kind of donation type but we want to have as a product and service so select this one and here you have to give the name of the product so you can call whatever you want so I'll say Pro Plan and you have to Simply select here and it's going to give you this model and here you can provide more detail so give the description about the plan I can upload my image so I'll
(8:06:52) upload to documents and this is the image and from here you can set the price in multiple currency if you are Indian you can send in Indian pricing if you want from anywhere else you can simply select that it's give you like more than 145 Country 35 countries currency so you can click and you can pick anyone so I go with the USD and I want to charge let's say $50 $20 for this particular plan and simply click on this add product and it will be added so here you have added the product successfully now you can add more
(8:07:26) details if you want if I want to take the name of the user so I can simply come back here click on this add custom name and get this to name and this is added now I can simply come back here and I want to redirect the user to a landing page so I can come back to the after payment and here I have to give the URL so click on this here I have to provide the URL so come back to the code and this URL we have designed so this is the URL we have to get simply copy this is one is for the the Pro Plan copy this one and that's
(8:08:00) what we have to provide so it will be redirect to this particular location click on this create and that's how you can create your plan I hope you guys have understood you got the link of the payment simply copy that one and that's what you can simply provide here paste here perfect so that's how you can create a link and do the configuration in the stripe if you come back to the payment link I have already done with all of these three plans so I'm going to go with the previous one but that's how you
(8:08:27) can create so I'll simply click here and copy from here simply copy this one and here you will find this is the exact end point I have given for the starter file so that's what I will going to get it so let's simply provide all of that so let's give it here come back go back to the max copy this is going to be the max one now I can get the let's say Pro one I'll copy from here and this one is going to be Pro one and the same URL you have to provide in the data field like in the in the feature
(8:09:04) and here you have to provide the same URL got it and if you want to do the editing you can simply do that this one is the starter this one is the pro and this one is the max you can simply do the changes close this one and you are ready you are ready to done you have done all the setups now we have to Simply restart your application because we have added new environment variable so simply close stop the application and simply start the application started now we can test this so simply close this one reload the page come back here and
(8:09:40) we have to Simply deactivate and remove this one save it come back reload the page and it's sticking and finally our application is working fine if you click you can see I have zero credit so now I'm ready to buy the credit so I can simply come back here click on the Buy credit and it will take you to account page and I can select anyone I can click on this 50 and it will take me to the stripe and I can fill out all of this detail so I'll give the name I'll give my card details so in stri for testing
(8:10:17) mode we have 42 42 42 42 and you can give any date and any CVC but it should be in future card holder name and I can go with this click on the payment and it's processing once the payment will complete we will redirect to our application and the payment is completed and here we are so we have successfully bought it if you click it's not reflecting but if you reload the page is going to reflect that and there it is 500 credit we have bought it if you come and if you want to buy more you can simply click and you can simply fill out
(8:10:47) all of these details give the test card CVC name and we can give the credential and and the payment come from we are here reload the page and you can see we got this 300 credit Moree so right now we have 800 in the same way you can pick the next one as well and you can buy it so I did it very quickly and you can see I got it perfect so all the payments is working fine now you can simply come back here go back to let's say if I want to create more I can simply come back here and I can create you can see the
(8:11:25) button is enabled and I can create so I can give my PR prompt let's call this one to Mountain cover with snow let's give the tag and let's select the model and this time I'll go with this one let's go with this one click on this generate and there we got it close this one if you come back here go to the Instagram this is what we got it perfect everything is looking great you can see now we can come back here close this one close this one go back to the upload and there you will find all the images we
(8:12:05) are uploading that's all you will find so this is the one generated Perfect come back here let's go to change this model to V2 and there is no image we have created using V2 model so let's test that so come back here we have selected the V2 model and I click on four Images select the ratio is going to be let's say this one this one like this one and I can give the prop so flying cat in the mountain give the tag animal let's call this animal and select the V2 and all of that looks great generate make sure to give beef prompt
(8:12:55) the more beef prompt you will give the better quality of image you will get and here we got the images you can see we got four images you can type and you can change the images you can click and you will be redir here perfect all the images reflecting is related to V2 model you can see perfect you can come back here and there is no image you can come to YouTube you can see this the M we have created you can like unlike come back here you can see reload the page okay this is the fix we have to do and this is the fix I have to do okay
(8:13:40) we have to do a little bit changes I know the problem because we are checking for the condition everything is great and here we have to do the changes and the like page if I change this to V3 you will see the images are looking fine here we has fine history page is also looking fine great perfect so we have to do a little bit changes in the history page and the like page but let's come back to the V2 history not reflecting but we have one image so come back here go back to the pages history and I see the problem I
(8:14:21) can simply do one thing this is fine we don't need to do anything in here this is this is good we are calling the right name and all we are calling the real and here we have to do the changes I can take this button out of it so I can come back to the like and we don't need this actually we have this this is what I have in all the places so there is the fix we have to do in these two pages this is fine the name is fine this is also good one and I found a problem so what we can do we have this all copy post remove
(8:15:24) this one we don't need this one because we don't have the filter system in the like page and we can remove in all the places remove it here and this is what I have I can remove this and we don't need this one remove this one save it those are the changes we have to do and now we can not a big deal we can fix that very easily come back here and we have this button section I can do one thing I can simply take this button out of this Dynamic component so we have all of this button I'll simply close this one and
(8:16:12) close this one and let's do the inspect element this is fine we already have the images you can see we have the images so the only thing we have to do is to take the buttom out of it let me have a quick look let's go back to the index page and this is I have exactly the same name in the model there's no problem in the model this is good we're doing all of the check this is also fine spelling is also good so spelling is also good active model we have the data reload the page so we can come back here and now we
(8:17:09) have to do one thing so simply take this button and close this one and cut this button and take this out of this Dynamic block paste here and we can come back here R to the page if I go to the like you can see we have the tab system so now if I click on the tab you can see now I can able to access this perfect looking great and that's the exact thing we have to do on the History Section as so this is good and the rest would be fine the rest would be fine now we can come back to the history and here we have simply cut and
(8:17:56) paste here the button read of the page and if I come back to the history it's reflecting perfect perfect let's do the inspect element perfectly align you can go to different section of the component pretty good come back to the home and this is the YouTube Instagram real that looks good so we have done with the entire project we are just doing the testing that all the features are working perfectly we have the tabs working great we have the history working tabs perfectly this is the like section we have and
(8:18:48) perfect come back to the history okay come back to the home we can change the model and there it is it's also looking great and we can come back to the tab if I click okay I have to fix the spelling come back to the code and here I am I can simply come here rename this and copy the name and that's all I have to do is to come back here then there's no need to do any changes in the company so let's come and have a look do we have any extra so we can come back here and this is fine like come back here and this is the
(8:19:44) place where I have to do the changes simply come back here get it one more time and paste here perfect and come back and reload the page now now if you come back to the history click here it will take you to the create section perfect so we are done with this entire project I hope you guys can understand all the credits are looking great we can down it up it let's check the responsiveness of the application perfect you can select the different models ratio check the credit change the models let's create the image image for
(8:20:28) testing we'll say flying Boy Over tree click on boy I know get five let's click on that and there we got it that's funny so boys is flying in the trees perfect you can like it you can close it can come back here and let's come to the home and we are in the YouTube this is the Instagram click here and select and open it up perfect let's change the model V3 because that's what I like most perfect let's do the inspector element final time to see things are looking good and responsive yeah we have this cuss system
(8:21:27) looking great on click open we can open it we can tap perfect perfect check the card system looks great this is the History Section you have the like system and account system so every single thing is looking good and 100% responsive you can see how beautiful things are coming together so we are done with this entire project close this one close this one I hope you guys have enjoy what we have done it everything is looking great now we can come back to the blockchain coder and there you will find all the resources about this particular project
(8:22:05) so we have tons of project on our Channel come back to the source you can come back to the movie AI and if you take this particular course it will teach you every single thing about the web to development and how you can deal with the AI models that's all because in this we have built one of the powerful application where you can find about the movies through the voice controls that's AI models we have included so it will teach you every single thing about the about the telin CSS folder and file structure that's all you will learn so
(8:22:30) make sure to check this one check out the modules we have we got an amazing response and a lot of students have already taken that and if you want to take your web3 career to the next level you can check this one it has 40 plus hour of content you will learn complete blockchain development from beginner to advanced level you will Master complete s programming language you will learn about the web3 setup and you're going to build one of the biggest web the project so check this one as well come back to the source code section there you will
(8:22:55) find that we have more than 50 project related to web 3 that's all you will find so make sure to check and this is the project in which you will have the all the detail all the assets all the starter files so you can simply click here and you can watch this video if you take the final source code in that I have explained that how you have to do the setup if you get the final source code make sure to watch this video complete and you can click here and from here you can get the startup file watch the setup video and you can buy the code
(8:23:19) that's all is given perfect so finally we're done with this entire project I hope you guys are follow along with me and understood everything single thing and you have built your first ever AI image Art generator if you have any question any doubt do let me know in the comment section do leave your feedback and definitely we're going to have more project related to that check all the project we have on the channel it will teach you every single thing and make you better web3 developer or web2 developer with that I'm ending this have
(8:23:44) a wonderful day bye-bye